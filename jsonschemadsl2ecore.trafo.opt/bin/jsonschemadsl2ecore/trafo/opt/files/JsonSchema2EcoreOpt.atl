-- @atlcompiler emftvm
-- @nsURI JSchemaMM=http://at.jku.bise/jsonMetaschemaMM
-- @nsURI Ecore=http://www.eclipse.org/emf/2002/Ecore
-- @nsURI JsonGrammarMM=http://at.jku.bise/jsongrammar/1.0

module JsonSchema2EcoreOpt;
create ecoreM : Ecore, jsonGrammar : JsonGrammarMM from jschema : JSchemaMM;


uses JsonSchema2EcoreOptUtils;

helper def: rootEPackage : Ecore!EPackage = OclUndefined;
helper def: jsonDocumentStarter:String='jsonDocumentStarter';


rule JsonSchemaToEPackage {
	from
		jsonSchema : JSchemaMM!JsonSchema
	to 
		-------TODO read this info from file name
		ePackage : Ecore!EPackage (
			name <- 'Shipyard',
			nsPrefix <- 'Shipyard',
			nsURI <- 'http://jku.bise.at/Shipyard'
		)
	do{
		thisModule.rootEPackage <- ePackage;
	}	
	
}

rule mapRootOrDefinitionsObjectSchemaToEClass{
	from objectSchema :JSchemaMM!ObjectSchema (objectSchema.isRootOrDefinitionOrSchemaObjectAdditionalProperties())
	to 
		eClass : Ecore!EClass (
			name<- objectSchema.buildEClassname(),
			eStructuralFeatures <-objectSchema.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(JSchemaMM!TypeSchemaDefinition))
		)
	do {
--		thisModule.rootEPackage.eClassifiers <- eClass;
--		thisModule.rootEPackage.eClassifiers <- thisModule.rootEPackage.eClassifiers->union(Sequence{eClass});
	}		
		
}

abstract rule mapInPropertiesSchemaToEClass{
	from schema :JSchemaMM!Schema (schema.isKeySchemaPairInProperties())
	using {
		propertiesEClassName : String = schema.refImmediateComposite().refImmediateComposite().refImmediateComposite().buildEClassname().concat('Properties');
	}
	to 
		eClass : Ecore!EClass (
			name<- schema.buildEClassname(),
			eSuperTypes <-  Set{thisModule.createPropertiesEClass(propertiesEClassName)}
		)
}

rule mapInPropertiesObjectSchemaToEClass extends mapInPropertiesSchemaToEClass{
--	from objectSchema :JSchemaMM!ObjectSchema (objectSchema.isKeySchemaPairInProperties())
	from schema :JSchemaMM!Schema (schema.isKeySchemaPairInProperties() and schema.oclIsTypeOf(JSchemaMM!ObjectSchema))
--	using {
--		propertiesEClassName : String = objectSchema.refImmediateComposite().refImmediateComposite().refImmediateComposite().buildEClassname().concat('Properties');
--	}
	to 
		eClass : Ecore!EClass (
--			name<- objectSchema.buildEClassname(),
			eStructuralFeatures <-schema.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(JSchemaMM!TypeSchemaDefinition))--,
--			eSuperTypes <-  Set{thisModule.createPropertiesEClass(propertiesEClassName)}
		)
--	do {
--		thisModule.rootEPackage.eClassifiers <- Set{eClass};
--	}	
		
}

rule mapInPropertiesBooleanSchemaToEClass extends mapInPropertiesSchemaToEClass{
	from schema :JSchemaMM!Schema  (schema.isKeySchemaPairInProperties() and schema.oclIsTypeOf(JSchemaMM!BooleanSchema) and schema.value=true)
--	using {
--		propertiesEClassName : String = schema.refImmediateComposite().refImmediateComposite().refImmediateComposite().buildEClassname().concat('Properties');
--	}
	to 
		eClass : Ecore!EClass (
--			name<- schema.buildEClassname(),
			eStructuralFeatures <- Sequence{properties}--,
--			eSuperTypes <-  Set{thisModule.createPropertiesEClass(propertiesEClassName)}
		),
		properties:Ecore!EReference ( 
			name <- schema.getKey(),
			eType <- thisModule.createJsonDocument(thisModule.jsonDocumentStarter),
			containment <- true,
			lowerBound <- 1,
			upperBound <- 1
			
		)
--	do {
--		thisModule.rootEPackage.eClassifiers <- Set{eClass};
--	}	
		
}

abstract rule mapSchemaInPatternPropertiesEClass {
	from schema :JSchemaMM!Schema (schema.isKeySchemaPairInPatternProperties())
	using {
		propertiesEClassName : String = schema.refImmediateComposite().refImmediateComposite().refImmediateComposite().buildEClassname().concat('Properties');
	} 
	to 
		eClass : Ecore!EClass (
			name<- schema.buildEClassname(),
			eSuperTypes <-  Set{thisModule.createPropertiesEClass(propertiesEClassName)}
		),
		key : Ecore!EAttribute(
			name<-'key',
			lowerBound <-1,
			upperBound <- 1,
			eType <- Ecore!EString
		)
}

rule mapObjectSchemaInPatternPropertiesEClass extends mapSchemaInPatternPropertiesEClass{
--	from objectSchema :JSchemaMM!ObjectSchema (objectSchema.isKeySchemaPairInPatternProperties())
	from schema :JSchemaMM!Schema (schema.isKeySchemaPairInPatternProperties() and schema.oclIsTypeOf(JSchemaMM!ObjectSchema))
	using {
--		propertiesEClassName : String = objectSchema.refImmediateComposite().refImmediateComposite().refImmediateComposite().buildEClassname().concat('Properties');
--		patternPropertiesType : JSchemaMM!TypeSchemaDefinition = objectSchema.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(JSchemaMM!TypeSchemaDefinition));
		patternPropertiesType : JSchemaMM!TypeSchemaDefinition = schema.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(JSchemaMM!TypeSchemaDefinition));
	} 
	to 
		eClass : Ecore!EClass (
--			name<- objectSchema.buildEClassname(),
			eStructuralFeatures <- Set{key,patternPropertiesType}.flatten()--,
--			eSuperTypes <-  Set{thisModule.createPropertiesEClass(propertiesEClassName)}
		),
		key : Ecore!EAttribute--(
--			name<-'key',
--			lowerBound <-1,
--			upperBound <- 1,
--			eType <- Ecore!EString
--		)
}

rule mapBooleanSchemaInPatternPropertiesEClass extends mapSchemaInPatternPropertiesEClass{
--	from booleanSchema :JSchemaMM!BooleanSchema (
--		booleanSchema.isKeySchemaPairInPatternProperties()
--		and booleanSchema.value=true
--	)
	from schema :JSchemaMM!Schema  (
		schema.isKeySchemaPairInPatternProperties()
		and schema.oclIsTypeOf(JSchemaMM!BooleanSchema)
		and schema.value=true
	)
	using {
--		propertiesEClassName : String = booleanSchema.refImmediateComposite().refImmediateComposite().refImmediateComposite().buildEClassname().concat('Properties');
	} 
	to 
		eClass : Ecore!EClass (
--			name<- booleanSchema.buildEClassname(),
			eStructuralFeatures <- Set{key,patternProperties}--,
--			eSuperTypes <-  Set{thisModule.createPropertiesEClass(propertiesEClassName)}
		),
		key : Ecore!EAttribute,--(
--			name<-'key',
--			lowerBound <-1,
--			upperBound <- 1,
--			eType <- Ecore!EString
--		),
		patternProperties:Ecore!EReference ( 
--			name <- booleanSchema.getKey(),
			name <- schema.getKey(),
			eType <- thisModule.createJsonDocument(thisModule.jsonDocumentStarter),
			containment <- true,
			lowerBound <- 1,
			upperBound <- 1
			
		)
}

abstract rule mapAdditionalPropertiesEClass {
	from additionalPropertiesSchemaDefinition : JSchemaMM!AdditionalPropertiesSchemaDefinition
	using {
		additionalPropertiesName : String = additionalPropertiesSchemaDefinition.additionalProperties.buildEClassname();
		propertiesEClassName : String = 	additionalPropertiesSchemaDefinition.refImmediateComposite().buildEClassname().concat('Properties');
	}
	to
		eClass : Ecore!EClass (
		 	name <-	additionalPropertiesName,
			eSuperTypes <-  Set{thisModule.createPropertiesEClass(propertiesEClassName)}
		),
		
		key : Ecore!EAttribute(
			name<-'key',
			lowerBound <-1,
			upperBound <- 1,
			eType <- Ecore!EString
		)
}

rule mapObjectSchemaAdditionalPropertiesEClass extends mapAdditionalPropertiesEClass{
	from additionalPropertiesSchemaDefinition : JSchemaMM!AdditionalPropertiesSchemaDefinition (additionalPropertiesSchemaDefinition.additionalProperties.oclIsTypeOf(JSchemaMM!ObjectSchema))
	using {
--		additionalPropertiesName : String = additionalPropertiesSchemaDefinition.additionalProperties.buildEClassname();
		additionalPropertiesType : JSchemaMM!TypeSchemaDefinition = additionalPropertiesSchemaDefinition.additionalProperties.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(JSchemaMM!TypeSchemaDefinition));
--		propertiesEClassName : String = 	additionalPropertiesSchemaDefinition.refImmediateComposite().buildEClassname().concat('Properties');
	}
	to
		eClass : Ecore!EClass (
--		 	name <-	additionalPropertiesName,
			eStructuralFeatures <- Set{key, additionalPropertiesType}.flatten()--,
--			eSuperTypes <-  Set{thisModule.createPropertiesEClass(propertiesEClassName)}
		),
		key : Ecore!EAttribute
--		key : Ecore!EAttribute(
--			name<-'key',
--			lowerBound <-1,
--			upperBound <- 1,
--			eType <- Ecore!EString
--		)
}

rule mapBooleanSchemaAdditionalPropertiesEClass extends mapAdditionalPropertiesEClass{
	from additionalPropertiesSchemaDefinition : JSchemaMM!AdditionalPropertiesSchemaDefinition (
		additionalPropertiesSchemaDefinition.additionalProperties.oclIsTypeOf(JSchemaMM!BooleanSchema) and 
		additionalPropertiesSchemaDefinition.additionalProperties.value=true
	)
	using {
--		additionalPropertiesName : String = additionalPropertiesSchemaDefinition.additionalProperties.buildEClassname();
--		
--		propertiesEClassName : String = 	additionalPropertiesSchemaDefinition.refImmediateComposite().buildEClassname().concat('Properties');
	}
	to
		eClass : Ecore!EClass (
--		 	name <-	additionalPropertiesName,
			eStructuralFeatures <- Set{key, additionalProperties}.flatten()
--			eSuperTypes <-  Set{thisModule.createPropertiesEClass(propertiesEClassName)}
		),
		key : Ecore!EAttribute,
--		key : Ecore!EAttribute(
--			name<-'key',
--			lowerBound <-1,
--			upperBound <- 1,
--			eType <- Ecore!EString
--		),
		additionalProperties: Ecore!EReference(
			name<-'additionalProperties',
			containment <- true,
			lowerBound <-1,
			upperBound <- 1,
			eType <- thisModule.createJsonDocument(thisModule.jsonDocumentStarter)
		)
}

rule mapDefaultAdditionalPropertiesEClass  extends createPropertiesContainmentAndMapDefaultAdditionalPropertiesEClass{
	from typeSchemaDefinition: JSchemaMM!TypeSchemaDefinition (
		typeSchemaDefinition.findSimpleType() = #"\"object\"" and
		typeSchemaDefinition.refImmediateComposite().keywordDefinition->exists(keyword  | keyword.oclIsTypeOf(JSchemaMM!AdditionalPropertiesSchemaDefinition)) = false
	)
	using {
		additionalPropertiesName : String = typeSchemaDefinition.refImmediateComposite().buildEClassname().concat('AdditionalProperties');
		propertiesEClassName : String = 	typeSchemaDefinition.refImmediateComposite().buildEClassname().concat('Properties');
	}
	to
		eReference :Ecore!EReference,
		eClass : Ecore!EClass (
		 	name <-	additionalPropertiesName,
			eStructuralFeatures <- Set{key, additionalProperties}.flatten(),
			eSuperTypes <-  Set{thisModule.createPropertiesEClass(propertiesEClassName)}
		),
		key : Ecore!EAttribute(
			name<-'key',
			lowerBound <-1,
			upperBound <- 1,
			eType <- Ecore!EString
		),
		additionalProperties: Ecore!EReference(
			name<-'additionalProperties',
			containment <- true,
			lowerBound <-1,
			upperBound <- 1,
			eType <- thisModule.createJsonDocument(thisModule.jsonDocumentStarter)
		)
}


rule createEAttributeSimpleScalar{
	from 
		typeSchemaDefinition: JSchemaMM!TypeSchemaDefinition (not typeSchemaDefinition.getEDataType().oclIsUndefined())	
	to 
		eAttribute : Ecore!EAttribute(
			name<-typeSchemaDefinition.refImmediateComposite().getKey(),
			lowerBound <-1,
			upperBound <- 1,
			eType <- typeSchemaDefinition.getEDataType()
		)
}

abstract rule createPropertiesContainmentAndMapDefaultAdditionalPropertiesEClass{
	from typeSchemaDefinition: JSchemaMM!TypeSchemaDefinition (typeSchemaDefinition.findSimpleType() = #"\"object\"")	
	to 
		eReference :Ecore!EReference ( 
			name <- 'properties',
			eType <- thisModule.createPropertiesEClass(typeSchemaDefinition.refImmediateComposite().buildEClassname().concat('Properties')),
--			eType <- thisModule.createPropertiesEClass(typeSchemaDefinition),
			containment <- true,
			lowerBound <- 0,
			upperBound <- -1
			
		)
}

rule createPropertiesContainment extends createPropertiesContainmentAndMapDefaultAdditionalPropertiesEClass{
	from typeSchemaDefinition: JSchemaMM!TypeSchemaDefinition (
		typeSchemaDefinition.findSimpleType() = #"\"object\"" 
		and	typeSchemaDefinition.refImmediateComposite().keywordDefinition->exists(keyword  | keyword.oclIsTypeOf(JSchemaMM!AdditionalPropertiesSchemaDefinition)) = true
		
	)	
	to 
		eReference :Ecore!EReference 
--		( 
--			name <- 'properties',
--			eType <- thisModule.createPropertiesEClass(typeSchemaDefinition.refImmediateComposite().buildEClassname().concat('Properties')),
----			eType <- thisModule.createPropertiesEClass(typeSchemaDefinition),
--			containment <- true,
--			lowerBound <- 0,
--			upperBound <- -1
--			
--		)
}


abstract rule mapItemsSchemaToEClass{
	from typeSchemaDefinition: JSchemaMM!TypeSchemaDefinition (typeSchemaDefinition.findSimpleType() = #"\"array\"")
	to
		itemsEClass:  Ecore!EClass (
			name <- typeSchemaDefinition.refImmediateComposite().buildEClassname().concat('Items')
		),
		eReference :Ecore!EReference ( 
			name <- 'items',
			eType <- itemsEClass,
			containment <- true,
			lowerBound <- 0,
			upperBound <- -1
			
		)
}

rule mapItemsObjectSchemaToEClass extends mapItemsSchemaToEClass{
	from typeSchemaDefinition: JSchemaMM!TypeSchemaDefinition (
		typeSchemaDefinition.findSimpleType() = #"\"array\""
		and (
			let itemsKeywordDefinition : Sequence(JSchemaMM!ItemsSchemaDefinition) = typeSchemaDefinition.refImmediateComposite().keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(JSchemaMM!ItemsSchemaDefinition)) in  
			not itemsKeywordDefinition.isEmpty() and itemsKeywordDefinition.first().itemsAnyOf1.oclIsTypeOf(JSchemaMM!ObjectSchema)
		)
	)	
	to 
--		eReference :Ecore!EReference ( 
--			name <- 'items',
--			eType <- itemsEClass,
--			containment <- true,
--			lowerBound <- 0,
--			upperBound <- -1
--			
--		),
		eReference :Ecore!EReference,
		itemsEClass:  Ecore!EClass (
--			name <- typeSchemaDefinition.refImmediateComposite().keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(JSchemaMM!ItemsSchemaDefinition)).first().itemsAnyOf1.buildEClassname(),
			eStructuralFeatures <- Sequence{typeSchemaDefinition.refImmediateComposite().keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(JSchemaMM!ItemsSchemaDefinition)).first().itemsAnyOf1.keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(JSchemaMM!TypeSchemaDefinition))}.flatten() 
		)
}



rule mapItemsBooleanSchemaOrDefaultToEClass extends mapItemsSchemaToEClass{
	from typeSchemaDefinition: JSchemaMM!TypeSchemaDefinition (
		typeSchemaDefinition.findSimpleType() = #"\"array\""
		and (
			let itemsKeywordDefinition : Sequence(JSchemaMM!ItemsSchemaDefinition) = typeSchemaDefinition.refImmediateComposite().keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(JSchemaMM!ItemsSchemaDefinition)) in  
			itemsKeywordDefinition.isEmpty() ---- true is the Default case
			or(itemsKeywordDefinition.first().itemsAnyOf1.oclIsTypeOf(JSchemaMM!BooleanSchema) and itemsKeywordDefinition.first().itemsAnyOf1.value=true )
		)	
	)	
	to 
--		eReference :Ecore!EReference ( 
--			name <- 'items',
--			eType <- itemsEClass,
--			containment <- true,
--			lowerBound <- 0,
--			upperBound <- -1
--			
--		),
		eReference :Ecore!EReference,
		itemsEClass:  Ecore!EClass (
--			name <- typeSchemaDefinition.refImmediateComposite().buildEClassname().concat('Items'),
			eStructuralFeatures <- Sequence{itemsEReference}
		),
		itemsEReference:Ecore!EReference (
			name <- 'items',
			eType <- thisModule.createJsonDocument(thisModule.jsonDocumentStarter),
			containment <- true,
			lowerBound <- 1,
			upperBound <- 1
		)	
}




unique lazy rule createPropertiesEClass{
	from name:String
--	from typeSchemaDefinition: JSchemaMM!TypeSchemaDefinition
--	using {
--		name : String =  typeSchemaDefinition->debug('ddddddddddddddddddd').refImmediateComposite().buildEClassname().concat('Properties');
--	}
	to
		eClass : Ecore!EClass (
			name <- name,
			abstract<- true
		)
	
}


----------------------    rules for Json Document ---------------------------
unique lazy rule createJsonDocument{
--	from rootEPackage : Ecore!EPackage
	from createJsonDocument : String (createJsonDocument = thisModule.jsonDocumentStarter)
	to
		jsonDocument : Ecore!EClass(
			name <- 'JsonDocument',
			eStructuralFeatures <-Set{jsonDocumentValue}
		),
		jsonDocumentValue :Ecore!EReference ( 
			name<-'value',
			containment <- true,
			eType <- abstractValue,
			lowerBound <- 1,
			upperBound <- 1
		),
		abstractValue  : Ecore!EClass(
			name <- 'Value',
			abstract<- true
		),
		----- createConcreteValues
		arrayValue :  Ecore!EClass(
			name<-'ArrayValue',
			eSuperTypes <- Set{abstractValue},
			eStructuralFeatures <- Set{arrayToValueReference}
		),	
		arrayToValueReference :Ecore!EReference ( 
			name<-'value',
			containment <- true,
			eType <- abstractValue,
			lowerBound <- 0,
			upperBound <- -1
		),
		booleanValue :  Ecore!EClass(
			name<-'BooleanValue',
			eSuperTypes <- Set{abstractValue},
			eStructuralFeatures <- Set{booleanValueEattribute}
		),
		booleanValueEattribute :  Ecore!EAttribute(
			name<-'value',
			eType <-Ecore!EBoolean,
			lowerBound <- 1,
			upperBound <- 1
		),
		integerValue :  Ecore!EClass(
			name<-'IntegerValue',
			eSuperTypes <- Set{abstractValue},
			eStructuralFeatures <- Set{integerValueEattribute}
		),
		integerValueEattribute :  Ecore!EAttribute(
			name<-'value',
			eType <-Ecore!EInt,
			lowerBound <- 1,
			upperBound <- 1
		),
		nullValue : Ecore!EClass(
			name<-'NullValue',
			eSuperTypes <- Set{abstractValue}
		),
		numberValue : Ecore!EClass(
			name<-'NumberValue',
			eSuperTypes <- Set{abstractValue},
			eStructuralFeatures <- Set{numberValueEattribute}
		),
		numberValueEattribute :  Ecore!EAttribute(
			name<-'value',
			eType <-Ecore!EDouble,
			lowerBound <- 1,
			upperBound <- 1
		),
		
		stringValue : Ecore!EClass(
			name<-'StringValue',
			eSuperTypes <- Set{abstractValue},
			eStructuralFeatures <- Set{stringValueEattribute}
		),
		stringValueEattribute :  Ecore!EAttribute(
			name<-'value',
			eType <-Ecore!EString,
			lowerBound <- 1,
			upperBound <- 1
		),
		objectValue : Ecore!EClass(
			name<-'ObjectValue',
			eSuperTypes <- Set{abstractValue},
			eStructuralFeatures <- Set{objectKeyValuePair}
		),
		objectKeyValuePair : Ecore!EReference ( 
			name<-'keyvaluepair',
			containment <- true,
			eType <- keyValuePair,
			lowerBound <- 0,
			upperBound <- -1
		),
		--- createkeyValuePair
		keyValuePair :  Ecore!EClass(
			name<-'KeyValuePair',
			eStructuralFeatures <- Set{key,value}
		),
		key : Ecore!EAttribute(
			name<-'key',
			eType <-Ecore!EString,
			lowerBound <- 1,
			upperBound <- 1
		),
		value :Ecore!EReference ( 
			name<-'value',
			containment <- true,
			eType <- abstractValue,
			lowerBound <- 1,
			upperBound <- 1
		)
--	do {
--		
--		thisModule.rootEPackage.eClassifiers <- jsonDocument;
--		thisModule.rootEPackage.eClassifiers <- abstractValue;
--		thisModule.rootEPackage.eClassifiers <- arrayValue;
--		thisModule.rootEPackage.eClassifiers <- booleanValue;
--		thisModule.rootEPackage.eClassifiers <- integerValue;
--		thisModule.rootEPackage.eClassifiers <- nullValue;
--		thisModule.rootEPackage.eClassifiers <- numberValue;
--		thisModule.rootEPackage.eClassifiers <- stringValue;
--		thisModule.rootEPackage.eClassifiers <- objectValue;
--		thisModule.rootEPackage.eClassifiers <- keyValuePair;
--	}
		
}




 




