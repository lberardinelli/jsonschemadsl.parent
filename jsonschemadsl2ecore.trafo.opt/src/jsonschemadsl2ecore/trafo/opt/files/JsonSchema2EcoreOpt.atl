-- @atlcompiler emftvm
-- @nsURI JSchemaMM=http://at.jku.bise/jsonMetaschemaMM
-- @nsURI Ecore=http://www.eclipse.org/emf/2002/Ecore
-- @nsURI JsonGrammarMM=http://at.jku.bise/jsongrammar/1.0

module JsonSchema2EcoreOpt;
create ecoreM : Ecore, jsonGrammar : JsonGrammarMM from jschema : JSchemaMM;


uses JsonSchema2EcoreOptUtils;

helper def: rootEPackage : Ecore!EPackage = OclUndefined;
helper def: jsonDocumentStarter:String='jsonDocumentStarter';


rule JsonSchemaToEPackage {
	from
		jsonSchema : JSchemaMM!JsonSchema
	to 
		ePackage : Ecore!EPackage (
			name <- jsonSchema.eResource().getURI().trimFileExtension().lastSegment(),
			nsPrefix <- jsonSchema.eResource().getURI().trimFileExtension().lastSegment(),
			nsURI <- 'http://jku.bise.at/' + jsonSchema.eResource().getURI().trimFileExtension().lastSegment()
		),
		jsonGrammar : JsonGrammarMM!JsonGrammar (
			nsURI <- 'http://jku.bise.at/' + jsonSchema.eResource().getURI().trimFileExtension().lastSegment(),
			detailedGrammar <- detailedGrammar
		), 
		detailedGrammar : JsonGrammarMM!DetailedGrammar (
			
			)
}

rule mapRootOrDefinitionsObjectSchemaToEClass{
	from objectSchema :JSchemaMM!ObjectSchema (objectSchema.isRootOrDefinitionOrSchemaObjectAdditionalProperties())
	to 
		eClass : Ecore!EClass (
			name<- objectSchema.buildEClassname(),
			eStructuralFeatures <-objectSchema.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(JSchemaMM!TypeSchemaDefinition))
		)
--	do {
--		if (objectSchema->refImmediateComposite().oclIsTypeOf(JSchemaMM!JsonSchema) = true) { 
--			thisModule.curlyBracesEClass <- thisModule.curlyBracesEClass->union(Sequence{eClass});
--		}
--	}
} 

abstract rule mapInPropertiesSchemaToEClass{
	from schema :JSchemaMM!Schema (schema.isKeySchemaPairInProperties())
	using {
		propertiesEClassName : String = schema.refImmediateComposite().refImmediateComposite().refImmediateComposite().buildEClassname().concat('Properties');
	}
	to 
		eClass : Ecore!EClass (
			name<- schema.buildEClassname(),
			eSuperTypes <-  Sequence{thisModule.createPropertiesEClass(propertiesEClassName)}
		)
}

rule mapInPropertiesObjectSchemaToEClass extends mapInPropertiesSchemaToEClass{
	from schema :JSchemaMM!Schema (schema.isKeySchemaPairInProperties() and schema.oclIsTypeOf(JSchemaMM!ObjectSchema))
	to 
		eClass : Ecore!EClass (
--			eStructuralFeatures <-schema.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(JSchemaMM!TypeSchemaDefinition)) 
			eStructuralFeatures <- 	let refSchemaDefinitonSequence : Sequence(JSchemaMM!RefSchemaDefinition) = schema.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(JSchemaMM!RefSchemaDefinition)) in
									if not refSchemaDefinitonSequence.isEmpty() then refSchemaDefinitonSequence
									else schema.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(JSchemaMM!TypeSchemaDefinition)) 
									endif
		)
}

rule mapInPropertiesBooleanSchemaToEClass extends mapInPropertiesSchemaToEClass{
	from schema :JSchemaMM!Schema  (schema.isKeySchemaPairInProperties() and schema.oclIsTypeOf(JSchemaMM!BooleanSchema) and schema.value=true)
--	using {
--		propertiesEClassName : String = schema.refImmediateComposite().refImmediateComposite().refImmediateComposite().buildEClassname().concat('Properties');
--	}
	to 
		eClass : Ecore!EClass (
--			name<- schema.buildEClassname(),
			eStructuralFeatures <- Sequence{properties}--,
--			eSuperTypes <-  Set{thisModule.createPropertiesEClass(propertiesEClassName)}
		),
		properties:Ecore!EReference ( 
			name <- schema.getKey(),
			eType <- JSchemaMM!JsonDocument,
			containment <- true,
			lowerBound <- 1,
			upperBound <- 1
			
		)		
}

abstract rule mapSchemaInPatternPropertiesEClass {
	from schema :JSchemaMM!Schema (schema.isKeySchemaPairInPatternProperties())
	using {
		propertiesEClassName : String = schema.refImmediateComposite().refImmediateComposite().refImmediateComposite().buildEClassname().concat('Properties');
	} 
	to 
		eClass : Ecore!EClass (
			name<- schema.buildEClassname(),
			eSuperTypes <-  Set{thisModule.createPropertiesEClass(propertiesEClassName)}
		),
		key : Ecore!EAttribute(
			name<-'key',
			lowerBound <-1,
			upperBound <- 1,
			eType <- Ecore!EString
		)
}

rule mapObjectSchemaInPatternPropertiesEClass extends mapSchemaInPatternPropertiesEClass{
	from schema :JSchemaMM!Schema (schema.isKeySchemaPairInPatternProperties() and schema.oclIsTypeOf(JSchemaMM!ObjectSchema))
--	using {
--		patternPropertiesType : JSchemaMM!TypeSchemaDefinition = schema.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(JSchemaMM!TypeSchemaDefinition));
--	} 
	to 
		eClass : Ecore!EClass (
--			eStructuralFeatures <- Set{key,patternPropertiesType}.flatten() 
			eStructuralFeatures <- Set{key,let refSchemaDefinitonSequence : Sequence(JSchemaMM!RefSchemaDefinition) = schema.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(JSchemaMM!RefSchemaDefinition)) in
										if not refSchemaDefinitonSequence.isEmpty() then refSchemaDefinitonSequence
										else schema.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(JSchemaMM!TypeSchemaDefinition)) 
										endif
									}.flatten() 
		),
		key : Ecore!EAttribute 
}

rule mapBooleanSchemaInPatternPropertiesEClass extends mapSchemaInPatternPropertiesEClass{
--	from booleanSchema :JSchemaMM!BooleanSchema (
--		booleanSchema.isKeySchemaPairInPatternProperties()
--		and booleanSchema.value=true
--	)
	from schema :JSchemaMM!Schema  (
		schema.isKeySchemaPairInPatternProperties()
		and schema.oclIsTypeOf(JSchemaMM!BooleanSchema)
		and schema.value=true
	)
	using {
--		propertiesEClassName : String = booleanSchema.refImmediateComposite().refImmediateComposite().refImmediateComposite().buildEClassname().concat('Properties');
	} 
	to 
		eClass : Ecore!EClass (
--			name<- booleanSchema.buildEClassname(),
			eStructuralFeatures <- Set{key,patternProperties}--,
--			eSuperTypes <-  Set{thisModule.createPropertiesEClass(propertiesEClassName)}
		),
		key : Ecore!EAttribute,--(
--			name<-'key',
--			lowerBound <-1,
--			upperBound <- 1,
--			eType <- Ecore!EString
--		),
		patternProperties:Ecore!EReference ( 
--			name <- booleanSchema.getKey(),
			name <- schema.getKey(),
			eType <- JSchemaMM!JsonDocument,
			containment <- true,
			lowerBound <- 1,
			upperBound <- 1
			
		)
}

abstract rule mapAdditionalPropertiesEClass {
	from additionalPropertiesSchemaDefinition : JSchemaMM!AdditionalPropertiesSchemaDefinition
	using {
		additionalPropertiesName : String = additionalPropertiesSchemaDefinition.additionalProperties.buildEClassname();
		propertiesEClassName : String = 	additionalPropertiesSchemaDefinition.refImmediateComposite().buildEClassname().concat('Properties');
	}
	to
		eClass : Ecore!EClass (
		 	name <-	additionalPropertiesName,
			eSuperTypes <-  Set{thisModule.createPropertiesEClass(propertiesEClassName)}
		),
		
		key : Ecore!EAttribute(
			name<-'key',
			lowerBound <-1,
			upperBound <- 1,
			eType <- Ecore!EString
		)
		do {
			thisModule.keyValues <- thisModule.keyValues->union(Sequence{key});
		}
}

rule mapObjectSchemaAdditionalPropertiesEClass extends mapAdditionalPropertiesEClass{
	from additionalPropertiesSchemaDefinition : JSchemaMM!AdditionalPropertiesSchemaDefinition (additionalPropertiesSchemaDefinition.additionalProperties.oclIsTypeOf(JSchemaMM!ObjectSchema))
	using {
--		additionalPropertiesType : JSchemaMM!TypeSchemaDefinition = additionalPropertiesSchemaDefinition.additionalProperties.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(JSchemaMM!TypeSchemaDefinition));
		additionalPropertiesObjectSchema : JSchemaMM!ObjectSchema = additionalPropertiesSchemaDefinition.additionalProperties;
	}
	to
		eClass : Ecore!EClass (
--			eStructuralFeatures <- Set{key, additionalPropertiesType}.flatten()
			eStructuralFeatures <- Sequence{key,let refSchemaDefinitonSequence : Sequence(JSchemaMM!RefSchemaDefinition) = additionalPropertiesObjectSchema.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(JSchemaMM!RefSchemaDefinition)) in
										if not refSchemaDefinitonSequence.isEmpty() then refSchemaDefinitonSequence
										else additionalPropertiesObjectSchema.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(JSchemaMM!TypeSchemaDefinition)) 
										endif
									}.flatten() 
									
									
		),
		key : Ecore!EAttribute		
}

rule mapBooleanSchemaAdditionalPropertiesEClass extends mapAdditionalPropertiesEClass{
	from additionalPropertiesSchemaDefinition : JSchemaMM!AdditionalPropertiesSchemaDefinition (
		additionalPropertiesSchemaDefinition.additionalProperties.oclIsTypeOf(JSchemaMM!BooleanSchema) and 
		additionalPropertiesSchemaDefinition.additionalProperties.value=true
	)
	using {
--		additionalPropertiesName : String = additionalPropertiesSchemaDefinition.additionalProperties.buildEClassname();
--		
--		propertiesEClassName : String = 	additionalPropertiesSchemaDefinition.refImmediateComposite().buildEClassname().concat('Properties');
	}
	to
		eClass : Ecore!EClass (
--		 	name <-	additionalPropertiesName,
			eStructuralFeatures <- Set{key, additionalProperties}.flatten()
--			eSuperTypes <-  Set{thisModule.createPropertiesEClass(propertiesEClassName)}
		),
		key : Ecore!EAttribute,
--		key : Ecore!EAttribute(
--			name<-'key',
--			lowerBound <-1,
--			upperBound <- 1,
--			eType <- Ecore!EString
--		),
		additionalProperties: Ecore!EReference(
			name<-'additionalProperties',
			containment <- true,
			lowerBound <-1,
			upperBound <- 1,
			eType <- JSchemaMM!JsonDocument
		)
}

rule mapDefaultAdditionalPropertiesEClass  extends createPropertiesContainmentAndMapDefaultAdditionalPropertiesEClass{
	from typeSchemaDefinition: JSchemaMM!TypeSchemaDefinition (
		typeSchemaDefinition.findSimpleType() = #"\"object\"" and
		typeSchemaDefinition.refImmediateComposite().keywordDefinition->exists(keyword  | keyword.oclIsTypeOf(JSchemaMM!AdditionalPropertiesSchemaDefinition)) = false
	)
	using {
		additionalPropertiesName : String = typeSchemaDefinition.refImmediateComposite().buildEClassname().concat('AdditionalProperties');
		propertiesEClassName : String = 	typeSchemaDefinition.refImmediateComposite().buildEClassname().concat('Properties');
	}
	to
		eReference :Ecore!EReference,
		eClass : Ecore!EClass (
		 	name <-	additionalPropertiesName,
			eStructuralFeatures <- Set{key, additionalProperties}.flatten(),
			eSuperTypes <-  Set{thisModule.createPropertiesEClass(propertiesEClassName)}
		),
		key : Ecore!EAttribute(
			name<-'key',
			lowerBound <-1,
			upperBound <- 1,
			eType <- Ecore!EString
		),
		additionalProperties: Ecore!EReference(
			name<-'additionalProperties',
			containment <- true,
			lowerBound <-1,
			upperBound <- 1,
			eType <- JSchemaMM!JsonDocument
		)
}


rule createEAttributeSimpleScalar{
	from 
		typeSchemaDefinition: JSchemaMM!TypeSchemaDefinition (not typeSchemaDefinition.getEDataType().oclIsUndefined())	
	to 
		eAttribute : Ecore!EAttribute(
			name<-typeSchemaDefinition.refImmediateComposite().getKey(),
			lowerBound <-1,
			upperBound <- 1,
			eType <- typeSchemaDefinition.getEDataType()
		)
	do {
		if (typeSchemaDefinition.refImmediateComposite().refImmediateComposite().oclIsTypeOf(JSchemaMM!KeySchemaPair)) 		
			thisModule.keywords <- thisModule.keywords->union(Sequence{eAttribute});
	}
}

abstract rule createPropertiesContainmentAndMapDefaultAdditionalPropertiesEClass{
	from typeSchemaDefinition: JSchemaMM!TypeSchemaDefinition (typeSchemaDefinition.findSimpleType() = #"\"object\"")	
	to 
		eReference :Ecore!EReference ( 
			name <- 'properties',
			eType <- thisModule.createPropertiesEClass(typeSchemaDefinition.refImmediateComposite().buildEClassname().concat('Properties')),
--			eType <- thisModule.createPropertiesEClass(typeSchemaDefinition),
			containment <- true,
			lowerBound <- 0,
			upperBound <- -1
			
		)
}

rule createPropertiesContainment extends createPropertiesContainmentAndMapDefaultAdditionalPropertiesEClass{
	from typeSchemaDefinition: JSchemaMM!TypeSchemaDefinition (
		typeSchemaDefinition.findSimpleType() = #"\"object\"" 
		and	typeSchemaDefinition.refImmediateComposite().keywordDefinition->exists(keyword  | keyword.oclIsTypeOf(JSchemaMM!AdditionalPropertiesSchemaDefinition)) = true
		
	)	
	to 
		eReference :Ecore!EReference 

		do {
			thisModule.curlyBracesEReferences <- thisModule.curlyBracesEReferences->union(Sequence{eReference});
		}
}


abstract rule mapItemsSchemaToEClass{
	from typeSchemaDefinition: JSchemaMM!TypeSchemaDefinition (typeSchemaDefinition.findSimpleType() = #"\"array\"")
	to
		eClass:  Ecore!EClass (
			name <- typeSchemaDefinition.refImmediateComposite().buildEClassname().concat('Items')
		),
		eReference :Ecore!EReference ( 
--			name <- 'items',
			name <- typeSchemaDefinition.refImmediateComposite().getKey(),
			eType <- eClass,
			containment <- true,
			lowerBound <- 0,
			upperBound <- -1
			
		)
}

rule mapItemsObjectSchemaToEClass extends mapItemsSchemaToEClass{
	from typeSchemaDefinition: JSchemaMM!TypeSchemaDefinition (
		typeSchemaDefinition.findSimpleType() = #"\"array\""
		and (
			let itemsKeywordDefinitionSequence : Sequence(JSchemaMM!ItemsSchemaDefinition) = typeSchemaDefinition.refImmediateComposite().keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(JSchemaMM!ItemsSchemaDefinition)) in  
			not itemsKeywordDefinitionSequence.isEmpty() and itemsKeywordDefinitionSequence.first().itemsAnyOf1.oclIsTypeOf(JSchemaMM!ObjectSchema)
		)
	)	
	using {
		itemsKeywordDefinitionSequence : Sequence(JSchemaMM!KeywordDefinition) = typeSchemaDefinition.refImmediateComposite().keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(JSchemaMM!ItemsSchemaDefinition)).first().itemsAnyOf1.keywordDefinition;
	}
	to 
		eReference :Ecore!EReference,
		eClass:  Ecore!EClass (
--			eStructuralFeatures <- Sequence{typeSchemaDefinition.refImmediateComposite().keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(JSchemaMM!ItemsSchemaDefinition)).first().itemsAnyOf1.keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(JSchemaMM!TypeSchemaDefinition))}.flatten() 
			eStructuralFeatures <- 	Sequence{let refSchemaDefinitonSequence : Sequence(JSchemaMM!RefSchemaDefinition) = itemsKeywordDefinitionSequence->select(keywordDefinition | keywordDefinition.oclIsTypeOf(JSchemaMM!RefSchemaDefinition)) in 
										if not refSchemaDefinitonSequence.isEmpty() then refSchemaDefinitonSequence
										else itemsKeywordDefinitionSequence->select(keywordDefinition | keywordDefinition.oclIsTypeOf(JSchemaMM!TypeSchemaDefinition))
										endif	
									}.flatten() 
		)
	do {
		thisModule.bracketsEReferences <- thisModule.bracketsEReferences->union(Sequence{eReference});
	}
}



rule mapItemsBooleanSchemaOrDefaultToEClass extends mapItemsSchemaToEClass{
	from typeSchemaDefinition: JSchemaMM!TypeSchemaDefinition (
		typeSchemaDefinition.findSimpleType() = #"\"array\""
		and (
			let itemsKeywordDefinition : Sequence(JSchemaMM!ItemsSchemaDefinition) = typeSchemaDefinition.refImmediateComposite().keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(JSchemaMM!ItemsSchemaDefinition)) in  
			itemsKeywordDefinition.isEmpty() ---- true is the Default case
			or(itemsKeywordDefinition.first().itemsAnyOf1.oclIsTypeOf(JSchemaMM!BooleanSchema) and itemsKeywordDefinition.first().itemsAnyOf1.value=true )
		)	
	)	
	to 
		eReference :Ecore!EReference,
		eClass:  Ecore!EClass (
			eStructuralFeatures <- Sequence{itemsEReference}
		),
		itemsEReference:Ecore!EReference (
			name <- 'items',
			eType <- JSchemaMM!JsonSchema,
			containment <- true,
			lowerBound <- 1,
			upperBound <- 1
		)	
}


rule mapRefSchemaToEReference{
	from refSchemaDefinition: JSchemaMM!RefSchemaDefinition 
	using {
		referenceType : String = thisModule.retrieveRootSchema().findSchemaByJsonPointerFromRoot(refSchemaDefinition.ref)
									.keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(JSchemaMM!TypeSchemaDefinition))
								.first().findSimpleType();
	} to		
		eReference :Ecore!EReference ( 
			name <- refSchemaDefinition.refImmediateComposite().getKey(),
			eType <- thisModule.retrieveRootSchema().findSchemaByJsonPointerFromRoot(refSchemaDefinition.ref),
			containment <- true,
			lowerBound <- 1,
			upperBound <- 1			
		)
	do {
		if (referenceType = #"\"object\"" ) {
			thisModule.curlyBracesEReferences <- thisModule.curlyBracesEReferences->union(Sequence{eReference});
		} else if (referenceType = #"\"array\"" ) {
			thisModule.bracketsEReferences <- thisModule.bracketsEReferences->union(Sequence{eReference});
		} 
	}	
}

unique lazy rule createPropertiesEClass{
	from name:String
--	from typeSchemaDefinition: JSchemaMM!TypeSchemaDefinition
--	using {
--		name : String =  typeSchemaDefinition->debug('ddddddddddddddddddd').refImmediateComposite().buildEClassname().concat('Properties');
--	}
	to
		eClass : Ecore!EClass (
			name <- name.concat('Abstract'),
			abstract<- true
		)	
}

endpoint rule CompletEPackageAndJsonGrammar() {
	do {
		thisModule.packageRoot().eClassifiers <- thisModule.allEClass();	
		--Json Grammar
		thisModule.jsonGrammarRoot().detailedGrammar.keywords <- thisModule.keywords;		
		thisModule.jsonGrammarRoot().detailedGrammar.curlyBracesReferences <- thisModule.curlyBracesEReferences;
		thisModule.jsonGrammarRoot().detailedGrammar.bracketsReferences <- thisModule.bracketsEReferences;
		thisModule.jsonGrammarRoot().detailedGrammar.keyValue <- thisModule.keyValues;		
		thisModule.jsonGrammarRoot().detailedGrammar.curlyBracesEClass <- thisModule.curlyBracesEClass;
		thisModule.jsonGrammarRoot().detailedGrammar.bracketsEClass <- thisModule.bracketsEClass;
		
--		thisModule.repeatedEClassName();
	}
}

--helper def: eclassEObjects() : Sequence(Ecore!EClass) = Ecore!EClass.allInstancesFrom('ecoreM');
--
----helper def: repeatedEClassName() : Sequence(Ecore!EClass) = 
--helper def: repeatedEClassName() : Integer = 	
--	thisModule.eclassEObjects()->debug('eclass')->iterate(eClass ; cont: Integer = 0 |
--		if thisModule.eclassEObjects()->select(eClass2|eClass2.name=eClass.name).size()->debug('size')>1 then eClass.name  = eClass.name.concat(cont.toString())
--		else OclUndefined endif
--	)	;
--		let selection : Sequence(Ecore!EClass) = thisModule.eclassEObjects().select(sameNameEClass|sameNameEClass.name=eClass.name) in
--	   	if selection.size()>0 then  selection.iterate(repeatedEClass; )
-- 	)
--	thisModule.eclassEObjects().iterate(currentEClass; map: Map(String, Sequence(Ecore!EClass)) = Map{} |
--		if map.get(currentEClass.name)  = OclUndefined then map<-map.including(currentEClass.name, Sequence{currentEClass})
--		else map.get(currentEClass.name)<-includingAll (Sequence{currentEClass})
--		endif
--	).
--    thisModule.eclassEObjects()->collect(eClass | thisModule.eclassEObjects().mappedBy(eClass2|eClass=eClass2)
--    	.forAll(map | body)
--	body

	-- let repeated : Sequence(Ecore!EClass) = Sequence{}in

--	thisModule.eclassEObjects()->iterate(iterator; repeated : Sequence(Ecore!EClass) = Sequence{} |
--	if map.get(iterator) = OclUndefined then map<-map.including(iterator, 0)
--	else 

 




