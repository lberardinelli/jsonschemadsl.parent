library JsonSchema2EcoreUtils;


helper def: keywordDefinitionMap : Map (String, OclAny) =
	Map{
		('additionalItems',MM!AdditionalItemsSchemaDefinition), 
		('items',MM!ItemsSchemaDefinition),
		('additionalProperties',MM!AdditionalPropertiesSchemaDefinition),
		('contains',MM!ContainsSchemaDefinition),
		('definitions',MM!DefinitionsSchemaDefinition),
		('properties',MM!PropertiesSchemaDefinition),
		('patternProperties',MM!PatternPropertiesSchemaDefinition),
		('propertyNames',MM!PropertyNamesSchemaDefinition),
		('if',MM!IfSchemaDefinition),
		('then',MM!ThenSchemaDefinition),
		('else',MM!ElseSchemaDefinition),
		('allOf',MM!AllOfSchemaDefinition),
		('anyOf',MM!AnyOfSchemaDefinition),
		('oneOf',MM!OneOfSchemaDefinition),
		('not',MM!NotSchemaDefinition)
	};

--  the initial input will be JsonSchema.schema
--helper context OclAny def: findKeySchemaPairByJsonPointer(jsonPointer:Sequence(String)): MM!KeySchemaPair =
helper context OclAny def: findKeySchemaPairByJsonPointer(jsonPointer:Sequence(String)): OclAny =	
	if jsonPointer ->notEmpty() 
	then
		if jsonPointer.first() = '#' -- OclAny is MM!JsonSchema
			then
				self.schema.findKeySchemaPairByJsonPointer(thisModule.popFirst(jsonPointer))
			else
				if not thisModule.keywordDefinitionMap.get(jsonPointer.first()).oclIsUndefined()
					then --is schemadefinition and self is objectschema
						self.keywordDefinition
							->select(
								keywordDefinition | keywordDefinition.oclIsTypeOf(thisModule.keywordDefinitionMap.get(jsonPointer.first()))
							).first().findKeySchemaPairByJsonPointer(thisModule.popFirst(jsonPointer))
					else -- is key, we look for a KeySchema with that key
						self.keySchemaPairs->select(
							keySchemaPair | keySchemaPair.key=jsonPointer.first()
						).first().findKeySchemaPairByJsonPointer(thisModule.popFirst(jsonPointer))
				endif
		endif
	else
		self
	endif
;

helper  def: popFirst(jsonPointer:Sequence(String)): Sequence(String)=
	if jsonPointer.size() = 0
		then jsonPointer
		else
			if jsonPointer.size() = 1
				then Sequence{}
				else jsonPointer.subSequence(2, self.size())
			endif		
	endif;		
-----------------------------
helper context OclAny def: findPropertyName() : String=
	let parent : OclAny = self.refImmediateComposite()
	in 
		if parent.oclIsUndefined()
		then 'Root'
		else
			if parent.oclIsTypeOf(MM!KeySchemaPair)
			then parent.key
			else parent.findPropertyName()
			endif
		endif;




helper context MM!ObjectSchema def: calculateLowerBound(name:String) : Integer =
	let arrayLowerBound : Integer = self.calculateLowerBoundForArray()
	in
		let parentPropertiesSchemaDefinition :  MM!PropertiesSchemaDefinition =  self.findParentPropertiesSchemaDefinition()
		in
			if parentPropertiesSchemaDefinition.oclIsUndefined()
			then arrayLowerBound
			else
				let requiredSchemaDefinition :  MM!RequiredSchemaDefinition = parentPropertiesSchemaDefinition.findRequiredSchemaDefinition()
				in
					if requiredSchemaDefinition.oclIsUndefined()
					then arrayLowerBound
					else 
						if requiredSchemaDefinition.required.values.includes(name)
						then --1 
							if arrayLowerBound>1
							then arrayLowerBound
							else 1
							endif
						else arrayLowerBound
						endif
					endif
		endif;	

helper context MM!ObjectSchema def: calculateLowerBoundForArray() : Integer =
	let objectSchemaWithTypeArrayFromObjectSchemaInItems: OclAny = self.findObjectSchemaWithTypeArrayFromObjectSchemaInItems()
--	let objectSchemaWithTypeArrayFromTypeInItems: OclAny = self.findObjectSchemaWithTypeArrayFromTypeInItems()
	in 
		if objectSchemaWithTypeArrayFromObjectSchemaInItems.oclIsUndefined()
		then 0
		else
			let minItemsSchemaDefinition : MM!KeywordDefinition = 
				objectSchemaWithTypeArrayFromObjectSchemaInItems.keywordDefinition 
				-> select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!MinItemsSchemaDefinition))
			in 
				if minItemsSchemaDefinition.isEmpty() 
				then 0
				else minItemsSchemaDefinition.first().minItems.value
				endif
		endif;
			
helper context MM!ObjectSchema def: calculateUpperBound() : Integer =
	
	let objectSchemaWithTypeArrayFromObjectSchemaInItems: OclAny = self.findObjectSchemaWithTypeArrayFromObjectSchemaInItems()
	in
		if objectSchemaWithTypeArrayFromObjectSchemaInItems.oclIsUndefined()
		then 1
		else
			
			let maxItemsSchemaDefinition : MM!KeywordDefinition = 
				objectSchemaWithTypeArrayFromObjectSchemaInItems.keywordDefinition 
				-> select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!MaxItemsSchemaDefinition))
			in 
				if maxItemsSchemaDefinition.isEmpty() 
				then -1
				else maxItemsSchemaDefinition.first().maxItems.value
				endif 
				
		endif;			
		
			
			
			
helper context MM!PropertiesSchemaDefinition def: findRequiredSchemaDefinition() : MM!RequiredSchemaDefinition=
	self.refImmediateComposite().keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!RequiredSchemaDefinition)).first();

helper context OclAny def: findParentPropertiesSchemaDefinition() : MM!PropertiesSchemaDefinition =
	if self.oclIsTypeOf(MM!PropertiesSchemaDefinition)
	then self
	else 
		if not self.refImmediateComposite().oclIsUndefined()
		then self.refImmediateComposite().findParentPropertiesSchemaDefinition()
		else OclUndefined
		endif
	endif;	



helper context OclAny def: findObjectSchemaWithTypeArrayFromTypeInItems(): MM!ObjectSchema=
	let parentObjectSchema : OclAny = self.refImmediateComposite()
	in
		if parentObjectSchema.oclIsTypeOf(MM!ObjectSchema)
		then
			let itemsSchemaDefinition : OclAny = parentObjectSchema.refImmediateComposite()
			in 
				if itemsSchemaDefinition.oclIsTypeOf(MM!ItemsSchemaDefinition)
				then
					let parentParentObjectSchema : OclAny = itemsSchemaDefinition.refImmediateComposite()
					in
						if parentParentObjectSchema.oclIsTypeOf(MM!ObjectSchema)
						then
							if parentParentObjectSchema.hasType(#"\"array\"")
							then parentParentObjectSchema
							else OclUndefined
							endif
						else OclUndefined
						endif
				else OclUndefined
				endif
		else OclUndefined
		endif;



helper context OclAny def: findObjectSchemaWithTypeArrayFromObjectSchemaInItems(): MM!ObjectSchema=
--	let parentObjectSchema : OclAny = self.refImmediateComposite()
--	in
--		 
--			let itemsSchemaDefinition : OclAny = parentObjectSchema.refImmediateComposite()
			let itemsSchemaDefinition : OclAny = self.refImmediateComposite()
			in 
				if itemsSchemaDefinition.oclIsTypeOf(MM!ItemsSchemaDefinition)
				then
					let parentParentObjectSchema : OclAny = itemsSchemaDefinition.refImmediateComposite()
					in
						if parentParentObjectSchema.oclIsTypeOf(MM!ObjectSchema)
						then
							if parentParentObjectSchema.hasType(#"\"array\"")
							then parentParentObjectSchema
							else OclUndefined
							endif
						else OclUndefined
						endif
				else OclUndefined
				endif;
		 

-- TODO do we use this?
helper context OclAny def: findParentObjectSchema() : MM!ObjectSchema=
	let parent : OclAny = self.refImmediateComposite()
	in 
		if parent.oclIsUndefined() or parent.oclIsTypeOf(MM!ObjectSchema)
		then parent
		else
			parent.findParentObjectSchema()
		endif;
------------------------------


helper context String def : toCamelCase() : String=
	self.substring(1, 1).toUpperCase() + self.substring(2,self.size());

helper context MM!Schema def: isRootSchema() :Boolean =
	self.refImmediateComposite().oclIsTypeOf(MM!JsonSchema);
	
helper context MM!Schema def: isObjectSchema() : Boolean =
	self.oclIsTypeOf(MM!ObjectSchema);

helper context MM!KeySchemaPair def: isProperty():Boolean =
	self.refImmediateComposite().oclIsTypeOf(MM!PropertiesSchemaDefinition);

helper context MM!ObjectSchema def: hasType(type:String) : Boolean =
	self.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(MM!TypeSchemaDefinition))
		->select(keyword | not keyword.typeAnyOf1.oclIsUndefined())
		->exists(keyword | keyword.typeAnyOf1 = type);
--		->exists(keyword | keyword.typeAnyOf1 = #type);
--		->exists(keyword | keyword.typeAnyOf1 = #"\"object\"");


helper context MM!ObjectSchema def: hasRef() : Boolean =
	self.keywordDefinition->exists(keyword  | keyword.oclIsTypeOf(MM!RefSchemaDefinition));





helper context MM!ObjectSchema def: findInPropertiesKeySchemaPairsWithType(type:String) : Set(MM!KeySchemaPair)=
	self.keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!PropertiesSchemaDefinition))
	->collect(propertiesSchemaDefinition | propertiesSchemaDefinition.keySchemaPairs->select(keySchemaPair | keySchemaPair.value.hasType(type)))
;



helper context MM!ObjectSchema def: findInPropertiesObjectSchemaWithType(type:String) : Set(MM!TypeSchemaDefinition)=
	let inPropertiesSchemasWithType : Set(MM!ObjectSchema) = self.findInPropertiesSchemasWithType(type)
	in  
		if inPropertiesSchemasWithType.isEmpty() 
		then Set{}
		else
			
			inPropertiesSchemasWithType->iterate(iterator; keywordDefinitionSet: MM!KeywordDefinition = Set{} |
				keywordDefinitionSet.union(iterator.keywordDefinition)
			)
--		inPropertiesSchemasWithType
--			->collect(objectSchema | objectSchema->iterate(iterator; var_name: var_type = init_exp |
--	body
--)))
--			->collect(objectSchema | objectSchema.keywordDefinition.first())
--				->collect(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!TypeSchemaDefinition))
--		Set{}
		endif
;
 

helper context MM!ObjectSchema def : findInPropertiesSchemasWithType(type:String) : Set(MM!ObjectSchema)=
	let propertiesSchemaDefinition : MM!PropertiesSchemaDefinition=
		self.keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!PropertiesSchemaDefinition))
	in 
		if not propertiesSchemaDefinition.isEmpty() 
		then propertiesSchemaDefinition.first().getAllSchemasWithType(type)
		else Set{}
		endif;
--	self.keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!PropertiesSchemaDefinition))
--	->collect(propertiesSchemaDefinition | propertiesSchemaDefinition.getAllSchemasWithType(type));


helper context MM!PropertiesSchemaDefinition def:  getAllSchemasWithType(type:String): Set(MM!Schema)=
--	self.keySchemaPairs->select(keySchemaPair | keySchemaPair.value.hasType(type))->collect(keySchemaPair | keySchemaPair.value);
	let keySchemaPairsWithType :MM!KeySchemaPair = self.keySchemaPairs->debug()->select(keySchemaPair | keySchemaPair.value->debug().hasType(type))
	in 
		if not keySchemaPairsWithType->debug().isEmpty() 
		then 
--			keySchemaPairsWithType->debug()
			keySchemaPairsWithType -> collect(keySchemaPair | keySchemaPair.value)->flatten()->debug()->asSet()
--			Set{}
		else Set{}
		endif;


helper context MM1!EPackage def: findEClassByRef(ref:String) : MM1!EClass=
	self.eClassifiers->select(eClass | eClass.eAnnotations -> exists(eAnnotation | eAnnotation.source = ref)).first()
	;
--------------------KeywordDefinition
--
	
helper context	MM!ObjectSchema def : buildPointer():String=
	if self.isRootSchema() then '#'
	else
		if self.refImmediateComposite().oclIsTypeOf(MM!SchemaArray) then
			self.refImmediateComposite().buildPointer(self)
		else
			self.refImmediateComposite().buildPointer()
		endif	
	endif;
helper context MM!KeySchemaPair def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/'+self.key;
	
helper context MM!AdditionalItemsSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/additionalItems';	

helper context MM!ItemsSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/items';	

helper context MM!SchemaArray def:buildPointer(schema:MM!ObjectSchema):String=
	self.refImmediateComposite().buildPointer()+'/'+self.indexOf(schema).toString;	

helper context MM!AdditionalPropertiesSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/additionalProperties';	

helper context MM!ContainsSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/contains';

helper context MM!DefinitionsSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/definitions';

helper context MM!PropertiesSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/properties';

helper context MM!PatternPropertiesSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/patternProperties';

helper context MM!PropertyNamesSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/propertyNames';

helper context MM!IfSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/if';
	
helper context MM!ThenSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/then';	

helper context MM!ElseSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/else';

helper context MM!AllOfSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/allOf';

helper context MM!AnyOfSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/anyOf';

helper context MM!OneOfSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/oneOf';

helper context MM!NotSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/not';
--------------------------
helper context MM!ObjectSchema def: isTypeObject() : Boolean =
	self.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(MM!TypeSchemaDefinition))
		->select(keyword | not keyword.typeAnyOf1.oclIsUndefined())
		->exists(keyword | keyword.typeAnyOf1 = #"\"object\"");