library JsonSchema2EcoreUtils;


helper def: keywordDefinitionMap : Map (String, OclAny) = ------ TODO should it be OclType????
	Map{
		('additionalItems',MM!AdditionalItemsSchemaDefinition), 
		('items',MM!ItemsSchemaDefinition),
		('additionalProperties',MM!AdditionalPropertiesSchemaDefinition),
		('contains',MM!ContainsSchemaDefinition),
		('definitions',MM!DefinitionsSchemaDefinition),
		('properties',MM!PropertiesSchemaDefinition),
		('patternProperties',MM!PatternPropertiesSchemaDefinition),
		('propertyNames',MM!PropertyNamesSchemaDefinition),
		('if',MM!IfSchemaDefinition),
		('then',MM!ThenSchemaDefinition),
		('else',MM!ElseSchemaDefinition),
		('allOf',MM!AllOfSchemaDefinition),
		('anyOf',MM!AnyOfSchemaDefinition),
		('oneOf',MM!OneOfSchemaDefinition),
		('not',MM!NotSchemaDefinition)
	};

helper def : simpleTypeMapping : Map(String, MM1!EDatatype) =
	Map{
		(#"\"string\"", MM1!EString),
		(#"\"integer\"", MM1!EInt),
		(#"\"number\"", MM1!EDouble),
		(#"\"boolean\"", MM1!EBoolean)
	};

	


helper def: retrieveRootSchema() : MM!Schema=
	MM!JsonSchema.allInstancesFrom('IN').first().schema;

helper context MM!Schema def:findSchemaByJsonPointerFromRoot(jsonPointer:String):  MM!Schema=
	self.findSchemaByJsonPointer(jsonPointer.split('/'));



--  the initial input will be JsonSchema.schema
helper context OclAny def: findSchemaByJsonPointer(jsonPointer:Sequence(String)): OclAny =	
	if jsonPointer ->notEmpty() 
	then
		if jsonPointer.first() = '#' -- OclAny is MM!JsonSchema.schema
			then
				self.findSchemaByJsonPointer(thisModule.popFirst(jsonPointer))
			else
				let keywordDefinitionType : OclAny = thisModule.keywordDefinitionMap.get(jsonPointer.first())
				in
					if not keywordDefinitionType.oclIsUndefined()
					then --In the jsonPointer navigation we are on a keywordDefinition and self is an objectschema
						let foundKeywordDefinition : MM!KeywordDefinition = 
							self.keywordDefinition->select(
								keywordDefinition | keywordDefinition.oclIsTypeOf(keywordDefinitionType)
							)
						in 
							if foundKeywordDefinition.isEmpty()	
							then OclUndefined
							else
								foundKeywordDefinition.first().findSchemaByJsonPointer(thisModule.popFirst(jsonPointer))
							endif

					else -- In the jsonPointer navigation we are on a key , we look for a KeySchema with that key
						 ------ TODO (we could be on an array index, not supported yet)
						 ------ TODO it could also be a keyValue pair , not supported yet to hold definitions
						let foundKeySchemaPair : MM!KeySchemaPair =
							self.keySchemaPairs->select(keySchemaPair | keySchemaPair.key=jsonPointer.first())
						in 
							if foundKeySchemaPair.isEmpty()
							then OclUndefined	
							else
								foundKeySchemaPair.first().value.findSchemaByJsonPointer(thisModule.popFirst(jsonPointer))
							endif
						 
					endif
			endif
		else
		self
	endif
;

helper  def: popFirst(jsonPointer:Sequence(String)): Sequence(String)=
	if jsonPointer.size() = 0
		then jsonPointer
		else
			if jsonPointer.size() = 1
				then Sequence{}
				else jsonPointer.subSequence(2, jsonPointer.size())
			endif		
	endif;		

helper context OclAny def: findPropertyName() : String=
	let parent : OclAny = self.refImmediateComposite()
	in 
		if parent.oclIsUndefined()
		then 'Root'
		else
			if parent.oclIsTypeOf(MM!KeySchemaPair)
			then parent.key
			else parent.findPropertyName()
			endif
		endif;




--helper context MM!ObjectSchema def: calculateLowerBound(name:String) : Integer =
helper context MM!Schema def: calculateLowerBound(name:String) : Integer =
	let arrayLowerBound : Integer = self.calculateLowerBoundForArray()
	in
		let parentPropertiesSchemaDefinition :  MM!PropertiesSchemaDefinition =  self.findParentPropertiesSchemaDefinition()
		in
			if parentPropertiesSchemaDefinition.oclIsUndefined()
			then arrayLowerBound
			else
				let requiredSchemaDefinition :  MM!RequiredSchemaDefinition = parentPropertiesSchemaDefinition.findRequiredSchemaDefinition()
				in
					if requiredSchemaDefinition.oclIsUndefined()
					then arrayLowerBound
					else 
						if requiredSchemaDefinition.required.values.includes(name)
						then --1 
							if arrayLowerBound>1
							then arrayLowerBound
							else 1
							endif
						else arrayLowerBound
						endif
					endif
		endif;	

--helper context MM!ObjectSchema def: calculateLowerBoundForArray() : Integer =
helper context MM!Schema def: calculateLowerBoundForArray() : Integer =
	let objectSchemaWithTypeArrayFromObjectSchemaInItems: OclAny = self.findObjectSchemaWithTypeArrayFromObjectSchemaInItems()
	in 
		if objectSchemaWithTypeArrayFromObjectSchemaInItems.oclIsUndefined()
		then 0
		else
			let minItemsSchemaDefinition : MM!KeywordDefinition = 
				objectSchemaWithTypeArrayFromObjectSchemaInItems.keywordDefinition 
				-> select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!MinItemsSchemaDefinition))
			in 
				if minItemsSchemaDefinition.isEmpty() 
				then 0
				else minItemsSchemaDefinition.first().minItems.value
				endif
		endif;
			
helper context MM!Schema def: calculateUpperBound() : Integer =
	
	let objectSchemaWithTypeArrayFromObjectSchemaInItems: OclAny = self.findObjectSchemaWithTypeArrayFromObjectSchemaInItems()
	in
		if objectSchemaWithTypeArrayFromObjectSchemaInItems.oclIsUndefined()
		then 1
		else
			
			let maxItemsSchemaDefinition : MM!KeywordDefinition = 
				objectSchemaWithTypeArrayFromObjectSchemaInItems.keywordDefinition 
				-> select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!MaxItemsSchemaDefinition))
			in 
				if maxItemsSchemaDefinition.isEmpty() 
				then -1
				else maxItemsSchemaDefinition.first().maxItems.value
				endif 
				
		endif;			
		
			
			
			
helper context MM!PropertiesSchemaDefinition def: findRequiredSchemaDefinition() : MM!RequiredSchemaDefinition=
	self.refImmediateComposite().keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!RequiredSchemaDefinition)).first();

helper context OclAny def: findParentPropertiesSchemaDefinition() : MM!PropertiesSchemaDefinition =
	if self.oclIsTypeOf(MM!PropertiesSchemaDefinition)
	then self
	else 
		if not self.refImmediateComposite().oclIsUndefined()
		then self.refImmediateComposite().findParentPropertiesSchemaDefinition()
		else OclUndefined
		endif
	endif;	


----- TODO do we need this?
helper context OclAny def: findObjectSchemaWithTypeArrayFromTypeInItems(): MM!ObjectSchema=
	let parentObjectSchema : OclAny = self.refImmediateComposite()
	in
		if parentObjectSchema.oclIsTypeOf(MM!ObjectSchema)
		then
			let itemsSchemaDefinition : OclAny = parentObjectSchema.refImmediateComposite()
			in 
				if itemsSchemaDefinition.oclIsTypeOf(MM!ItemsSchemaDefinition)
				then
					let parentParentObjectSchema : OclAny = itemsSchemaDefinition.refImmediateComposite()
					in
						if parentParentObjectSchema.oclIsTypeOf(MM!ObjectSchema)
						then
							if parentParentObjectSchema.hasType(#"\"array\"")
							then parentParentObjectSchema
							else OclUndefined
							endif
						else OclUndefined
						endif
				else OclUndefined
				endif
		else OclUndefined
		endif;



helper context OclAny def: findObjectSchemaWithTypeArrayFromObjectSchemaInItems(): MM!ObjectSchema=
	let itemsSchemaDefinition : OclAny = self.refImmediateComposite()
	in 
		if itemsSchemaDefinition.oclIsTypeOf(MM!ItemsSchemaDefinition)
		then
			let parentParentObjectSchema : OclAny = itemsSchemaDefinition.refImmediateComposite()
			in
				if parentParentObjectSchema.oclIsTypeOf(MM!ObjectSchema)
				then
					if parentParentObjectSchema.hasType(#"\"array\"")
					then parentParentObjectSchema
					else OclUndefined
					endif
				else OclUndefined
				endif
		else OclUndefined
		endif;


---- TODO do we use this?
helper context OclAny def: findParentObjectSchema() : MM!ObjectSchema=
	let parent : OclAny = self.refImmediateComposite()
	in 
		if parent.oclIsUndefined() or parent.oclIsTypeOf(MM!ObjectSchema)
		then parent
		else
			parent.findParentObjectSchema()
		endif;
------------------------------


helper context String def : toCamelCase() : String=
	self.substring(1, 1).toUpperCase() + self.substring(2,self.size());

--helper context OclAny def: isRootSchema() :Boolean =
helper context MM!Schema def: isRootSchema() :Boolean =
	self.refImmediateComposite().oclIsTypeOf(MM!JsonSchema);
	
helper context MM!Schema def: isObjectSchema() : Boolean =
	self.oclIsTypeOf(MM!ObjectSchema);


helper context MM!KeySchemaPair def: isProperty():Boolean =
	self.refImmediateComposite().oclIsTypeOf(MM!PropertiesSchemaDefinition);

helper context MM!ObjectSchema def: isProperty():Boolean =
	let parent : OclAny = self.refImmediateComposite()
	in 
		if parent.oclIsTypeOf(MM!KeySchemaPair)
		then 
			parent.isProperty() -- it calls MM!KeySchemaPair def: isProperty()
		else
			false
		endif	;


helper context MM!ObjectSchema def: hasType(type:String) : Boolean =
	self.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(MM!TypeSchemaDefinition))
		->select(keyword | not keyword.typeAnyOf1.oclIsUndefined())
		->exists(keyword | keyword.typeAnyOf1 = type);




helper context MM!ObjectSchema def: findSimpleType() :String=
	let simpleType: String =
		self.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(MM!TypeSchemaDefinition))
			->select(keyword | not keyword.typeAnyOf1.oclIsUndefined())
			->collect(keyword | keyword.typeAnyOf1)
	in 
		if not simpleType.isEmpty()
		then simpleType.first()
		else OclUndefined
		endif;

helper context MM!ObjectSchema def: getEDataType() : MM1!EDatatype=
	let simpleType : String = self.findSimpleType()
	in
		if simpleType.oclIsUndefined()
		then OclUndefined
		else thisModule.simpleTypeMapping.get(simpleType)
		endif;


helper context MM!ObjectSchema def: hasArrayOfTypes() : Boolean =
	let typeSchemaDefinition : MM!KeywordDefinition = self.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(MM!TypeSchemaDefinition))
	in 
		if typeSchemaDefinition.isEmpty
		then false
		else
			not typeSchemaDefinition.first().typesAnyOf2.oclIsUndefined()
		endif;

helper context MM!ObjectSchema def: findArrayOfTypes() : MM!TypeSchemaDefinition=
	let typeSchemaDefinition : Set(MM!KeywordDefinition) = self.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(MM!TypeSchemaDefinition))
	in 
		if typeSchemaDefinition.isEmpty()
		then OclUndefined
		else
			if not typeSchemaDefinition.first().typesAnyOf2.oclIsUndefined()
			then typeSchemaDefinition.first()
			else OclUndefined
			endif
		endif;


helper context MM!ObjectSchema def : findInPropertiesSchemasArrayItemsSchemas() : Set(MM!ObjectSchema)=		
	let withTypeArraySchemas :Set(MM!ObjectSchema) = self.findInPropertiesSchemasWithType(#"\"array\"")
	in
		withTypeArraySchemas->collect( withTypeArraySchema | withTypeArraySchema.keywordDefinition
			->select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!ItemsSchemaDefinition))
			->select(keywordDefinition | keywordDefinition.itemsAnyOf1.oclIsTypeOf(MM!ObjectSchema))
			->collect(keywordDefinition | keywordDefinition.itemsAnyOf1).flatten()
			);

helper context MM!ObjectSchema def : findInPropertiesSchemasArrayItemsSchemasWithType(type:String) : Set(MM!ObjectSchema)=		
	let withTypeArraySchemas :Set(MM!ObjectSchema) = self.findInPropertiesSchemasWithType(#"\"array\"")
	in
		withTypeArraySchemas->collect( withTypeArraySchema | withTypeArraySchema.keywordDefinition
			->select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!ItemsSchemaDefinition))
			->select(keywordDefinition | keywordDefinition.itemsAnyOf1.oclIsTypeOf(MM!ObjectSchema))
			->collect(keywordDefinition | keywordDefinition.itemsAnyOf1).flatten()
			->select(itemsAnyOf1 | itemsAnyOf1.hasType(type))
			)->flatten();

	
helper context MM!ObjectSchema def : findInPropertiesSchemasWithType(type:String) : Set(MM!ObjectSchema)=
	self.keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!PropertiesSchemaDefinition))
	->collect(propertiesSchemaDefinition | propertiesSchemaDefinition.getAllSchemasWithType(type)).flatten();



helper context MM!PropertiesSchemaDefinition def:  getAllSchemasWithType(type:String): Set(MM!ObjectSchema)=
	self.keySchemaPairs
		->select(keySchemaPair | keySchemaPair.value.oclIsTypeOf(MM!ObjectSchema))
		->select(keySchemaPair | keySchemaPair.value.hasType(type))
		->collect(keySchemaPair | keySchemaPair.value);


helper 	context MM!ObjectSchema def : findInPropertiesSchemasArrayItemsSchemasWithRef(): Set(MM!ObjectSchema)=
	let withTypeArraySchemas :Set(MM!ObjectSchema) = self.findInPropertiesSchemasWithType(#"\"array\"")
	in
		withTypeArraySchemas->collect( withTypeArraySchema | withTypeArraySchema.keywordDefinition
			->select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!ItemsSchemaDefinition))
			->select(keywordDefinition | keywordDefinition.itemsAnyOf1.oclIsTypeOf(MM!ObjectSchema))
			->collect(keywordDefinition | keywordDefinition.itemsAnyOf1).flatten()
			->select(itemsAnyOf1 | itemsAnyOf1.hasRef())
			)->flatten();

	
helper context MM!ObjectSchema def : findInPropertiesSchemasWithRef() : Set(MM!ObjectSchema)=
	self.keywordDefinition
		->select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!PropertiesSchemaDefinition))
		->collect(propertiesSchemaDefinition | propertiesSchemaDefinition.keySchemaPairs
			->select(keySchemaPair | keySchemaPair.value.oclIsTypeOf(MM!ObjectSchema))
			->select(keySchemaPair | keySchemaPair.value.hasRef())->collect(keySchemaPair | keySchemaPair.value)			
		).flatten();
	
helper context MM!ObjectSchema def: hasRef() : Boolean =
	self.keywordDefinition->exists(keyword  | keyword.oclIsTypeOf(MM!RefSchemaDefinition));


helper context MM!ObjectSchema def: getRef():String =
	let refSchemaDefinition : MM!RefSchemaDefinition =
		self.keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!RefSchemaDefinition))
	in
		if not refSchemaDefinition.isEmpty()
		then
			refSchemaDefinition.first().ref
		else
			OclUndefined
		endif;



helper context MM!ObjectSchema def : findInPropertiesSchemasArrayItemsSchemasWithBooleanSchemaTrue(): Set(MM!BooleanSchema)=
	let withTypeArraySchemas :Set(MM!ObjectSchema) = self.findInPropertiesSchemasWithType(#"\"array\"")
	in
		withTypeArraySchemas->collect( withTypeArraySchema | withTypeArraySchema.keywordDefinition
			->select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!ItemsSchemaDefinition))
			->select(keywordDefinition | keywordDefinition.itemsAnyOf1.oclIsTypeOf(MM!BooleanSchema))
			->collect(keywordDefinition | keywordDefinition.itemsAnyOf1).flatten()
			->select(itemsAnyOf1 | itemsAnyOf1.value = true)
			)->flatten();
	
	
helper context MM!ObjectSchema def : findInPropertiesWithBooleanSchemaTrue() : Set(MM!BooleanSchema)=
	self.keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!PropertiesSchemaDefinition))
	->collect(propertiesSchemaDefinition | propertiesSchemaDefinition.keySchemaPairs
		->select(keySchemaPair | keySchemaPair.value.oclIsTypeOf(MM!BooleanSchema))
		->collect(keySchemaPair | keySchemaPair.value)	
		->select(booleanSchema | booleanSchema.value = true)
	).flatten();

--- TODO not very useful!
helper context MM!ObjectSchema def:findAdditionalPropertiesSchemaDefinition() : MM!AdditionalPropertiesSchemaDefinition =
	let additionalPropertiesSchemaDefinition : Set(MM!AdditionalPropertiesSchemaDefinition) = 
		self.keywordDefinition
			->select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!AdditionalPropertiesSchemaDefinition))
	in
		if additionalPropertiesSchemaDefinition.isEmpty()
		then OclUndefined
		else additionalPropertiesSchemaDefinition.first()
		endif;

helper context MM!ObjectSchema def:findAdditionalPropertiesSchemaDefinitionBooleanSchemaValue() :Set(Boolean) =
	let value : Set(Boolean) = 
		self.keywordDefinition
			->select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!AdditionalPropertiesSchemaDefinition))
			->collect(additionalPropertiesSchemaDefinition | additionalPropertiesSchemaDefinition.additionalProperties)
			->select(additionalProperties | additionalProperties.oclIsTypeOf(MM!BooleanSchema))
			->collect(additionalProperties | additionalProperties.value)
			->flatten()
	in
		if value.isEmpty()
		then Set{true}
		else value.subSequence(1,1)
--		then true
--		else value.first()
		endif;
	
--helper context MM!ObjectSchema def:findAdditionalPropertiesSchemaDefinition() : Set(MM!AdditionalPropertiesSchemaDefinition)
--	self.keywordDefinition
--			->select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!AdditionalPropertiesSchemaDefinition))



--------------------KeywordDefinition
helper context	MM!ObjectSchema def : buildPointer():String=
	if self.isRootSchema() then '#'
	else
		if self.refImmediateComposite().oclIsTypeOf(MM!SchemaArray) then
			self.refImmediateComposite().buildPointer(self)
		else
			self.refImmediateComposite().buildPointer()
		endif	
	endif;
helper context MM!KeySchemaPair def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/'+self.key;
	
helper context MM!AdditionalItemsSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/additionalItems';	

helper context MM!ItemsSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/items';	

helper context MM!SchemaArray def:buildPointer(schema:MM!ObjectSchema):String=
	self.refImmediateComposite().buildPointer()+'/'+self.indexOf(schema).toString;	

helper context MM!AdditionalPropertiesSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/additionalProperties';	

helper context MM!ContainsSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/contains';

helper context MM!DefinitionsSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/definitions';

helper context MM!PropertiesSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/properties';

helper context MM!PatternPropertiesSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/patternProperties';

helper context MM!PropertyNamesSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/propertyNames';

helper context MM!IfSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/if';
	
helper context MM!ThenSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/then';	

helper context MM!ElseSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/else';

helper context MM!AllOfSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/allOf';

helper context MM!AnyOfSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/anyOf';

helper context MM!OneOfSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/oneOf';

helper context MM!NotSchemaDefinition def:buildPointer():String=
	self.refImmediateComposite().buildPointer()+'/not';
