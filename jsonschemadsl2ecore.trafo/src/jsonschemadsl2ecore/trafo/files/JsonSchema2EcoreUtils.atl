library JsonSchema2EcoreUtils;

helper context String def : toCamelCase() : String=
	self.substring(1, 1).toUpperCase() + self.substring(2,self.size());
--	self.substring(0, 1).toUpperCase() + self.substring(1,5);
--	self.toUpperCase();

helper context MM!Schema def: isRootSchema() :Boolean =
	self.refImmediateComposite().oclIsTypeOf(MM!JsonSchema);
	
--helper context MM!KeySchemaPair def: isObjectSchemaWithType(type:String) : Boolean =
--	
--	if (self.value.oclIsTypeOf(MM!ObjectSchema)) then
----	if (self.value.oclIsKindOf(MM!ObjectSchema)) then
--		
--		self.value.hasType(type)
--	else
--		false
--	endif;

helper context MM!ObjectSchema def: hasType(type:String) : Boolean =
	self.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(MM!TypeSchemaDefinition))
		->select(keyword | not keyword.typeAnyOf1.oclIsUndefined())
		->exists(keyword | keyword.typeAnyOf1 = type);
--		->exists(keyword | keyword.typeAnyOf1 = #type);
--		->exists(keyword | keyword.typeAnyOf1 = #"\"object\"");


--helper context MM!Schema def: isObjectSchema() : Boolean =
--	self.oclIsTypeOf(MM!ObjectSchema);

helper context MM!ObjectSchema def: findInPropertiesKeySchemaPairsWithType(type:String) : Set(MM!KeySchemaPair)=
	self.keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!PropertiesSchemaDefinition))
	->collect(propertiesSchemaDefinition | propertiesSchemaDefinition.keySchemaPairs->select(keySchemaPair | keySchemaPair.value.hasType(type)))
;


 

helper context MM!ObjectSchema def : findInPropertiesSchemasWithType(type:String) : Set(MM!ObjectSchema)=
	self.keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(MM!PropertiesSchemaDefinition))
	->collect(propertiesSchemaDefinition | propertiesSchemaDefinition.getAllSchemasWithType(type));


helper context MM!PropertiesSchemaDefinition def:  getAllSchemasWithType(type:String): Set(MM!ObjectSchema)=
	self.keySchemaPairs->select(keySchemaPair | keySchemaPair.value.hasType(type))->collect(keySchemaPair | keySchemaPair.value);	

--------------------------
helper context MM!ObjectSchema def: isTypeObject() : Boolean =
	self.keywordDefinition->select(keyword  | keyword.oclIsTypeOf(MM!TypeSchemaDefinition))
		->select(keyword | not keyword.typeAnyOf1.oclIsUndefined())
		->exists(keyword | keyword.typeAnyOf1 = #"\"object\"");