-- @nsURI MM=http://at.jku.bise/jsonMetaschemaMM
-- @nsURI MM1=http://www.eclipse.org/emf/2002/Ecore

module JsonSchema2Ecore;
create OUT : MM1 from IN : MM;

uses JsonSchema2EcoreUtils;

helper def: rootEPackage : MM1!EPackage = OclUndefined;
--helper def: rootEClass : MM1!EClass= OclUndefined;

rule JsonSchemaToEPackage {
	from
--		jsonSchema : MM!JsonSchema, schema : MM!Schema (jsonSchema.schema=schema and schema.isObjectSchema() and schema.isTypeObject())
		jsonSchema : MM!JsonSchema
	to 
		ePackage : MM1!EPackage (
			name <- 'test1'			
		)
	do{
		thisModule.rootEPackage <- ePackage;
	}
}



rule ObjectSchemaWithTypeObjectToEClass {
	from
		objectSchema : MM!ObjectSchema(objectSchema.hasType(#"\"object\""))
	to
		eClass : MM1!EClass(
			name <- objectSchema.findPropertyName().toCamelCase(),
			eAnnotations <- eAnnotation,
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasWithType(#"\"string\""),
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasWithType(#"\"number\""),
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasWithType(#"\"integer\""),
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasWithType(#"\"boolean\""),
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasWithType(#"\"object\"")
										-> collect(nestedObject | thisModule.createNestedObjectEReference(nestedObject)),
			
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasWithRef()
										-> collect(schemaWithRef | 
											let foundReferredSchema : MM!Schema =
--													objectSchema.retrieveRootSchema().findSchemaByJsonPointerFromRoot(schemaWithRef.getRef())
													thisModule.retrieveRootSchema().findSchemaByJsonPointerFromRoot(schemaWithRef.getRef())
											in 
												if not foundReferredSchema.oclIsUndefined()
												then	thisModule.createReferenceEReference(foundReferredSchema,schemaWithRef)
												else 'No reference found for '+schemaWithRef.getRef()+''.println()
												endif
											),							
			
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasArrayItemsSchemasWithType(#"\"string\""),
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasArrayItemsSchemasWithType(#"\"number\""),
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasArrayItemsSchemasWithType(#"\"integer\""),
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasArrayItemsSchemasWithType(#"\"boolean\""),
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasArrayItemsSchemasWithType(#"\"object\"")
										-> collect(nestedObject | thisModule.createNestedObjectEReference(nestedObject)),
			
										
										
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasArrayItemsSchemasWithRef()
										-> collect(schemaWithRef |
--											let schema :String = schemaWithRef.getRef()->debug()
--											in
											let foundReferredSchema : MM!Schema =
--													objectSchema.retrieveRootSchema().findSchemaByJsonPointerFromRoot(schemaWithRef.getRef()->debug())
													thisModule.retrieveRootSchema().findSchemaByJsonPointerFromRoot(schemaWithRef.getRef())
											in 
												if not foundReferredSchema.oclIsUndefined()
--												then	thisModule.createNestedObjectEReference(foundReferredSchema,schemaWithRef.findPropertyName())
												then	thisModule.createReferenceEReference(foundReferredSchema,schemaWithRef)
												else 'No reference found for '+schemaWithRef.getRef()+''.println()
												endif
											)
										
			
			
		),
		eAnnotation : MM1!EAnnotation(
			source <-objectSchema.buildPointer()
		)
	do {
		thisModule.rootEPackage.eClassifiers <-eClass;
	}	
}

lazy rule createReferenceEReference{
	from 
		child : MM!ObjectSchema, parent : MM!ObjectSchema
	using {
		parentName : String =  parent.findPropertyName();
	}	
	to 
		eReference :MM1!EReference ( 
			name <- parentName,
			eType <- child,
			containment <- true,
			lowerBound <-parent.calculateLowerBound(parentName),
			upperBound <- parent.calculateUpperBound()
			
		) 	
}

lazy rule createNestedObjectEReference {
	from
		objectSchema : MM!ObjectSchema --, referenceName : String
	using {
		referenceName : String =  objectSchema.findPropertyName();
	}	
	to 
		eReference :MM1!EReference ( 
			name <- referenceName,
			eType <- objectSchema,
			containment <- true,
			lowerBound <-objectSchema.calculateLowerBound(referenceName),
			upperBound <- objectSchema.calculateUpperBound()
			
		)
}

rule ObjectSchemaWithTypeStringToEAttribute{
	from objectSchema : MM!ObjectSchema (
			objectSchema.hasType(#"\"string\"") or
			objectSchema.hasType(#"\"integer\"") or
			objectSchema.hasType(#"\"number\"") or
			objectSchema.hasType(#"\"boolean\"") 
	)
	using {
		attributeName : String =  objectSchema.findPropertyName();
	}
	to 
		eAttribute : MM1!EAttribute(
			name<-attributeName,
			lowerBound <-objectSchema.calculateLowerBound(attributeName),
			upperBound <- objectSchema.calculateUpperBound(),
			eType <- objectSchema.getEDataType()
		)
}




