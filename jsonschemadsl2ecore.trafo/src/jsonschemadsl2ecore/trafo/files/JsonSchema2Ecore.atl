-- @nsURI MM=http://at.jku.bise/jsonMetaschemaMM
-- @nsURI MM1=http://www.eclipse.org/emf/2002/Ecore

module JsonSchema2Ecore;
create OUT : MM1 from IN : MM;

uses JsonSchema2EcoreUtils;

helper def: rootEPackage : MM1!EPackage = OclUndefined;
--helper def: rootEClass : MM1!EClass= OclUndefined;

rule JsonSchemaToEPackage {
	from
		jsonSchema : MM!JsonSchema
	to 
		-------TODO read this info from file name
		ePackage : MM1!EPackage (
			name <- 'Shipyard',
			nsPrefix <- 'Shipyard',
			nsURI <- 'http://jku.bise.at/Shipyard'
		)
	do{
		thisModule.rootEPackage <- ePackage;
	}
}



rule ObjectSchemaWithTypeObjectToEClass {
	from
		objectSchema : MM!ObjectSchema(objectSchema.hasType(#"\"object\""))
	to
		eClass : MM1!EClass(
			name <- objectSchema.findPropertyName().toCamelCase(),
			eAnnotations <- eAnnotation,
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasWithType(#"\"string\""),
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasWithType(#"\"number\""),
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasWithType(#"\"integer\""),
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasWithType(#"\"boolean\""),
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasWithType(#"\"object\"")
										-> collect(nestedObject | thisModule.createNestedObjectEReference(nestedObject)),
			
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasWithRef()
										-> collect(schemaWithRef | 
											let foundReferredSchema : MM!Schema =
--													objectSchema.retrieveRootSchema().findSchemaByJsonPointerFromRoot(schemaWithRef.getRef())
													thisModule.retrieveRootSchema().findSchemaByJsonPointerFromRoot(schemaWithRef.getRef())
											in 
												if not foundReferredSchema.oclIsUndefined()
												then	thisModule.createReferenceEReference(foundReferredSchema,schemaWithRef)
--												else 'No reference found for '+schemaWithRef.getRef()+''.println()
												else Set{}
												endif
											),							
			
											
			eStructuralFeatures <- objectSchema.findInPropertiesWithBooleanSchemaTrue()
										->collect(booleanSchemaTrue | thisModule.BooleanSchemaTrueToEReference(booleanSchemaTrue)),
			
--			eStructuralFeatures <- thisModule.createReferenceTokeyValuePair(objectSchema.findAdditionalPropertiesSchemaDefinitionBooleanSchemaValue()->debug()),
			eStructuralFeatures <- objectSchema.findAdditionalPropertiesSchemaDefinitionBooleanSchemaValue()
										->collect(booleanValue | 
											if booleanValue
											then thisModule.createReferenceTokeyValuePair(booleanValue) 	
--											else 'additionalProperties = false'.println()
											else Set{}
											endif
										),
			
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasWithArrayOfTypes()
									-> collect(nestedObject | thisModule.createNestedObjectEReference(nestedObject)),
			
			
			-------------------Arrays-----------------------
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasArrayItemsSchemasWithType(#"\"string\""),
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasArrayItemsSchemasWithType(#"\"number\""),
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasArrayItemsSchemasWithType(#"\"integer\""),
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasArrayItemsSchemasWithType(#"\"boolean\""),
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasArrayItemsSchemasWithType(#"\"object\"")
										-> collect(nestedObject | thisModule.createNestedObjectEReference(nestedObject)),
			
										
										
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasArrayItemsSchemasWithRef()
										-> collect(schemaWithRef |
--											let schema :String = schemaWithRef.getRef()->debug()
--											in
											let foundReferredSchema : MM!Schema =
--													objectSchema.retrieveRootSchema().findSchemaByJsonPointerFromRoot(schemaWithRef.getRef()->debug())
													thisModule.retrieveRootSchema().findSchemaByJsonPointerFromRoot(schemaWithRef.getRef())
											in 
												if not foundReferredSchema.oclIsUndefined()
--												then	thisModule.createNestedObjectEReference(foundReferredSchema,schemaWithRef.findPropertyName())
												then	thisModule.createReferenceEReference(foundReferredSchema,schemaWithRef)
--												else 'No reference found for '+schemaWithRef.getRef()+''.println()
												else Set{}
												endif
											),
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasArrayItemsSchemasWithBooleanSchemaTrue()
										->collect(booleanSchemaTrue | thisModule.BooleanSchemaTrueToEReference(booleanSchemaTrue)),
			eStructuralFeatures <- objectSchema.findInPropertiesSchemasArrayItemsSchemasArrayOfTypes()
										-> collect(nestedObject | thisModule.createNestedObjectEReference(nestedObject))
										
			
			
		),
		eAnnotation : MM1!EAnnotation(
			source <-objectSchema.buildPointer()
		)
	do {
		thisModule.rootEPackage.eClassifiers <-eClass;
	}	
}

lazy rule createReferenceEReference{
	from 
		child : MM!ObjectSchema, parent : MM!ObjectSchema
	using {
		parentName : String =  parent.findPropertyName();
	}	
	to 
		eReference :MM1!EReference ( 
			name <- parentName,
			eType <- child,
			containment <- true,
			lowerBound <-parent.calculateLowerBound(parentName),
			upperBound <- parent.calculateUpperBound()
			
		) 	
}

lazy rule createNestedObjectEReference {
	from
		objectSchema : MM!ObjectSchema --, referenceName : String
	using {
		referenceName : String =  objectSchema.findPropertyName();
	}	
	to 
		eReference :MM1!EReference ( 
			name <- referenceName,
			eType <- objectSchema,
			containment <- true,
			lowerBound <-objectSchema.calculateLowerBound(referenceName),
			upperBound <- objectSchema.calculateUpperBound()
			
		)
}

rule ObjectSchemaWithTypePrimitiveToEAttribute{
	from objectSchema : MM!ObjectSchema (
			objectSchema.hasType(#"\"string\"") or
			objectSchema.hasType(#"\"integer\"") or
			objectSchema.hasType(#"\"number\"") or
			objectSchema.hasType(#"\"boolean\"") 
	)
	using {
		attributeName : String =  objectSchema.findPropertyName();
	}
	to 
		eAttribute : MM1!EAttribute(
			name<-attributeName,
			lowerBound <-objectSchema.calculateLowerBound(attributeName),
			upperBound <- objectSchema.calculateUpperBound(),
			eType <- objectSchema.getEDataType()
		)
}


--------------------------  Array Of Types ------
rule ObjectSchemaWithArrayOfTypes{
	from objectSchema : MM!ObjectSchema (
		not objectSchema.findArrayOfTypes().oclIsUndefined()
	)
	using {
		className : String =  objectSchema.findPropertyName().toCamelCase();
	}
	to
		arrayOfTypes  : MM1!EClass(
			name <- className+'ArrayOfTypes',
			abstract<- true
		)
	do{
		thisModule.rootEPackage.eClassifiers <- objectSchema.findArrayOfTypes().typesAnyOf2.items ->collect(item | thisModule.createConcreteTypesAnyOf2Class(item, objectSchema.findArrayOfTypes().typesAnyOf2));
		thisModule.rootEPackage.eClassifiers <-arrayOfTypes;
	}	
}



lazy rule createConcreteTypesAnyOf2Class{
	from simpleType:MM!SimpleTypes , typesAnyOf2: MM!TypesAnyOf2
	using {
		abstractParent : MM!ObjectSchema =  typesAnyOf2.refImmediateComposite().refImmediateComposite();
	}
	to 
		concreteClass: MM1!EClass (
			name <-  abstractParent.findPropertyName().toCamelCase()+simpleType.name.substring(2,simpleType.name.size()-1).toCamelCase(),
			eSuperTypes <-abstractParent,
			eStructuralFeatures <- valueEattribute
		),
		valueEattribute :  MM1!EAttribute(
			name<-'value',
			eType <- thisModule.simpleTypeMapping.get(simpleType),
			lowerBound <- 1,
			upperBound <- 1
		)	
}



lazy rule BooleanSchemaTrueToEReference {
	from booleanSchema : MM!BooleanSchema (booleanSchema.value = true)
	using {
		referenceName : String =  booleanSchema.findPropertyName();
	}
	to 
		eReference :MM1!EReference ( 
			name <- referenceName,
			eType <- thisModule.createJsonDocument(thisModule.rootEPackage),
--			eType <-  MM!JsonDocument, ------ TODO Antonio
			containment <- true,
			lowerBound <-booleanSchema.calculateLowerBound(referenceName),
			upperBound <- booleanSchema.calculateUpperBound()
			
		)
}



----------------------    rules for Json Document ---------------------------
unique lazy rule createJsonDocument{
--	from booleanSchema : MM!BooleanSchema (booleanSchema.value = true)
	from rootEPackage : MM1!EPackage
--	using {
--		JsonDocument : MM!JsonDocument.allInstancesFrom('IN').first();
--	}
	to
--		jsonDocument : MM!JsonDocument
		jsonDocument : MM1!EClass(
			name <- 'JsonDocument',
			eStructuralFeatures <-value
		),
		value :MM1!EReference ( 
			name<-'value',
			containment <- true,
			eType <- thisModule.createValue(thisModule.rootEPackage),
			lowerBound <- 1,
			upperBound <- 1
		)
	do {
		thisModule.rootEPackage.eClassifiers <-jsonDocument;
	}
		
}

unique lazy rule createValue{
	from rootEPackage : MM1!EPackage
	to
		value  : MM1!EClass(
			name <- 'Value',
			abstract<- true
		)
	do {
		thisModule.createConcreteValues(thisModule.rootEPackage);
		thisModule.rootEPackage.eClassifiers <- value;
	}	
}

unique lazy rule createConcreteValues{
	from rootEPackage : MM1!EPackage
	to 
		arrayValue :  MM1!EClass(
			name<-'ArrayValue',
			eSuperTypes <- thisModule.createValue(thisModule.rootEPackage),
			eStructuralFeatures <-arrayToValueReference
		),	
		arrayToValueReference :MM1!EReference ( 
			name<-'value',
			containment <- true,
			eType <- thisModule.createValue(thisModule.rootEPackage),
			lowerBound <- 0,
			upperBound <- -1
		),
		booleanValue :  MM1!EClass(
			name<-'BooleanValue',
			eSuperTypes <- thisModule.createValue(thisModule.rootEPackage),
			eStructuralFeatures <- booleanValueEattribute
		),
		booleanValueEattribute :  MM1!EAttribute(
			name<-'value',
			eType <-MM1!EBoolean,
			lowerBound <- 1,
			upperBound <- 1
		),
		integerValue :  MM1!EClass(
			name<-'IntegerValue',
			eSuperTypes <- thisModule.createValue(thisModule.rootEPackage),
			eStructuralFeatures <- integerValueEattribute
		),
		integerValueEattribute :  MM1!EAttribute(
			name<-'value',
			eType <-MM1!EInt,
			lowerBound <- 1,
			upperBound <- 1
		),
		nullValue : MM1!EClass(
			name<-'NullValue',
			eSuperTypes <- thisModule.createValue(thisModule.rootEPackage)
		),
		numberValue : MM1!EClass(
			name<-'NumberValue',
			eSuperTypes <- thisModule.createValue(thisModule.rootEPackage),
			eStructuralFeatures <- numberValueEattribute
		),
		numberValueEattribute :  MM1!EAttribute(
			name<-'value',
			eType <-MM1!EDouble,
			lowerBound <- 1,
			upperBound <- 1
		),
		
		stringValue : MM1!EClass(
			name<-'StringValue',
			eSuperTypes <- thisModule.createValue(thisModule.rootEPackage),
			eStructuralFeatures <- stringValueEattribute
		),
		stringValueEattribute :  MM1!EAttribute(
			name<-'value',
			eType <-MM1!EString,
			lowerBound <- 1,
			upperBound <- 1
		),
		objectValue : MM1!EClass(
			name<-'ObjectValue',
			eSuperTypes <- thisModule.createValue(thisModule.rootEPackage),
			eStructuralFeatures <- objectKeyValuePair
		),
		objectKeyValuePair : MM1!EReference ( 
			name<-'keyvaluepair',
			containment <- true,
			eType <- thisModule.createkeyValuePair(thisModule.rootEPackage),
			lowerBound <- 0,
			upperBound <- -1
		)
	do {
		thisModule.rootEPackage.eClassifiers <- arrayValue;
		thisModule.rootEPackage.eClassifiers <- booleanValue;
		thisModule.rootEPackage.eClassifiers <- integerValue;
		thisModule.rootEPackage.eClassifiers <- nullValue;
		thisModule.rootEPackage.eClassifiers <- numberValue;
		thisModule.rootEPackage.eClassifiers <- stringValue;
		thisModule.rootEPackage.eClassifiers <- objectValue;
	}	
		
		
}

unique lazy rule createkeyValuePair{
	from rootEPackage : MM1!EPackage
	to 
		keyValuePair :  MM1!EClass(
			name<-'KeyValuePair',
			eStructuralFeatures <- key,
			eStructuralFeatures <- value
		),
		key : MM1!EAttribute(
			name<-'key',
			eType <-MM1!EString,
			lowerBound <- 1,
			upperBound <- 1
		),
		value :MM1!EReference ( 
			name<-'value',
			containment <- true,
			eType <- thisModule.createValue(thisModule.rootEPackage),
			lowerBound <- 1,
			upperBound <- 1
		)
	do {
		thisModule.rootEPackage.eClassifiers <-keyValuePair;
	}		
}

lazy rule createReferenceTokeyValuePair{
--	from rootEPackage : MM1!EPackage
	from boolean :Boolean (boolean = true)
	to 
		reference :MM1!EReference ( 
			name<-'additionalProperties',
			containment <- true,
			eType <- thisModule.createkeyValuePair(thisModule.rootEPackage),
			lowerBound <- 0,
			upperBound <- -1
		)
}

