import 'http://at.jku.bise/jsonMetaschemaMM'

package jsonMetaschemaMM

 



context ocl::OclAny
def: findSchemaByJsonPointer (tokens : Sequence(String)): jsonMetaschemaMM::Schema =
	let keywordDefinitionMap : Map (String, OclAny) =  
		Map{
			('additionalItems',AdditionalItemsSchemaDefinition), 
			('items',ItemsSchemaDefinition),
			('additionalProperties',AdditionalPropertiesSchemaDefinition),
			('contains',ContainsSchemaDefinition),
			('definitions',DefinitionsSchemaDefinition),
			('properties',PropertiesSchemaDefinition),
			('patternProperties',PatternPropertiesSchemaDefinition),
			('dependencies', DependenciesSchemaDefinition),
			('propertyNames',PropertyNamesSchemaDefinition),
			('if',IfSchemaDefinition),
			('then',ThenSchemaDefinition),
			('else',ElseSchemaDefinition),
			('allOf',AllOfSchemaDefinition),
			('anyOf',AnyOfSchemaDefinition),
			('oneOf',OneOfSchemaDefinition),
			('not',NotSchemaDefinition)
		}
	in	
	if tokens->isEmpty() then self 
	else
		let token:String = tokens->first() in
		let keywordDefinitionType : OclAny = keywordDefinitionMap.at(token) in
		if not keywordDefinitionType.oclIsUndefined() then
			let kwds : Sequence(KeywordDefinition) = self.keywordDefinition->select(kwd | kwd.oclIsTypeOf(keywordDefinitionType)) in
			let foundKwd: KeywordDefinition = if kwd->isEmpty() then  OclUndefined else  kwds->first() endif in 
			if foundKwd.oclIsUndefined() then OclUndefined
			else
				foundKwd.findSchemaByJsonPointer(popFirst(tokens))
			endif	
		else 
			----- TODO In the jsonPointer navigation we are on a key , we look for a KeySchema with that key
			--SchemaObjectAdditionalProperties
			if self.oclIsTypeOf(jsonMetaschemaMM::ObjectSchema)
			then
				let tokenSchemaObjectAdditionalPropertiesSequence : Sequence(jsonMetaschemaMM::SchemaObjectAdditionalProperties) =
					self.keywordDefinition->select(kwd | kwd.oclIsTypeOf(jsonMetaschemaMM::SchemaObjectAdditionalProperties))->select(soap | soap.key=token)
				in 
				if 	tokenSchemaObjectAdditionalPropertiesSequence.isEmpty() then OclUndefined
				else 
				endif tokenSchemaObjectAdditionalPropertiesSequence->first().additionalProperties.findSchemaByJsonPointer(popFirst(tokens))
			else
				-- DefinitionsSchemaDefinition, PropertiesSchemaDefinition, PatternPropertiesSchemaDefinition
				if 
					self.oclIsTypeOf(jsonMetaschemaMM::DefinitionsSchemaDefinition) or  
					self.oclIsTypeOf(jsonMetaschemaMM::PropertiesSchemaDefinition) or
					self.oclIsTypeOf(jsonMetaschemaMM::PatternPropertiesSchemaDefinition) 
				then
					let foundKeySchemaPairs : JSchemaMM!KeySchemaPair =
							self.keySchemaPairs->select(keySchemaPair | keySchemaPair.key.stripFirstAndLast()=token)
					in 	
						if foundKeySchemaPairs.isEmpty()  then OclUndefined	
						else
							foundKeySchemaPairs.first().value.findSchemaByJsonPointer(thisModule.popFirst(tokens))
						endif	
				else
					-- SchemaArray, 
					if self.oclIsTypeOf(jsonMetaschemaMM::SchemaArray)
					-- token must be an integer
					then 
						if token.oclAsType(Integer) = OclInvalid then OclUndefined
						else
							self.at(token.oclAsType(Integer)).findSchemaByJsonPointer(thisModule.popFirst(tokens))
						endif
					else
						OclUndefined
					endif
				endif
				
			endif 
		endif
	endif
endif


endpackage

package ocl


context ocl::Sequence 
def: popFirst : Sequence(String)=
if self->size() = 0
	then self
	else
		if self->size() = 1
			then Sequence{}
			else self->subSequence(2, self->size())
		endif		
endif

endpackage

