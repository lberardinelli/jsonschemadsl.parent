import 'http://at.jku.bise/jsonMetaschemaMM'
import 'http://www.eclipse.org/emf/2002/Ecore'

package jsonMetaschemaMM

context ObjectSchema
--
-- example invariant with a custom error message to verify that
-- the 'keywordDefinition' property of all 'jsonMetaschemaMM::ObjectSchema' instances is non-null
--
inv NonNull_keywordDefinition('The \'keywordDefinition\' property of "' + self.toString() + '" is null'):
	keywordDefinition <> null
	

context ObjectSchema
def: keywordDefinitionMap : Map (String, OclAny) =  
	Map{
		('additionalItems',MM!AdditionalItemsSchemaDefinition), 
		('items',MM!ItemsSchemaDefinition),
		('additionalProperties',MM!AdditionalPropertiesSchemaDefinition),
		('contains',MM!ContainsSchemaDefinition),
		('definitions',MM!DefinitionsSchemaDefinition),
		('properties',MM!PropertiesSchemaDefinition),
		('patternProperties',MM!PatternPropertiesSchemaDefinition),
		('propertyNames',MM!PropertyNamesSchemaDefinition),
		('if',MM!IfSchemaDefinition),
		('then',MM!ThenSchemaDefinition),
		('else',MM!ElseSchemaDefinition),
		('allOf',MM!AllOfSchemaDefinition),
		('anyOf',MM!AnyOfSchemaDefinition),
		('oneOf',MM!OneOfSchemaDefinition),
		('not',MM!NotSchemaDefinition)
	}

context ObjectSchema
def: objectSchemaNextToken (tokens : Sequence(String)): Schema =
if tokens->size()= 0 then self 
else
	let token:String = tokens->first in
	let kwds : Sequence(KeywordDefinition) =
		if token= 'additionalItems' then   keywordDefinition->select(kwd | kwd.oclIsTypeOf(AdditionalItemsSchemaDefinition)) 
		else 
			if token = 'items' then   keywordDefinition->select(kwd | kwd.oclIsTypeOf(ItemsSchemaDefinition))  
			else
				if token = 'additionalProperties' then   keywordDefinition->select(kwd | kwd.oclIsTypeOf(AdditionalPropertiesSchemaDefinition))   
				else 
					if token = 'contains' then   keywordDefinition->select(kwd | kwd.oclIsTypeOf(ContainsSchemaDefinition))    
					else 
						if token = 'definitions' then   keywordDefinition->select(kwd | kwd.oclIsTypeOf(DefinitionsSchemaDefinition))   
						else
							if token = 'properties' then   keywordDefinition->select(kwd | kwd.oclIsTypeOf(PropertiesSchemaDefinition))  
							else		
								if token = 'patternProperties' then   keywordDefinition->select(kwd | kwd.oclIsTypeOf(PatternPropertiesSchemaDefinition))  
								else 
									if token = 'propertyNames' then   keywordDefinition->select(kwd | kwd.oclIsTypeOf(PropertyNamesSchemaDefinition))  
									else 
										if token = 'if' then   keywordDefinition->select(kwd | kwd.oclIsTypeOf(IfSchemaDefinition))    
										else
											if token = 'then' then   keywordDefinition->select(kwd | kwd.oclIsTypeOf(ThenSchemaDefinition))   
											else
												if token = 'else' then   keywordDefinition->select(kwd | kwd.oclIsTypeOf(ElseSchemaDefinition))    
												else
													if token = 'allOf' then   keywordDefinition->select(kwd | kwd.oclIsTypeOf(AllOfSchemaDefinition))   
													else
														if token = 'anyOf' then   keywordDefinition->select(kwd | kwd.oclIsTypeOf(AnyOfSchemaDefinition))    
														else
															if token = 'oneOf' then   keywordDefinition->select(kwd | kwd.oclIsTypeOf(OneOfSchemaDefinition))  
															else
																if token = 'not' then   keywordDefinition->select(kwd | kwd.oclIsTypeOf(NotSchemaDefinition))  
																else keywordDefinition->select(kwd | kwd.oclIsTypeOf(SchemaObjectAdditionalProperties))  
																endif	
															endif
														endif
													endif
												endif	
											endif
										endif
									endif
								endif
							endif
						endif
					endif
				endif
			endif
		endif 

	in 
	let foundKwd: KeywordDefinition = if kwds->size()=0 then  null else  kwds->first() endif 
	in 
	if foundKwd.oclIsTypeOf(AdditionalItemsSchemaDefinition) then  foundKwd.additionalItems.objectSchemaNextToken(tokens.popFirst)
	else 
		if foundKwd.oclIsTypeOf(ItemsSchemaDefinition) then  let anyOf:SchemaObjectItemsAnyOf = foundKwd.anyOf in if anyOf.oclIsTypeOf(SchemaObjectItemsAnyOf1) then anyOf.anyOf1 else anyOf.anyOf2 endif
		else
			if foundKwd.oclIsTypeOf(AdditionalPropertiesSchemaDefinition) then  foundKwd.additionalProperties
			else 
				if foundKwd.oclIsTypeOf(ContainsSchemaDefinition) then  foundKwd.contains 
				else --DefinitionsSchemaDefinition
					if foundKwd.oclIsTypeOf(DefinitionsSchemaDefinition) then  let ksps : Sequence(Schema) = keySchemaPairs->select(ksp|ksp.key = token) in
																if ksps->size()=0 then null else ksps->first() endif
					else
					endif
				endif
			endif 
		endif	
	endif
endif


context ItemsSchemaDefinition
def: itemsSchemaDefinitionNextToken(tokens : Sequence(String)): Schema =
if tokens->size()= 0 then self
	let token:String = tokens->first() in
	let intToken:Integer = token.oclAsType(Integer) in
	if intToken.oclIsInvalid() or intToken <1 or intToken >tokens->size() then null else tokens.at(intToken)
else
endif


--context PropertiesSchemaDefinition
--def: propertiesSchemaDefinitionNextToken(token : String):Schema =
--let ksps : Sequence(Schema) = keySchemaPairs->select(ksp|ksp.key = token) in
--if ksps->size()=0 then null else ksps->first() endif


endpackage

package ocl

context Sequence
def: popFirst : Sequence(String)=
if self->size() = 0
	then self
	else
		if size() = 1
			then Sequence{}
			else subSequence(2, size())
		endif		
endif

endpackage
