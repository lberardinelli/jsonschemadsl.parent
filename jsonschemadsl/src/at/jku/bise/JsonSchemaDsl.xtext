// automatically generated by Xtext
grammar at.jku.bise.JsonSchemaDsl with org.eclipse.xtext.common.Terminals

import "http://at.jku.bise/jsonMetaschemaMM" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

JsonSchema returns JsonSchema:
	{JsonSchema}
	'JsonSchema'
	'{'
		('schema' schema=Schema)?
	'}';

Schema returns Schema:
	ObjectSchema | BooleanSchema;

KeywordDefinition returns KeywordDefinition:
	MaximumSchemaDefinition | WriteOnlySchemaDefinition | CommentSchemaDefinition | EnumSchemaDefinition | UniqueItemsSchemaDefinition | AnyOfSchemaDefinition | TitleSchemaDefinition | ItemsSchemaDefinition | DefaultSchemaDefinition | ThenSchemaDefinition | MinLengthSchemaDefinition | DefinitionsSchemaDefinition | MinItemsSchemaDefinition | OneOfSchemaDefinition | MaxPropertiesSchemaDefinition | MinimumSchemaDefinition | MaxItemsSchemaDefinition | FormatSchemaDefinition | ReadOnlySchemaDefinition | TypeSchemaDefinition | AdditionalPropertiesSchemaDefinition | ElseSchemaDefinition | IdSchemaDefinition | ConstSchemaDefinition | DependenciesSchemaDefinition | RequiredSchemaDefinition | DescriptionSchemaDefinition | MinPropertiesSchemaDefinition | PatternPropertiesSchemaDefinition | AdditionalItemsSchemaDefinition | KeyValuePair | ExamplesSchemaDefinition | IfSchemaDefinition | AllOfSchemaDefinition | ContentEncodingSchemaDefinition | MultipleOfSchemaDefinition | PatternSchemaDefinition | ContainsSchemaDefinition | NotSchemaDefinition | ExclusiveMaximumSchemaDefinition | MaxLengthSchemaDefinition | RefSchemaDefinition | ContentMediaTypeSchemaDefinition | ExclusiveMinimumSchemaDefinition | SchemaSchemaDefinition | PropertiesSchemaDefinition | PropertyNamesSchemaDefinition;









Value returns Value:
	IntegerValue | BooleanValue | NullValue | StringValue | ObjectValue | NumberValue | ArrayValue;



ObjectSchema returns ObjectSchema:
	{ObjectSchema}
	'ObjectSchema'
	'{'
		('keywordDefinition' '{' keywordDefinition+=KeywordDefinition ( "," keywordDefinition+=KeywordDefinition)* '}' )?
	'}';

BooleanSchema returns BooleanSchema:
	value?='value'
	'BooleanSchema'
	;

MaximumSchemaDefinition returns MaximumSchemaDefinition:
	'MaximumSchemaDefinition'
	'{'
		'maximum' maximum=EDouble
	'}';

WriteOnlySchemaDefinition returns WriteOnlySchemaDefinition:
	writeOnly?='writeOnly'
	'WriteOnlySchemaDefinition'
	;

CommentSchemaDefinition returns CommentSchemaDefinition:
	'CommentSchemaDefinition'
	'{'
		'comment' comment=EString
	'}';

EnumSchemaDefinition returns EnumSchemaDefinition:
	'EnumSchemaDefinition'
	'{'
		'items' '{' items+=JsonDocument ( "," items+=JsonDocument)* '}' 
	'}';

UniqueItemsSchemaDefinition returns UniqueItemsSchemaDefinition:
	uniqueItems?='uniqueItems'
	'UniqueItemsSchemaDefinition'
	;

AnyOfSchemaDefinition returns AnyOfSchemaDefinition:
	'AnyOfSchemaDefinition'
	'{'
		'anyOf' anyOf=SchemaArray
	'}';

TitleSchemaDefinition returns TitleSchemaDefinition:
	'TitleSchemaDefinition'
	'{'
		'title' title=EString
	'}';

ItemsSchemaDefinition returns ItemsSchemaDefinition:
	{ItemsSchemaDefinition}
	'ItemsSchemaDefinition'
	'{'
		('itemsAnyOf1' itemsAnyOf1=Schema)?
		('itemsAnyOf2' itemsAnyOf2=SchemaArray)?
	'}';

DefaultSchemaDefinition returns DefaultSchemaDefinition:
	{DefaultSchemaDefinition}
	'DefaultSchemaDefinition'
	'{'
		('default' default=JsonDocument)?
	'}';

ThenSchemaDefinition returns ThenSchemaDefinition:
	'ThenSchemaDefinition'
	'{'
		'then' then=Schema
	'}';

MinLengthSchemaDefinition returns MinLengthSchemaDefinition:
	'MinLengthSchemaDefinition'
	'{'
		'minLength' minLength=NonNegativeIntegerDefault0
	'}';

DefinitionsSchemaDefinition returns DefinitionsSchemaDefinition:
	{DefinitionsSchemaDefinition}
	'DefinitionsSchemaDefinition'
	'{'
		('keySchemaPairs' '{' keySchemaPairs+=KeySchemaPair ( "," keySchemaPairs+=KeySchemaPair)* '}' )?
	'}';

MinItemsSchemaDefinition returns MinItemsSchemaDefinition:
	'MinItemsSchemaDefinition'
	'{'
		'minItems' minItems=NonNegativeIntegerDefault0
	'}';

OneOfSchemaDefinition returns OneOfSchemaDefinition:
	'OneOfSchemaDefinition'
	'{'
		'oneOf' oneOf=SchemaArray
	'}';

MaxPropertiesSchemaDefinition returns MaxPropertiesSchemaDefinition:
	'MaxPropertiesSchemaDefinition'
	'{'
		'maxProperties' maxProperties=NonNegativeInteger
	'}';

MinimumSchemaDefinition returns MinimumSchemaDefinition:
	'MinimumSchemaDefinition'
	'{'
		'minimum' minimum=EDouble
	'}';

MaxItemsSchemaDefinition returns MaxItemsSchemaDefinition:
	'MaxItemsSchemaDefinition'
	'{'
		'maxItems' maxItems=NonNegativeInteger
	'}';

FormatSchemaDefinition returns FormatSchemaDefinition:
	'FormatSchemaDefinition'
	'{'
		'format' format=EString
	'}';

ReadOnlySchemaDefinition returns ReadOnlySchemaDefinition:
	readOnly?='readOnly'
	'ReadOnlySchemaDefinition'
	;

TypeSchemaDefinition returns TypeSchemaDefinition:
	{TypeSchemaDefinition}
	'TypeSchemaDefinition'
	'{'
		('typeAnyOf1' typeAnyOf1=SimpleTypes)?
		('typesAnyOf2' typesAnyOf2=TypesAnyOf2)?
	'}';

AdditionalPropertiesSchemaDefinition returns AdditionalPropertiesSchemaDefinition:
	'AdditionalPropertiesSchemaDefinition'
	'{'
		'additionalProperties' additionalProperties=Schema
	'}';

ElseSchemaDefinition returns ElseSchemaDefinition:
	'ElseSchemaDefinition'
	'{'
		'else' else=Schema
	'}';

IdSchemaDefinition returns IdSchemaDefinition:
	'IdSchemaDefinition'
	'{'
		'id' id=EString
	'}';

ConstSchemaDefinition returns ConstSchemaDefinition:
	{ConstSchemaDefinition}
	'ConstSchemaDefinition'
	'{'
		('const' const=JsonDocument)?
	'}';

DependenciesSchemaDefinition returns DependenciesSchemaDefinition:
	{DependenciesSchemaDefinition}
	'DependenciesSchemaDefinition'
	'{'
		('dependencies' '{' dependencies+=DependenciesAnyOf ( "," dependencies+=DependenciesAnyOf)* '}' )?
	'}';

RequiredSchemaDefinition returns RequiredSchemaDefinition:
	'RequiredSchemaDefinition'
	'{'
		'required' required=StringArray
	'}';

DescriptionSchemaDefinition returns DescriptionSchemaDefinition:
	'DescriptionSchemaDefinition'
	'{'
		'description' description=EString
	'}';

MinPropertiesSchemaDefinition returns MinPropertiesSchemaDefinition:
	'MinPropertiesSchemaDefinition'
	'{'
		'minProperties' minProperties=NonNegativeIntegerDefault0
	'}';

PatternPropertiesSchemaDefinition returns PatternPropertiesSchemaDefinition:
	{PatternPropertiesSchemaDefinition}
	'PatternPropertiesSchemaDefinition'
	'{'
		('keySchemaPairs' '{' keySchemaPairs+=KeySchemaPair ( "," keySchemaPairs+=KeySchemaPair)* '}' )?
	'}';

AdditionalItemsSchemaDefinition returns AdditionalItemsSchemaDefinition:
	'AdditionalItemsSchemaDefinition'
	'{'
		'additionalItems' additionalItems=Schema
	'}';

KeyValuePair returns KeyValuePair:
	{KeyValuePair}
	'KeyValuePair'
	'{'
		('key' key=EString)?
		('value' value=Value)?
	'}';

ExamplesSchemaDefinition returns ExamplesSchemaDefinition:
	{ExamplesSchemaDefinition}
	'ExamplesSchemaDefinition'
	'{'
		('examples' '{' examples+=JsonDocument ( "," examples+=JsonDocument)* '}' )?
	'}';

IfSchemaDefinition returns IfSchemaDefinition:
	'IfSchemaDefinition'
	'{'
		'if' if=Schema
	'}';

AllOfSchemaDefinition returns AllOfSchemaDefinition:
	'AllOfSchemaDefinition'
	'{'
		'allOf' allOf=SchemaArray
	'}';

ContentEncodingSchemaDefinition returns ContentEncodingSchemaDefinition:
	'ContentEncodingSchemaDefinition'
	'{'
		'contentEncoding' contentEncoding=EString
	'}';

MultipleOfSchemaDefinition returns MultipleOfSchemaDefinition:
	'MultipleOfSchemaDefinition'
	'{'
		'multipleOf' multipleOf=EDouble
	'}';

PatternSchemaDefinition returns PatternSchemaDefinition:
	'PatternSchemaDefinition'
	'{'
		'pattern' pattern=EString
	'}';

ContainsSchemaDefinition returns ContainsSchemaDefinition:
	'ContainsSchemaDefinition'
	'{'
		'contains' contains=Schema
	'}';

NotSchemaDefinition returns NotSchemaDefinition:
	'NotSchemaDefinition'
	'{'
		'not' not=Schema
	'}';

ExclusiveMaximumSchemaDefinition returns ExclusiveMaximumSchemaDefinition:
	'ExclusiveMaximumSchemaDefinition'
	'{'
		'exclusiveMaximum' exclusiveMaximum=EDouble
	'}';

MaxLengthSchemaDefinition returns MaxLengthSchemaDefinition:
	'MaxLengthSchemaDefinition'
	'{'
		'maxLength' maxLength=NonNegativeInteger
	'}';

RefSchemaDefinition returns RefSchemaDefinition:
	'RefSchemaDefinition'
	'{'
		'ref' ref=EString
	'}';

ContentMediaTypeSchemaDefinition returns ContentMediaTypeSchemaDefinition:
	'ContentMediaTypeSchemaDefinition'
	'{'
		'contentMediaType' contentMediaType=EString
	'}';

ExclusiveMinimumSchemaDefinition returns ExclusiveMinimumSchemaDefinition:
	'ExclusiveMinimumSchemaDefinition'
	'{'
		'exclusiveMinimum' exclusiveMinimum=EDouble
	'}';

SchemaSchemaDefinition returns SchemaSchemaDefinition:
	'SchemaSchemaDefinition'
	'{'
		'schema' schema=EString
	'}';

PropertiesSchemaDefinition returns PropertiesSchemaDefinition:
	{PropertiesSchemaDefinition}
	'PropertiesSchemaDefinition'
	'{'
		('keySchemaPairs' '{' keySchemaPairs+=KeySchemaPair ( "," keySchemaPairs+=KeySchemaPair)* '}' )?
	'}';

PropertyNamesSchemaDefinition returns PropertyNamesSchemaDefinition:
	'PropertyNamesSchemaDefinition'
	'{'
		'propertyNames' propertyNames=Schema
	'}';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EString returns ecore::EString:
	STRING | ID;

JsonDocument returns JsonDocument:
	{JsonDocument}
	'JsonDocument'
	'{'
		('value' value=Value)?
	'}';

IntegerValue returns IntegerValue:
	'IntegerValue'
	'{'
		'value' value=EInt
	'}';

BooleanValue returns BooleanValue:
	value?='value'
	'BooleanValue'
	;

NullValue returns NullValue:
	{NullValue}
	'NullValue'
	;

StringValue returns StringValue:
	'StringValue'
	'{'
		'value' value=EString
	'}';

ObjectValue returns ObjectValue:
	{ObjectValue}
	'ObjectValue'
	'{'
		('keyvaluepair' '{' keyvaluepair+=KeyValuePair ( "," keyvaluepair+=KeyValuePair)* '}' )?
	'}';

NumberValue returns NumberValue:
	'NumberValue'
	'{'
		'value' value=EDouble
	'}';

ArrayValue returns ArrayValue:
	{ArrayValue}
	'ArrayValue'
	'{'
		('value' '{' value+=Value ( "," value+=Value)* '}' )?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

SchemaArray returns SchemaArray:
	'SchemaArray'
	'{'
		'items' '{' items+=Schema ( "," items+=Schema)* '}' 
	'}';

NonNegativeIntegerDefault0 returns NonNegativeIntegerDefault0:
	'NonNegativeIntegerDefault0'
	'{'
		'value' value=EInt
	'}';

KeySchemaPair returns KeySchemaPair:
	'KeySchemaPair'
	'{'
		'key' key=EString
		'value' value=Schema
	'}';

NonNegativeInteger returns NonNegativeInteger:
	'NonNegativeInteger'
	'{'
		'value' value=EInt
	'}';

enum SimpleTypes returns SimpleTypes:
				array = 'array' | boolean = 'boolean' | integer = 'integer' | null = 'null' | number = 'number' | object = 'object' | string = 'string';

TypesAnyOf2 returns TypesAnyOf2:
	'TypesAnyOf2'
	'{'
		'items' '{' items+=SimpleTypes ( "," items+=SimpleTypes)* '}' 
	'}';

DependenciesAnyOf returns DependenciesAnyOf:
	{DependenciesAnyOf}
	'DependenciesAnyOf'
	'{'
		('dependenciesAnyOf2' dependenciesAnyOf2=KeyStringArrayPair)?
		('dependenciesAnyOf1' dependenciesAnyOf1=KeySchemaPair)?
	'}';

KeyStringArrayPair returns KeyStringArrayPair:
	'KeyStringArrayPair'
	'{'
		'key' key=EString
		'value' value=StringArray
	'}';

StringArray returns StringArray:
	{StringArray}
	'StringArray'
	'{'
		('values' '{' values+=EString ( "," values+=EString)* '}' )?
	'}';
