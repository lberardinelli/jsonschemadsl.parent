/*
 * generated by Xtext 2.23.0
 */
package at.jku.bise.serializer;

import at.jku.bise.services.JsonSchemaDslGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import jsonMetaschemaMM.jsonMetaschemaMM.AdditionalItemsSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.AdditionalPropertiesSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.AllOfSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.AnyOfSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.ArrayValue;
import jsonMetaschemaMM.jsonMetaschemaMM.BooleanSchema;
import jsonMetaschemaMM.jsonMetaschemaMM.BooleanValue;
import jsonMetaschemaMM.jsonMetaschemaMM.CommentSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.ConstSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.ContainsSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.ContentEncodingSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.ContentMediaTypeSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.DefaultSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.DefinitionsSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.DependenciesAnyOf;
import jsonMetaschemaMM.jsonMetaschemaMM.DependenciesSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.DescriptionSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.ElseSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.EnumSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.ExamplesSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.ExclusiveMaximumSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.ExclusiveMinimumSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.FormatSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.IdSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.IfSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.IntegerValue;
import jsonMetaschemaMM.jsonMetaschemaMM.ItemsSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.JsonDocument;
import jsonMetaschemaMM.jsonMetaschemaMM.JsonMetaschemaMMPackage;
import jsonMetaschemaMM.jsonMetaschemaMM.JsonSchema;
import jsonMetaschemaMM.jsonMetaschemaMM.KeySchemaPair;
import jsonMetaschemaMM.jsonMetaschemaMM.KeyStringArrayPair;
import jsonMetaschemaMM.jsonMetaschemaMM.KeyValuePair;
import jsonMetaschemaMM.jsonMetaschemaMM.MaxItemsSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.MaxLengthSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.MaxPropertiesSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.MaximumSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.MinItemsSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.MinLengthSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.MinPropertiesSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.MinimumSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.MultipleOfSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.NonNegativeInteger;
import jsonMetaschemaMM.jsonMetaschemaMM.NonNegativeIntegerDefault0;
import jsonMetaschemaMM.jsonMetaschemaMM.NotSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.NullValue;
import jsonMetaschemaMM.jsonMetaschemaMM.NumberValue;
import jsonMetaschemaMM.jsonMetaschemaMM.ObjectSchema;
import jsonMetaschemaMM.jsonMetaschemaMM.ObjectValue;
import jsonMetaschemaMM.jsonMetaschemaMM.OneOfSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.PatternPropertiesSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.PatternSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.PropertiesSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.PropertyNamesSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.ReadOnlySchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.RefSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.RequiredSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.SchemaArray;
import jsonMetaschemaMM.jsonMetaschemaMM.SchemaSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.StringArray;
import jsonMetaschemaMM.jsonMetaschemaMM.StringValue;
import jsonMetaschemaMM.jsonMetaschemaMM.ThenSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.TitleSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.TypeSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.TypesAnyOf2;
import jsonMetaschemaMM.jsonMetaschemaMM.UniqueItemsSchemaDefinition;
import jsonMetaschemaMM.jsonMetaschemaMM.WriteOnlySchemaDefinition;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class JsonSchemaDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private JsonSchemaDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JsonMetaschemaMMPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonMetaschemaMMPackage.ADDITIONAL_ITEMS_SCHEMA_DEFINITION:
				sequence_AdditionalItemsSchemaDefinition(context, (AdditionalItemsSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.ADDITIONAL_PROPERTIES_SCHEMA_DEFINITION:
				sequence_AdditionalPropertiesSchemaDefinition(context, (AdditionalPropertiesSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.ALL_OF_SCHEMA_DEFINITION:
				sequence_AllOfSchemaDefinition(context, (AllOfSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.ANY_OF_SCHEMA_DEFINITION:
				sequence_AnyOfSchemaDefinition(context, (AnyOfSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.ARRAY_VALUE:
				sequence_ArrayValue(context, (ArrayValue) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.BOOLEAN_SCHEMA:
				sequence_BooleanSchema(context, (BooleanSchema) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.COMMENT_SCHEMA_DEFINITION:
				sequence_CommentSchemaDefinition(context, (CommentSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.CONST_SCHEMA_DEFINITION:
				sequence_ConstSchemaDefinition(context, (ConstSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.CONTAINS_SCHEMA_DEFINITION:
				sequence_ContainsSchemaDefinition(context, (ContainsSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.CONTENT_ENCODING_SCHEMA_DEFINITION:
				sequence_ContentEncodingSchemaDefinition(context, (ContentEncodingSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.CONTENT_MEDIA_TYPE_SCHEMA_DEFINITION:
				sequence_ContentMediaTypeSchemaDefinition(context, (ContentMediaTypeSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.DEFAULT_SCHEMA_DEFINITION:
				sequence_DefaultSchemaDefinition(context, (DefaultSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.DEFINITIONS_SCHEMA_DEFINITION:
				sequence_DefinitionsSchemaDefinition(context, (DefinitionsSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.DEPENDENCIES_ANY_OF:
				sequence_DependenciesAnyOf(context, (DependenciesAnyOf) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.DEPENDENCIES_SCHEMA_DEFINITION:
				sequence_DependenciesSchemaDefinition(context, (DependenciesSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.DESCRIPTION_SCHEMA_DEFINITION:
				sequence_DescriptionSchemaDefinition(context, (DescriptionSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.ELSE_SCHEMA_DEFINITION:
				sequence_ElseSchemaDefinition(context, (ElseSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.ENUM_SCHEMA_DEFINITION:
				sequence_EnumSchemaDefinition(context, (EnumSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.EXAMPLES_SCHEMA_DEFINITION:
				sequence_ExamplesSchemaDefinition(context, (ExamplesSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.EXCLUSIVE_MAXIMUM_SCHEMA_DEFINITION:
				sequence_ExclusiveMaximumSchemaDefinition(context, (ExclusiveMaximumSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.EXCLUSIVE_MINIMUM_SCHEMA_DEFINITION:
				sequence_ExclusiveMinimumSchemaDefinition(context, (ExclusiveMinimumSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.FORMAT_SCHEMA_DEFINITION:
				sequence_FormatSchemaDefinition(context, (FormatSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.ID_SCHEMA_DEFINITION:
				sequence_IdSchemaDefinition(context, (IdSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.IF_SCHEMA_DEFINITION:
				sequence_IfSchemaDefinition(context, (IfSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.INTEGER_VALUE:
				sequence_IntegerValue(context, (IntegerValue) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.ITEMS_SCHEMA_DEFINITION:
				sequence_ItemsSchemaDefinition(context, (ItemsSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.JSON_DOCUMENT:
				sequence_JsonDocument(context, (JsonDocument) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.JSON_SCHEMA:
				sequence_JsonSchema(context, (JsonSchema) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.KEY_SCHEMA_PAIR:
				sequence_KeySchemaPair(context, (KeySchemaPair) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.KEY_STRING_ARRAY_PAIR:
				sequence_KeyStringArrayPair(context, (KeyStringArrayPair) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.KEY_VALUE_PAIR:
				sequence_KeyValuePair(context, (KeyValuePair) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.MAX_ITEMS_SCHEMA_DEFINITION:
				sequence_MaxItemsSchemaDefinition(context, (MaxItemsSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.MAX_LENGTH_SCHEMA_DEFINITION:
				sequence_MaxLengthSchemaDefinition(context, (MaxLengthSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.MAX_PROPERTIES_SCHEMA_DEFINITION:
				sequence_MaxPropertiesSchemaDefinition(context, (MaxPropertiesSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.MAXIMUM_SCHEMA_DEFINITION:
				sequence_MaximumSchemaDefinition(context, (MaximumSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.MIN_ITEMS_SCHEMA_DEFINITION:
				sequence_MinItemsSchemaDefinition(context, (MinItemsSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.MIN_LENGTH_SCHEMA_DEFINITION:
				sequence_MinLengthSchemaDefinition(context, (MinLengthSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.MIN_PROPERTIES_SCHEMA_DEFINITION:
				sequence_MinPropertiesSchemaDefinition(context, (MinPropertiesSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.MINIMUM_SCHEMA_DEFINITION:
				sequence_MinimumSchemaDefinition(context, (MinimumSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.MULTIPLE_OF_SCHEMA_DEFINITION:
				sequence_MultipleOfSchemaDefinition(context, (MultipleOfSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.NON_NEGATIVE_INTEGER:
				sequence_NonNegativeInteger(context, (NonNegativeInteger) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.NON_NEGATIVE_INTEGER_DEFAULT0:
				sequence_NonNegativeIntegerDefault0(context, (NonNegativeIntegerDefault0) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.NOT_SCHEMA_DEFINITION:
				sequence_NotSchemaDefinition(context, (NotSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.NULL_VALUE:
				sequence_NullValue(context, (NullValue) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.NUMBER_VALUE:
				sequence_NumberValue(context, (NumberValue) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.OBJECT_SCHEMA:
				sequence_ObjectSchema(context, (ObjectSchema) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.OBJECT_VALUE:
				sequence_ObjectValue(context, (ObjectValue) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.ONE_OF_SCHEMA_DEFINITION:
				sequence_OneOfSchemaDefinition(context, (OneOfSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.PATTERN_PROPERTIES_SCHEMA_DEFINITION:
				sequence_PatternPropertiesSchemaDefinition(context, (PatternPropertiesSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.PATTERN_SCHEMA_DEFINITION:
				sequence_PatternSchemaDefinition(context, (PatternSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.PROPERTIES_SCHEMA_DEFINITION:
				sequence_PropertiesSchemaDefinition(context, (PropertiesSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.PROPERTY_NAMES_SCHEMA_DEFINITION:
				sequence_PropertyNamesSchemaDefinition(context, (PropertyNamesSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.READ_ONLY_SCHEMA_DEFINITION:
				sequence_ReadOnlySchemaDefinition(context, (ReadOnlySchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.REF_SCHEMA_DEFINITION:
				sequence_RefSchemaDefinition(context, (RefSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.REQUIRED_SCHEMA_DEFINITION:
				sequence_RequiredSchemaDefinition(context, (RequiredSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.SCHEMA_ARRAY:
				sequence_SchemaArray(context, (SchemaArray) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.SCHEMA_SCHEMA_DEFINITION:
				sequence_SchemaSchemaDefinition(context, (SchemaSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.STRING_ARRAY:
				sequence_StringArray(context, (StringArray) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.THEN_SCHEMA_DEFINITION:
				sequence_ThenSchemaDefinition(context, (ThenSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.TITLE_SCHEMA_DEFINITION:
				sequence_TitleSchemaDefinition(context, (TitleSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.TYPE_SCHEMA_DEFINITION:
				sequence_TypeSchemaDefinition(context, (TypeSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.TYPES_ANY_OF2:
				sequence_TypesAnyOf2(context, (TypesAnyOf2) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.UNIQUE_ITEMS_SCHEMA_DEFINITION:
				sequence_UniqueItemsSchemaDefinition(context, (UniqueItemsSchemaDefinition) semanticObject); 
				return; 
			case JsonMetaschemaMMPackage.WRITE_ONLY_SCHEMA_DEFINITION:
				sequence_WriteOnlySchemaDefinition(context, (WriteOnlySchemaDefinition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns AdditionalItemsSchemaDefinition
	 *     AdditionalItemsSchemaDefinition returns AdditionalItemsSchemaDefinition
	 *
	 * Constraint:
	 *     additionalItems=Schema
	 */
	protected void sequence_AdditionalItemsSchemaDefinition(ISerializationContext context, AdditionalItemsSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.ADDITIONAL_ITEMS_SCHEMA_DEFINITION__ADDITIONAL_ITEMS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.ADDITIONAL_ITEMS_SCHEMA_DEFINITION__ADDITIONAL_ITEMS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdditionalItemsSchemaDefinitionAccess().getAdditionalItemsSchemaParserRuleCall_2_0(), semanticObject.getAdditionalItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns AdditionalPropertiesSchemaDefinition
	 *     AdditionalPropertiesSchemaDefinition returns AdditionalPropertiesSchemaDefinition
	 *
	 * Constraint:
	 *     additionalProperties=Schema
	 */
	protected void sequence_AdditionalPropertiesSchemaDefinition(ISerializationContext context, AdditionalPropertiesSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.ADDITIONAL_PROPERTIES_SCHEMA_DEFINITION__ADDITIONAL_PROPERTIES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.ADDITIONAL_PROPERTIES_SCHEMA_DEFINITION__ADDITIONAL_PROPERTIES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdditionalPropertiesSchemaDefinitionAccess().getAdditionalPropertiesSchemaParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns AllOfSchemaDefinition
	 *     AllOfSchemaDefinition returns AllOfSchemaDefinition
	 *
	 * Constraint:
	 *     allOf=SchemaArray
	 */
	protected void sequence_AllOfSchemaDefinition(ISerializationContext context, AllOfSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.ALL_OF_SCHEMA_DEFINITION__ALL_OF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.ALL_OF_SCHEMA_DEFINITION__ALL_OF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAllOfSchemaDefinitionAccess().getAllOfSchemaArrayParserRuleCall_2_0(), semanticObject.getAllOf());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns AnyOfSchemaDefinition
	 *     AnyOfSchemaDefinition returns AnyOfSchemaDefinition
	 *
	 * Constraint:
	 *     anyOf=SchemaArray
	 */
	protected void sequence_AnyOfSchemaDefinition(ISerializationContext context, AnyOfSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.ANY_OF_SCHEMA_DEFINITION__ANY_OF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.ANY_OF_SCHEMA_DEFINITION__ANY_OF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnyOfSchemaDefinitionAccess().getAnyOfSchemaArrayParserRuleCall_2_0(), semanticObject.getAnyOf());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns ArrayValue
	 *     ArrayValue returns ArrayValue
	 *
	 * Constraint:
	 *     (value+=Value value+=Value*)?
	 */
	protected void sequence_ArrayValue(ISerializationContext context, ArrayValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Schema returns BooleanSchema
	 *     BooleanSchema returns BooleanSchema
	 *
	 * Constraint:
	 *     value=EBoolean
	 */
	protected void sequence_BooleanSchema(ISerializationContext context, BooleanSchema semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.BOOLEAN_SCHEMA__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.BOOLEAN_SCHEMA__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanSchemaAccess().getValueEBooleanParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     value=EBoolean
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.BOOLEAN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.BOOLEAN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanValueAccess().getValueEBooleanParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns CommentSchemaDefinition
	 *     CommentSchemaDefinition returns CommentSchemaDefinition
	 *
	 * Constraint:
	 *     comment=EString
	 */
	protected void sequence_CommentSchemaDefinition(ISerializationContext context, CommentSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.COMMENT_SCHEMA_DEFINITION__COMMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.COMMENT_SCHEMA_DEFINITION__COMMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommentSchemaDefinitionAccess().getCommentEStringParserRuleCall_2_0(), semanticObject.getComment());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns ConstSchemaDefinition
	 *     ConstSchemaDefinition returns ConstSchemaDefinition
	 *
	 * Constraint:
	 *     const=JsonDocument
	 */
	protected void sequence_ConstSchemaDefinition(ISerializationContext context, ConstSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.CONST_SCHEMA_DEFINITION__CONST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.CONST_SCHEMA_DEFINITION__CONST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstSchemaDefinitionAccess().getConstJsonDocumentParserRuleCall_2_0(), semanticObject.getConst());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns ContainsSchemaDefinition
	 *     ContainsSchemaDefinition returns ContainsSchemaDefinition
	 *
	 * Constraint:
	 *     contains=Schema
	 */
	protected void sequence_ContainsSchemaDefinition(ISerializationContext context, ContainsSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.CONTAINS_SCHEMA_DEFINITION__CONTAINS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.CONTAINS_SCHEMA_DEFINITION__CONTAINS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainsSchemaDefinitionAccess().getContainsSchemaParserRuleCall_2_0(), semanticObject.getContains());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns ContentEncodingSchemaDefinition
	 *     ContentEncodingSchemaDefinition returns ContentEncodingSchemaDefinition
	 *
	 * Constraint:
	 *     contentEncoding=EString
	 */
	protected void sequence_ContentEncodingSchemaDefinition(ISerializationContext context, ContentEncodingSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.CONTENT_ENCODING_SCHEMA_DEFINITION__CONTENT_ENCODING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.CONTENT_ENCODING_SCHEMA_DEFINITION__CONTENT_ENCODING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContentEncodingSchemaDefinitionAccess().getContentEncodingEStringParserRuleCall_2_0(), semanticObject.getContentEncoding());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns ContentMediaTypeSchemaDefinition
	 *     ContentMediaTypeSchemaDefinition returns ContentMediaTypeSchemaDefinition
	 *
	 * Constraint:
	 *     contentMediaType=EString
	 */
	protected void sequence_ContentMediaTypeSchemaDefinition(ISerializationContext context, ContentMediaTypeSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.CONTENT_MEDIA_TYPE_SCHEMA_DEFINITION__CONTENT_MEDIA_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.CONTENT_MEDIA_TYPE_SCHEMA_DEFINITION__CONTENT_MEDIA_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContentMediaTypeSchemaDefinitionAccess().getContentMediaTypeEStringParserRuleCall_2_0(), semanticObject.getContentMediaType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns DefaultSchemaDefinition
	 *     DefaultSchemaDefinition returns DefaultSchemaDefinition
	 *
	 * Constraint:
	 *     default=JsonDocument
	 */
	protected void sequence_DefaultSchemaDefinition(ISerializationContext context, DefaultSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.DEFAULT_SCHEMA_DEFINITION__DEFAULT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.DEFAULT_SCHEMA_DEFINITION__DEFAULT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefaultSchemaDefinitionAccess().getDefaultJsonDocumentParserRuleCall_2_0(), semanticObject.getDefault());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns DefinitionsSchemaDefinition
	 *     DefinitionsSchemaDefinition returns DefinitionsSchemaDefinition
	 *
	 * Constraint:
	 *     (keySchemaPairs+=KeySchemaPair keySchemaPairs+=KeySchemaPair*)?
	 */
	protected void sequence_DefinitionsSchemaDefinition(ISerializationContext context, DefinitionsSchemaDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DependenciesAnyOf returns DependenciesAnyOf
	 *
	 * Constraint:
	 *     (dependenciesAnyOf2=KeyStringArrayPair? dependenciesAnyOf1=KeySchemaPair?)
	 */
	protected void sequence_DependenciesAnyOf(ISerializationContext context, DependenciesAnyOf semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DependenciesSchemaDefinition returns DependenciesSchemaDefinition
	 *
	 * Constraint:
	 *     (dependencies+=DependenciesAnyOf dependencies+=DependenciesAnyOf*)?
	 */
	protected void sequence_DependenciesSchemaDefinition(ISerializationContext context, DependenciesSchemaDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns DescriptionSchemaDefinition
	 *     DescriptionSchemaDefinition returns DescriptionSchemaDefinition
	 *
	 * Constraint:
	 *     description=EString
	 */
	protected void sequence_DescriptionSchemaDefinition(ISerializationContext context, DescriptionSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.DESCRIPTION_SCHEMA_DEFINITION__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.DESCRIPTION_SCHEMA_DEFINITION__DESCRIPTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDescriptionSchemaDefinitionAccess().getDescriptionEStringParserRuleCall_2_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns ElseSchemaDefinition
	 *     ElseSchemaDefinition returns ElseSchemaDefinition
	 *
	 * Constraint:
	 *     else=Schema
	 */
	protected void sequence_ElseSchemaDefinition(ISerializationContext context, ElseSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.ELSE_SCHEMA_DEFINITION__ELSE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.ELSE_SCHEMA_DEFINITION__ELSE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElseSchemaDefinitionAccess().getElseSchemaParserRuleCall_2_0(), semanticObject.getElse());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns EnumSchemaDefinition
	 *     EnumSchemaDefinition returns EnumSchemaDefinition
	 *
	 * Constraint:
	 *     (items+=JsonDocument items+=JsonDocument*)
	 */
	protected void sequence_EnumSchemaDefinition(ISerializationContext context, EnumSchemaDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns ExamplesSchemaDefinition
	 *     ExamplesSchemaDefinition returns ExamplesSchemaDefinition
	 *
	 * Constraint:
	 *     (examples+=JsonDocument examples+=JsonDocument*)?
	 */
	protected void sequence_ExamplesSchemaDefinition(ISerializationContext context, ExamplesSchemaDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns ExclusiveMaximumSchemaDefinition
	 *     ExclusiveMaximumSchemaDefinition returns ExclusiveMaximumSchemaDefinition
	 *
	 * Constraint:
	 *     exclusiveMaximum=EDouble
	 */
	protected void sequence_ExclusiveMaximumSchemaDefinition(ISerializationContext context, ExclusiveMaximumSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.EXCLUSIVE_MAXIMUM_SCHEMA_DEFINITION__EXCLUSIVE_MAXIMUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.EXCLUSIVE_MAXIMUM_SCHEMA_DEFINITION__EXCLUSIVE_MAXIMUM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExclusiveMaximumSchemaDefinitionAccess().getExclusiveMaximumEDoubleParserRuleCall_2_0(), semanticObject.getExclusiveMaximum());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns ExclusiveMinimumSchemaDefinition
	 *     ExclusiveMinimumSchemaDefinition returns ExclusiveMinimumSchemaDefinition
	 *
	 * Constraint:
	 *     exclusiveMinimum=EDouble
	 */
	protected void sequence_ExclusiveMinimumSchemaDefinition(ISerializationContext context, ExclusiveMinimumSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.EXCLUSIVE_MINIMUM_SCHEMA_DEFINITION__EXCLUSIVE_MINIMUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.EXCLUSIVE_MINIMUM_SCHEMA_DEFINITION__EXCLUSIVE_MINIMUM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExclusiveMinimumSchemaDefinitionAccess().getExclusiveMinimumEDoubleParserRuleCall_2_0(), semanticObject.getExclusiveMinimum());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns FormatSchemaDefinition
	 *     FormatSchemaDefinition returns FormatSchemaDefinition
	 *
	 * Constraint:
	 *     format=EString
	 */
	protected void sequence_FormatSchemaDefinition(ISerializationContext context, FormatSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.FORMAT_SCHEMA_DEFINITION__FORMAT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.FORMAT_SCHEMA_DEFINITION__FORMAT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFormatSchemaDefinitionAccess().getFormatEStringParserRuleCall_2_0(), semanticObject.getFormat());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns IdSchemaDefinition
	 *     IdSchemaDefinition returns IdSchemaDefinition
	 *
	 * Constraint:
	 *     id=EString
	 */
	protected void sequence_IdSchemaDefinition(ISerializationContext context, IdSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.ID_SCHEMA_DEFINITION__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.ID_SCHEMA_DEFINITION__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIdSchemaDefinitionAccess().getIdEStringParserRuleCall_2_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns IfSchemaDefinition
	 *     IfSchemaDefinition returns IfSchemaDefinition
	 *
	 * Constraint:
	 *     if=Schema
	 */
	protected void sequence_IfSchemaDefinition(ISerializationContext context, IfSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.IF_SCHEMA_DEFINITION__IF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.IF_SCHEMA_DEFINITION__IF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIfSchemaDefinitionAccess().getIfSchemaParserRuleCall_2_0(), semanticObject.getIf());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns IntegerValue
	 *     IntegerValue returns IntegerValue
	 *
	 * Constraint:
	 *     value=EInt
	 */
	protected void sequence_IntegerValue(ISerializationContext context, IntegerValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.INTEGER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.INTEGER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerValueAccess().getValueEIntParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns ItemsSchemaDefinition
	 *     ItemsSchemaDefinition returns ItemsSchemaDefinition
	 *
	 * Constraint:
	 *     (itemsAnyOf1=Schema? itemsAnyOf2=SchemaArray?)
	 */
	protected void sequence_ItemsSchemaDefinition(ISerializationContext context, ItemsSchemaDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JsonDocument returns JsonDocument
	 *
	 * Constraint:
	 *     value=Value
	 */
	protected void sequence_JsonDocument(ISerializationContext context, JsonDocument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.JSON_DOCUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.JSON_DOCUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonDocumentAccess().getValueValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JsonSchema returns JsonSchema
	 *
	 * Constraint:
	 *     schema=Schema?
	 */
	protected void sequence_JsonSchema(ISerializationContext context, JsonSchema semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KeySchemaPair returns KeySchemaPair
	 *
	 * Constraint:
	 *     (key=EString value=Schema)
	 */
	protected void sequence_KeySchemaPair(ISerializationContext context, KeySchemaPair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.KEY_SCHEMA_PAIR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.KEY_SCHEMA_PAIR__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.KEY_SCHEMA_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.KEY_SCHEMA_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeySchemaPairAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getKeySchemaPairAccess().getValueSchemaParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeyStringArrayPair returns KeyStringArrayPair
	 *
	 * Constraint:
	 *     (key=EString value=StringArray)
	 */
	protected void sequence_KeyStringArrayPair(ISerializationContext context, KeyStringArrayPair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.KEY_STRING_ARRAY_PAIR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.KEY_STRING_ARRAY_PAIR__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.KEY_STRING_ARRAY_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.KEY_STRING_ARRAY_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyStringArrayPairAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getKeyStringArrayPairAccess().getValueStringArrayParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns KeyValuePair
	 *     KeyValuePair returns KeyValuePair
	 *
	 * Constraint:
	 *     (key=EString value=Value)
	 */
	protected void sequence_KeyValuePair(ISerializationContext context, KeyValuePair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.KEY_VALUE_PAIR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.KEY_VALUE_PAIR__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.KEY_VALUE_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.KEY_VALUE_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyValuePairAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getKeyValuePairAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns MaxItemsSchemaDefinition
	 *     MaxItemsSchemaDefinition returns MaxItemsSchemaDefinition
	 *
	 * Constraint:
	 *     maxItems=NonNegativeInteger
	 */
	protected void sequence_MaxItemsSchemaDefinition(ISerializationContext context, MaxItemsSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.MAX_ITEMS_SCHEMA_DEFINITION__MAX_ITEMS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.MAX_ITEMS_SCHEMA_DEFINITION__MAX_ITEMS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMaxItemsSchemaDefinitionAccess().getMaxItemsNonNegativeIntegerParserRuleCall_2_0(), semanticObject.getMaxItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns MaxLengthSchemaDefinition
	 *     MaxLengthSchemaDefinition returns MaxLengthSchemaDefinition
	 *
	 * Constraint:
	 *     maxLength=NonNegativeInteger
	 */
	protected void sequence_MaxLengthSchemaDefinition(ISerializationContext context, MaxLengthSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.MAX_LENGTH_SCHEMA_DEFINITION__MAX_LENGTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.MAX_LENGTH_SCHEMA_DEFINITION__MAX_LENGTH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMaxLengthSchemaDefinitionAccess().getMaxLengthNonNegativeIntegerParserRuleCall_2_0(), semanticObject.getMaxLength());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns MaxPropertiesSchemaDefinition
	 *     MaxPropertiesSchemaDefinition returns MaxPropertiesSchemaDefinition
	 *
	 * Constraint:
	 *     maxProperties=NonNegativeInteger
	 */
	protected void sequence_MaxPropertiesSchemaDefinition(ISerializationContext context, MaxPropertiesSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.MAX_PROPERTIES_SCHEMA_DEFINITION__MAX_PROPERTIES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.MAX_PROPERTIES_SCHEMA_DEFINITION__MAX_PROPERTIES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMaxPropertiesSchemaDefinitionAccess().getMaxPropertiesNonNegativeIntegerParserRuleCall_2_0(), semanticObject.getMaxProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns MaximumSchemaDefinition
	 *     MaximumSchemaDefinition returns MaximumSchemaDefinition
	 *
	 * Constraint:
	 *     maximum=EDouble
	 */
	protected void sequence_MaximumSchemaDefinition(ISerializationContext context, MaximumSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.MAXIMUM_SCHEMA_DEFINITION__MAXIMUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.MAXIMUM_SCHEMA_DEFINITION__MAXIMUM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMaximumSchemaDefinitionAccess().getMaximumEDoubleParserRuleCall_2_0(), semanticObject.getMaximum());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns MinItemsSchemaDefinition
	 *     MinItemsSchemaDefinition returns MinItemsSchemaDefinition
	 *
	 * Constraint:
	 *     minItems=NonNegativeIntegerDefault0
	 */
	protected void sequence_MinItemsSchemaDefinition(ISerializationContext context, MinItemsSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.MIN_ITEMS_SCHEMA_DEFINITION__MIN_ITEMS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.MIN_ITEMS_SCHEMA_DEFINITION__MIN_ITEMS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMinItemsSchemaDefinitionAccess().getMinItemsNonNegativeIntegerDefault0ParserRuleCall_2_0(), semanticObject.getMinItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns MinLengthSchemaDefinition
	 *     MinLengthSchemaDefinition returns MinLengthSchemaDefinition
	 *
	 * Constraint:
	 *     minLength=NonNegativeIntegerDefault0
	 */
	protected void sequence_MinLengthSchemaDefinition(ISerializationContext context, MinLengthSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.MIN_LENGTH_SCHEMA_DEFINITION__MIN_LENGTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.MIN_LENGTH_SCHEMA_DEFINITION__MIN_LENGTH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMinLengthSchemaDefinitionAccess().getMinLengthNonNegativeIntegerDefault0ParserRuleCall_2_0(), semanticObject.getMinLength());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns MinPropertiesSchemaDefinition
	 *     MinPropertiesSchemaDefinition returns MinPropertiesSchemaDefinition
	 *
	 * Constraint:
	 *     minProperties=NonNegativeIntegerDefault0
	 */
	protected void sequence_MinPropertiesSchemaDefinition(ISerializationContext context, MinPropertiesSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.MIN_PROPERTIES_SCHEMA_DEFINITION__MIN_PROPERTIES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.MIN_PROPERTIES_SCHEMA_DEFINITION__MIN_PROPERTIES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMinPropertiesSchemaDefinitionAccess().getMinPropertiesNonNegativeIntegerDefault0ParserRuleCall_2_0(), semanticObject.getMinProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns MinimumSchemaDefinition
	 *     MinimumSchemaDefinition returns MinimumSchemaDefinition
	 *
	 * Constraint:
	 *     minimum=EDouble
	 */
	protected void sequence_MinimumSchemaDefinition(ISerializationContext context, MinimumSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.MINIMUM_SCHEMA_DEFINITION__MINIMUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.MINIMUM_SCHEMA_DEFINITION__MINIMUM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMinimumSchemaDefinitionAccess().getMinimumEDoubleParserRuleCall_2_0(), semanticObject.getMinimum());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns MultipleOfSchemaDefinition
	 *     MultipleOfSchemaDefinition returns MultipleOfSchemaDefinition
	 *
	 * Constraint:
	 *     multipleOf=EDouble
	 */
	protected void sequence_MultipleOfSchemaDefinition(ISerializationContext context, MultipleOfSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.MULTIPLE_OF_SCHEMA_DEFINITION__MULTIPLE_OF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.MULTIPLE_OF_SCHEMA_DEFINITION__MULTIPLE_OF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultipleOfSchemaDefinitionAccess().getMultipleOfEDoubleParserRuleCall_2_0(), semanticObject.getMultipleOf());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NonNegativeIntegerDefault0 returns NonNegativeIntegerDefault0
	 *
	 * Constraint:
	 *     value=EInt
	 */
	protected void sequence_NonNegativeIntegerDefault0(ISerializationContext context, NonNegativeIntegerDefault0 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.NON_NEGATIVE_INTEGER_DEFAULT0__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.NON_NEGATIVE_INTEGER_DEFAULT0__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNonNegativeIntegerDefault0Access().getValueEIntParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NonNegativeInteger returns NonNegativeInteger
	 *
	 * Constraint:
	 *     value=EInt
	 */
	protected void sequence_NonNegativeInteger(ISerializationContext context, NonNegativeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.NON_NEGATIVE_INTEGER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.NON_NEGATIVE_INTEGER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNonNegativeIntegerAccess().getValueEIntParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns NotSchemaDefinition
	 *     NotSchemaDefinition returns NotSchemaDefinition
	 *
	 * Constraint:
	 *     not=Schema
	 */
	protected void sequence_NotSchemaDefinition(ISerializationContext context, NotSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.NOT_SCHEMA_DEFINITION__NOT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.NOT_SCHEMA_DEFINITION__NOT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNotSchemaDefinitionAccess().getNotSchemaParserRuleCall_2_0(), semanticObject.getNot());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NullValue
	 *     NullValue returns NullValue
	 *
	 * Constraint:
	 *     {NullValue}
	 */
	protected void sequence_NullValue(ISerializationContext context, NullValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NumberValue
	 *     NumberValue returns NumberValue
	 *
	 * Constraint:
	 *     value=EDouble
	 */
	protected void sequence_NumberValue(ISerializationContext context, NumberValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.NUMBER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.NUMBER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberValueAccess().getValueEDoubleParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Schema returns ObjectSchema
	 *     ObjectSchema returns ObjectSchema
	 *
	 * Constraint:
	 *     (keywordDefinition+=KeywordDefinition keywordDefinition+=KeywordDefinition*)?
	 */
	protected void sequence_ObjectSchema(ISerializationContext context, ObjectSchema semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns ObjectValue
	 *     ObjectValue returns ObjectValue
	 *
	 * Constraint:
	 *     (keyvaluepair+=KeyValuePair keyvaluepair+=KeyValuePair*)?
	 */
	protected void sequence_ObjectValue(ISerializationContext context, ObjectValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns OneOfSchemaDefinition
	 *     OneOfSchemaDefinition returns OneOfSchemaDefinition
	 *
	 * Constraint:
	 *     oneOf=SchemaArray
	 */
	protected void sequence_OneOfSchemaDefinition(ISerializationContext context, OneOfSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.ONE_OF_SCHEMA_DEFINITION__ONE_OF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.ONE_OF_SCHEMA_DEFINITION__ONE_OF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOneOfSchemaDefinitionAccess().getOneOfSchemaArrayParserRuleCall_2_0(), semanticObject.getOneOf());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns PatternPropertiesSchemaDefinition
	 *     PatternPropertiesSchemaDefinition returns PatternPropertiesSchemaDefinition
	 *
	 * Constraint:
	 *     (keySchemaPairs+=KeySchemaPair keySchemaPairs+=KeySchemaPair*)?
	 */
	protected void sequence_PatternPropertiesSchemaDefinition(ISerializationContext context, PatternPropertiesSchemaDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns PatternSchemaDefinition
	 *     PatternSchemaDefinition returns PatternSchemaDefinition
	 *
	 * Constraint:
	 *     pattern=EString
	 */
	protected void sequence_PatternSchemaDefinition(ISerializationContext context, PatternSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.PATTERN_SCHEMA_DEFINITION__PATTERN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.PATTERN_SCHEMA_DEFINITION__PATTERN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPatternSchemaDefinitionAccess().getPatternEStringParserRuleCall_2_0(), semanticObject.getPattern());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns PropertiesSchemaDefinition
	 *     PropertiesSchemaDefinition returns PropertiesSchemaDefinition
	 *
	 * Constraint:
	 *     (keySchemaPairs+=KeySchemaPair keySchemaPairs+=KeySchemaPair*)?
	 */
	protected void sequence_PropertiesSchemaDefinition(ISerializationContext context, PropertiesSchemaDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns PropertyNamesSchemaDefinition
	 *     PropertyNamesSchemaDefinition returns PropertyNamesSchemaDefinition
	 *
	 * Constraint:
	 *     propertyNames=Schema
	 */
	protected void sequence_PropertyNamesSchemaDefinition(ISerializationContext context, PropertyNamesSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.PROPERTY_NAMES_SCHEMA_DEFINITION__PROPERTY_NAMES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.PROPERTY_NAMES_SCHEMA_DEFINITION__PROPERTY_NAMES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyNamesSchemaDefinitionAccess().getPropertyNamesSchemaParserRuleCall_2_0(), semanticObject.getPropertyNames());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns ReadOnlySchemaDefinition
	 *     ReadOnlySchemaDefinition returns ReadOnlySchemaDefinition
	 *
	 * Constraint:
	 *     readOnly=EBoolean
	 */
	protected void sequence_ReadOnlySchemaDefinition(ISerializationContext context, ReadOnlySchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.READ_ONLY_SCHEMA_DEFINITION__READ_ONLY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.READ_ONLY_SCHEMA_DEFINITION__READ_ONLY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReadOnlySchemaDefinitionAccess().getReadOnlyEBooleanParserRuleCall_2_0(), semanticObject.isReadOnly());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns RefSchemaDefinition
	 *     RefSchemaDefinition returns RefSchemaDefinition
	 *
	 * Constraint:
	 *     ref=EString
	 */
	protected void sequence_RefSchemaDefinition(ISerializationContext context, RefSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.REF_SCHEMA_DEFINITION__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.REF_SCHEMA_DEFINITION__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefSchemaDefinitionAccess().getRefEStringParserRuleCall_2_0(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns RequiredSchemaDefinition
	 *     RequiredSchemaDefinition returns RequiredSchemaDefinition
	 *
	 * Constraint:
	 *     required=StringArray
	 */
	protected void sequence_RequiredSchemaDefinition(ISerializationContext context, RequiredSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.REQUIRED_SCHEMA_DEFINITION__REQUIRED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.REQUIRED_SCHEMA_DEFINITION__REQUIRED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRequiredSchemaDefinitionAccess().getRequiredStringArrayParserRuleCall_2_0(), semanticObject.getRequired());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SchemaArray returns SchemaArray
	 *
	 * Constraint:
	 *     (items+=Schema items+=Schema*)
	 */
	protected void sequence_SchemaArray(ISerializationContext context, SchemaArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns SchemaSchemaDefinition
	 *     SchemaSchemaDefinition returns SchemaSchemaDefinition
	 *
	 * Constraint:
	 *     schema=EString
	 */
	protected void sequence_SchemaSchemaDefinition(ISerializationContext context, SchemaSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.SCHEMA_SCHEMA_DEFINITION__SCHEMA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.SCHEMA_SCHEMA_DEFINITION__SCHEMA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSchemaSchemaDefinitionAccess().getSchemaEStringParserRuleCall_2_0(), semanticObject.getSchema());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StringArray returns StringArray
	 *
	 * Constraint:
	 *     (values+=EString values+=EString*)?
	 */
	protected void sequence_StringArray(ISerializationContext context, StringArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns ThenSchemaDefinition
	 *     ThenSchemaDefinition returns ThenSchemaDefinition
	 *
	 * Constraint:
	 *     then=Schema
	 */
	protected void sequence_ThenSchemaDefinition(ISerializationContext context, ThenSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.THEN_SCHEMA_DEFINITION__THEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.THEN_SCHEMA_DEFINITION__THEN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getThenSchemaDefinitionAccess().getThenSchemaParserRuleCall_2_0(), semanticObject.getThen());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns TitleSchemaDefinition
	 *     TitleSchemaDefinition returns TitleSchemaDefinition
	 *
	 * Constraint:
	 *     title=EString
	 */
	protected void sequence_TitleSchemaDefinition(ISerializationContext context, TitleSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.TITLE_SCHEMA_DEFINITION__TITLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.TITLE_SCHEMA_DEFINITION__TITLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTitleSchemaDefinitionAccess().getTitleEStringParserRuleCall_2_0(), semanticObject.getTitle());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns TypeSchemaDefinition
	 *     TypeSchemaDefinition returns TypeSchemaDefinition
	 *
	 * Constraint:
	 *     (typeAnyOf1=SimpleTypes? typesAnyOf2=TypesAnyOf2?)
	 */
	protected void sequence_TypeSchemaDefinition(ISerializationContext context, TypeSchemaDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypesAnyOf2 returns TypesAnyOf2
	 *
	 * Constraint:
	 *     (items+=SimpleTypes items+=SimpleTypes*)
	 */
	protected void sequence_TypesAnyOf2(ISerializationContext context, TypesAnyOf2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns UniqueItemsSchemaDefinition
	 *     UniqueItemsSchemaDefinition returns UniqueItemsSchemaDefinition
	 *
	 * Constraint:
	 *     uniqueItems=EBoolean
	 */
	protected void sequence_UniqueItemsSchemaDefinition(ISerializationContext context, UniqueItemsSchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.UNIQUE_ITEMS_SCHEMA_DEFINITION__UNIQUE_ITEMS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.UNIQUE_ITEMS_SCHEMA_DEFINITION__UNIQUE_ITEMS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUniqueItemsSchemaDefinitionAccess().getUniqueItemsEBooleanParserRuleCall_2_0(), semanticObject.isUniqueItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeywordDefinition returns WriteOnlySchemaDefinition
	 *     WriteOnlySchemaDefinition returns WriteOnlySchemaDefinition
	 *
	 * Constraint:
	 *     writeOnly=EBoolean
	 */
	protected void sequence_WriteOnlySchemaDefinition(ISerializationContext context, WriteOnlySchemaDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMetaschemaMMPackage.Literals.WRITE_ONLY_SCHEMA_DEFINITION__WRITE_ONLY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMetaschemaMMPackage.Literals.WRITE_ONLY_SCHEMA_DEFINITION__WRITE_ONLY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWriteOnlySchemaDefinitionAccess().getWriteOnlyEBooleanParserRuleCall_2_0(), semanticObject.isWriteOnly());
		feeder.finish();
	}
	
	
}
