/*
 * generated by Xtext 2.23.0
 */
package at.jku.bise.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JsonSchemaDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class JsonSchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.JsonSchema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJsonSchemaAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSchemaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSchemaSchemaParserRuleCall_1_0 = (RuleCall)cSchemaAssignment_1.eContents().get(0);
		
		//JsonSchema:
		//	{JsonSchema} schema=Schema?;
		@Override public ParserRule getRule() { return rule; }
		
		//{JsonSchema} schema=Schema?
		public Group getGroup() { return cGroup; }
		
		//{JsonSchema}
		public Action getJsonSchemaAction_0() { return cJsonSchemaAction_0; }
		
		//schema=Schema?
		public Assignment getSchemaAssignment_1() { return cSchemaAssignment_1; }
		
		//Schema
		public RuleCall getSchemaSchemaParserRuleCall_1_0() { return cSchemaSchemaParserRuleCall_1_0; }
	}
	public class SchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.Schema");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectSchemaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanSchemaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////	{JsonSchema}
		////	'JsonSchema'
		////	'{'
		////		('schema' schema=Schema)?
		////	'}';
		//Schema:
		//	ObjectSchema | BooleanSchema;
		@Override public ParserRule getRule() { return rule; }
		
		//ObjectSchema | BooleanSchema
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ObjectSchema
		public RuleCall getObjectSchemaParserRuleCall_0() { return cObjectSchemaParserRuleCall_0; }
		
		//BooleanSchema
		public RuleCall getBooleanSchemaParserRuleCall_1() { return cBooleanSchemaParserRuleCall_1; }
	}
	public class KeywordDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.KeywordDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdSchemaDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSchemaSchemaDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRefSchemaDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCommentSchemaDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTitleSchemaDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDescriptionSchemaDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDefaultSchemaDefinitionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cReadOnlySchemaDefinitionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cWriteOnlySchemaDefinitionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cExamplesSchemaDefinitionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cMultipleOfSchemaDefinitionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cMaximumSchemaDefinitionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cExclusiveMaximumSchemaDefinitionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cMinimumSchemaDefinitionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cExclusiveMinimumSchemaDefinitionParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cMaxLengthSchemaDefinitionParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cMinLengthSchemaDefinitionParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cPatternSchemaDefinitionParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cAdditionalItemsSchemaDefinitionParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cItemsSchemaDefinitionParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cMaxItemsSchemaDefinitionParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cMinItemsSchemaDefinitionParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cUniqueItemsSchemaDefinitionParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cContainsSchemaDefinitionParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cMaxPropertiesSchemaDefinitionParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cMinPropertiesSchemaDefinitionParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cRequiredSchemaDefinitionParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cAdditionalPropertiesSchemaDefinitionParserRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		private final RuleCall cDefinitionsSchemaDefinitionParserRuleCall_28 = (RuleCall)cAlternatives.eContents().get(28);
		private final RuleCall cPropertiesSchemaDefinitionParserRuleCall_29 = (RuleCall)cAlternatives.eContents().get(29);
		private final RuleCall cPatternPropertiesSchemaDefinitionParserRuleCall_30 = (RuleCall)cAlternatives.eContents().get(30);
		private final RuleCall cPropertyNamesSchemaDefinitionParserRuleCall_31 = (RuleCall)cAlternatives.eContents().get(31);
		private final RuleCall cConstSchemaDefinitionParserRuleCall_32 = (RuleCall)cAlternatives.eContents().get(32);
		private final RuleCall cEnumSchemaDefinitionParserRuleCall_33 = (RuleCall)cAlternatives.eContents().get(33);
		private final RuleCall cTypeSchemaDefinitionParserRuleCall_34 = (RuleCall)cAlternatives.eContents().get(34);
		private final RuleCall cFormatSchemaDefinitionParserRuleCall_35 = (RuleCall)cAlternatives.eContents().get(35);
		private final RuleCall cContentMediaTypeSchemaDefinitionParserRuleCall_36 = (RuleCall)cAlternatives.eContents().get(36);
		private final RuleCall cContentEncodingSchemaDefinitionParserRuleCall_37 = (RuleCall)cAlternatives.eContents().get(37);
		private final RuleCall cIfSchemaDefinitionParserRuleCall_38 = (RuleCall)cAlternatives.eContents().get(38);
		private final RuleCall cThenSchemaDefinitionParserRuleCall_39 = (RuleCall)cAlternatives.eContents().get(39);
		private final RuleCall cElseSchemaDefinitionParserRuleCall_40 = (RuleCall)cAlternatives.eContents().get(40);
		private final RuleCall cAllOfSchemaDefinitionParserRuleCall_41 = (RuleCall)cAlternatives.eContents().get(41);
		private final RuleCall cAnyOfSchemaDefinitionParserRuleCall_42 = (RuleCall)cAlternatives.eContents().get(42);
		private final RuleCall cOneOfSchemaDefinitionParserRuleCall_43 = (RuleCall)cAlternatives.eContents().get(43);
		private final RuleCall cNotSchemaDefinitionParserRuleCall_44 = (RuleCall)cAlternatives.eContents().get(44);
		private final RuleCall cKeyValuePairParserRuleCall_45 = (RuleCall)cAlternatives.eContents().get(45);
		
		//KeywordDefinition:
		//	IdSchemaDefinition | SchemaSchemaDefinition | RefSchemaDefinition | CommentSchemaDefinition | TitleSchemaDefinition |
		//	DescriptionSchemaDefinition | DefaultSchemaDefinition | ReadOnlySchemaDefinition | WriteOnlySchemaDefinition |
		//	ExamplesSchemaDefinition | MultipleOfSchemaDefinition | MaximumSchemaDefinition | ExclusiveMaximumSchemaDefinition |
		//	MinimumSchemaDefinition | ExclusiveMinimumSchemaDefinition | MaxLengthSchemaDefinition | MinLengthSchemaDefinition |
		//	PatternSchemaDefinition | AdditionalItemsSchemaDefinition | ItemsSchemaDefinition | MaxItemsSchemaDefinition |
		//	MinItemsSchemaDefinition | UniqueItemsSchemaDefinition | ContainsSchemaDefinition | MaxPropertiesSchemaDefinition |
		//	MinPropertiesSchemaDefinition | RequiredSchemaDefinition | AdditionalPropertiesSchemaDefinition |
		//	DefinitionsSchemaDefinition | PropertiesSchemaDefinition | PatternPropertiesSchemaDefinition |
		//	PropertyNamesSchemaDefinition | ConstSchemaDefinition | EnumSchemaDefinition | TypeSchemaDefinition |
		//	FormatSchemaDefinition | ContentMediaTypeSchemaDefinition | ContentEncodingSchemaDefinition | IfSchemaDefinition |
		//	ThenSchemaDefinition | ElseSchemaDefinition | AllOfSchemaDefinition | AnyOfSchemaDefinition | OneOfSchemaDefinition |
		//	NotSchemaDefinition | KeyValuePair;
		@Override public ParserRule getRule() { return rule; }
		
		//IdSchemaDefinition | SchemaSchemaDefinition | RefSchemaDefinition | CommentSchemaDefinition | TitleSchemaDefinition |
		//DescriptionSchemaDefinition | DefaultSchemaDefinition | ReadOnlySchemaDefinition | WriteOnlySchemaDefinition |
		//ExamplesSchemaDefinition | MultipleOfSchemaDefinition | MaximumSchemaDefinition | ExclusiveMaximumSchemaDefinition |
		//MinimumSchemaDefinition | ExclusiveMinimumSchemaDefinition | MaxLengthSchemaDefinition | MinLengthSchemaDefinition |
		//PatternSchemaDefinition | AdditionalItemsSchemaDefinition | ItemsSchemaDefinition | MaxItemsSchemaDefinition |
		//MinItemsSchemaDefinition | UniqueItemsSchemaDefinition | ContainsSchemaDefinition | MaxPropertiesSchemaDefinition |
		//MinPropertiesSchemaDefinition | RequiredSchemaDefinition | AdditionalPropertiesSchemaDefinition |
		//DefinitionsSchemaDefinition | PropertiesSchemaDefinition | PatternPropertiesSchemaDefinition |
		//PropertyNamesSchemaDefinition | ConstSchemaDefinition | EnumSchemaDefinition | TypeSchemaDefinition |
		//FormatSchemaDefinition | ContentMediaTypeSchemaDefinition | ContentEncodingSchemaDefinition | IfSchemaDefinition |
		//ThenSchemaDefinition | ElseSchemaDefinition | AllOfSchemaDefinition | AnyOfSchemaDefinition | OneOfSchemaDefinition |
		//NotSchemaDefinition | KeyValuePair
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IdSchemaDefinition
		public RuleCall getIdSchemaDefinitionParserRuleCall_0() { return cIdSchemaDefinitionParserRuleCall_0; }
		
		//SchemaSchemaDefinition
		public RuleCall getSchemaSchemaDefinitionParserRuleCall_1() { return cSchemaSchemaDefinitionParserRuleCall_1; }
		
		//RefSchemaDefinition
		public RuleCall getRefSchemaDefinitionParserRuleCall_2() { return cRefSchemaDefinitionParserRuleCall_2; }
		
		//CommentSchemaDefinition
		public RuleCall getCommentSchemaDefinitionParserRuleCall_3() { return cCommentSchemaDefinitionParserRuleCall_3; }
		
		//TitleSchemaDefinition
		public RuleCall getTitleSchemaDefinitionParserRuleCall_4() { return cTitleSchemaDefinitionParserRuleCall_4; }
		
		//DescriptionSchemaDefinition
		public RuleCall getDescriptionSchemaDefinitionParserRuleCall_5() { return cDescriptionSchemaDefinitionParserRuleCall_5; }
		
		//DefaultSchemaDefinition
		public RuleCall getDefaultSchemaDefinitionParserRuleCall_6() { return cDefaultSchemaDefinitionParserRuleCall_6; }
		
		//ReadOnlySchemaDefinition
		public RuleCall getReadOnlySchemaDefinitionParserRuleCall_7() { return cReadOnlySchemaDefinitionParserRuleCall_7; }
		
		//WriteOnlySchemaDefinition
		public RuleCall getWriteOnlySchemaDefinitionParserRuleCall_8() { return cWriteOnlySchemaDefinitionParserRuleCall_8; }
		
		//ExamplesSchemaDefinition
		public RuleCall getExamplesSchemaDefinitionParserRuleCall_9() { return cExamplesSchemaDefinitionParserRuleCall_9; }
		
		//MultipleOfSchemaDefinition
		public RuleCall getMultipleOfSchemaDefinitionParserRuleCall_10() { return cMultipleOfSchemaDefinitionParserRuleCall_10; }
		
		//MaximumSchemaDefinition
		public RuleCall getMaximumSchemaDefinitionParserRuleCall_11() { return cMaximumSchemaDefinitionParserRuleCall_11; }
		
		//ExclusiveMaximumSchemaDefinition
		public RuleCall getExclusiveMaximumSchemaDefinitionParserRuleCall_12() { return cExclusiveMaximumSchemaDefinitionParserRuleCall_12; }
		
		//MinimumSchemaDefinition
		public RuleCall getMinimumSchemaDefinitionParserRuleCall_13() { return cMinimumSchemaDefinitionParserRuleCall_13; }
		
		//ExclusiveMinimumSchemaDefinition
		public RuleCall getExclusiveMinimumSchemaDefinitionParserRuleCall_14() { return cExclusiveMinimumSchemaDefinitionParserRuleCall_14; }
		
		//MaxLengthSchemaDefinition
		public RuleCall getMaxLengthSchemaDefinitionParserRuleCall_15() { return cMaxLengthSchemaDefinitionParserRuleCall_15; }
		
		//MinLengthSchemaDefinition
		public RuleCall getMinLengthSchemaDefinitionParserRuleCall_16() { return cMinLengthSchemaDefinitionParserRuleCall_16; }
		
		//PatternSchemaDefinition
		public RuleCall getPatternSchemaDefinitionParserRuleCall_17() { return cPatternSchemaDefinitionParserRuleCall_17; }
		
		//AdditionalItemsSchemaDefinition
		public RuleCall getAdditionalItemsSchemaDefinitionParserRuleCall_18() { return cAdditionalItemsSchemaDefinitionParserRuleCall_18; }
		
		//ItemsSchemaDefinition
		public RuleCall getItemsSchemaDefinitionParserRuleCall_19() { return cItemsSchemaDefinitionParserRuleCall_19; }
		
		//MaxItemsSchemaDefinition
		public RuleCall getMaxItemsSchemaDefinitionParserRuleCall_20() { return cMaxItemsSchemaDefinitionParserRuleCall_20; }
		
		//MinItemsSchemaDefinition
		public RuleCall getMinItemsSchemaDefinitionParserRuleCall_21() { return cMinItemsSchemaDefinitionParserRuleCall_21; }
		
		//UniqueItemsSchemaDefinition
		public RuleCall getUniqueItemsSchemaDefinitionParserRuleCall_22() { return cUniqueItemsSchemaDefinitionParserRuleCall_22; }
		
		//ContainsSchemaDefinition
		public RuleCall getContainsSchemaDefinitionParserRuleCall_23() { return cContainsSchemaDefinitionParserRuleCall_23; }
		
		//MaxPropertiesSchemaDefinition
		public RuleCall getMaxPropertiesSchemaDefinitionParserRuleCall_24() { return cMaxPropertiesSchemaDefinitionParserRuleCall_24; }
		
		//MinPropertiesSchemaDefinition
		public RuleCall getMinPropertiesSchemaDefinitionParserRuleCall_25() { return cMinPropertiesSchemaDefinitionParserRuleCall_25; }
		
		//RequiredSchemaDefinition
		public RuleCall getRequiredSchemaDefinitionParserRuleCall_26() { return cRequiredSchemaDefinitionParserRuleCall_26; }
		
		//AdditionalPropertiesSchemaDefinition
		public RuleCall getAdditionalPropertiesSchemaDefinitionParserRuleCall_27() { return cAdditionalPropertiesSchemaDefinitionParserRuleCall_27; }
		
		//DefinitionsSchemaDefinition
		public RuleCall getDefinitionsSchemaDefinitionParserRuleCall_28() { return cDefinitionsSchemaDefinitionParserRuleCall_28; }
		
		//PropertiesSchemaDefinition
		public RuleCall getPropertiesSchemaDefinitionParserRuleCall_29() { return cPropertiesSchemaDefinitionParserRuleCall_29; }
		
		//PatternPropertiesSchemaDefinition
		public RuleCall getPatternPropertiesSchemaDefinitionParserRuleCall_30() { return cPatternPropertiesSchemaDefinitionParserRuleCall_30; }
		
		////DependenciesSchemaDefinition| //TODO add OCL validation otherwise it crashes
		//PropertyNamesSchemaDefinition
		public RuleCall getPropertyNamesSchemaDefinitionParserRuleCall_31() { return cPropertyNamesSchemaDefinitionParserRuleCall_31; }
		
		//ConstSchemaDefinition
		public RuleCall getConstSchemaDefinitionParserRuleCall_32() { return cConstSchemaDefinitionParserRuleCall_32; }
		
		//EnumSchemaDefinition
		public RuleCall getEnumSchemaDefinitionParserRuleCall_33() { return cEnumSchemaDefinitionParserRuleCall_33; }
		
		//TypeSchemaDefinition
		public RuleCall getTypeSchemaDefinitionParserRuleCall_34() { return cTypeSchemaDefinitionParserRuleCall_34; }
		
		//FormatSchemaDefinition
		public RuleCall getFormatSchemaDefinitionParserRuleCall_35() { return cFormatSchemaDefinitionParserRuleCall_35; }
		
		//ContentMediaTypeSchemaDefinition
		public RuleCall getContentMediaTypeSchemaDefinitionParserRuleCall_36() { return cContentMediaTypeSchemaDefinitionParserRuleCall_36; }
		
		//ContentEncodingSchemaDefinition
		public RuleCall getContentEncodingSchemaDefinitionParserRuleCall_37() { return cContentEncodingSchemaDefinitionParserRuleCall_37; }
		
		//IfSchemaDefinition
		public RuleCall getIfSchemaDefinitionParserRuleCall_38() { return cIfSchemaDefinitionParserRuleCall_38; }
		
		//ThenSchemaDefinition
		public RuleCall getThenSchemaDefinitionParserRuleCall_39() { return cThenSchemaDefinitionParserRuleCall_39; }
		
		//ElseSchemaDefinition
		public RuleCall getElseSchemaDefinitionParserRuleCall_40() { return cElseSchemaDefinitionParserRuleCall_40; }
		
		//AllOfSchemaDefinition
		public RuleCall getAllOfSchemaDefinitionParserRuleCall_41() { return cAllOfSchemaDefinitionParserRuleCall_41; }
		
		//AnyOfSchemaDefinition
		public RuleCall getAnyOfSchemaDefinitionParserRuleCall_42() { return cAnyOfSchemaDefinitionParserRuleCall_42; }
		
		//OneOfSchemaDefinition
		public RuleCall getOneOfSchemaDefinitionParserRuleCall_43() { return cOneOfSchemaDefinitionParserRuleCall_43; }
		
		//NotSchemaDefinition
		public RuleCall getNotSchemaDefinitionParserRuleCall_44() { return cNotSchemaDefinitionParserRuleCall_44; }
		
		//KeyValuePair
		public RuleCall getKeyValuePairParserRuleCall_45() { return cKeyValuePairParserRuleCall_45; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNullValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cObjectValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNumberValueParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cArrayValueParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Value:
		//	IntegerValue | BooleanValue | NullValue | StringValue | ObjectValue | NumberValue | ArrayValue;
		@Override public ParserRule getRule() { return rule; }
		
		////	Value_Impl | IntegerValue | BooleanValue | NullValue | StringValue | ObjectValue | NumberValue | ArrayValue;
		//IntegerValue | BooleanValue | NullValue | StringValue | ObjectValue | NumberValue | ArrayValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////	Value_Impl | IntegerValue | BooleanValue | NullValue | StringValue | ObjectValue | NumberValue | ArrayValue;
		//IntegerValue
		public RuleCall getIntegerValueParserRuleCall_0() { return cIntegerValueParserRuleCall_0; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_1() { return cBooleanValueParserRuleCall_1; }
		
		//NullValue
		public RuleCall getNullValueParserRuleCall_2() { return cNullValueParserRuleCall_2; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_3() { return cStringValueParserRuleCall_3; }
		
		//ObjectValue
		public RuleCall getObjectValueParserRuleCall_4() { return cObjectValueParserRuleCall_4; }
		
		//NumberValue
		public RuleCall getNumberValueParserRuleCall_5() { return cNumberValueParserRuleCall_5; }
		
		//ArrayValue
		public RuleCall getArrayValueParserRuleCall_6() { return cArrayValueParserRuleCall_6; }
	}
	public class ObjectSchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.ObjectSchema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectSchemaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cKeywordDefinitionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cKeywordDefinitionKeywordDefinitionParserRuleCall_2_0_0 = (RuleCall)cKeywordDefinitionAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cKeywordDefinitionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cKeywordDefinitionKeywordDefinitionParserRuleCall_2_1_1_0 = (RuleCall)cKeywordDefinitionAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ObjectSchema:
		//	{ObjectSchema}
		//	'{' (keywordDefinition+=KeywordDefinition ("," keywordDefinition+=KeywordDefinition)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ObjectSchema} '{' (keywordDefinition+=KeywordDefinition ("," keywordDefinition+=KeywordDefinition)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{ObjectSchema}
		public Action getObjectSchemaAction_0() { return cObjectSchemaAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(keywordDefinition+=KeywordDefinition ("," keywordDefinition+=KeywordDefinition)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//keywordDefinition+=KeywordDefinition
		public Assignment getKeywordDefinitionAssignment_2_0() { return cKeywordDefinitionAssignment_2_0; }
		
		//KeywordDefinition
		public RuleCall getKeywordDefinitionKeywordDefinitionParserRuleCall_2_0_0() { return cKeywordDefinitionKeywordDefinitionParserRuleCall_2_0_0; }
		
		//("," keywordDefinition+=KeywordDefinition)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//keywordDefinition+=KeywordDefinition
		public Assignment getKeywordDefinitionAssignment_2_1_1() { return cKeywordDefinitionAssignment_2_1_1; }
		
		//KeywordDefinition
		public RuleCall getKeywordDefinitionKeywordDefinitionParserRuleCall_2_1_1_0() { return cKeywordDefinitionKeywordDefinitionParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class BooleanSchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.BooleanSchema");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEBooleanParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////	{ObjectSchema}
		////	'ObjectSchema'
		////	'{'
		////		('keywordDefinition' '{' keywordDefinition+=KeywordDefinition ( "," keywordDefinition+=KeywordDefinition)* '}' )?
		////	'}';
		//BooleanSchema:
		//	value=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EBoolean
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_0() { return cValueEBooleanParserRuleCall_0; }
	}
	public class MaximumSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.MaximumSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaximumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMaximumAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMaximumEDoubleParserRuleCall_2_0 = (RuleCall)cMaximumAssignment_2.eContents().get(0);
		
		////	value?='value'
		////	'BooleanSchema'
		////	;
		//MaximumSchemaDefinition:
		//	'"maximum"' ':' maximum=EDouble;
		@Override public ParserRule getRule() { return rule; }
		
		//'"maximum"' ':' maximum=EDouble
		public Group getGroup() { return cGroup; }
		
		//'"maximum"'
		public Keyword getMaximumKeyword_0() { return cMaximumKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//maximum=EDouble
		public Assignment getMaximumAssignment_2() { return cMaximumAssignment_2; }
		
		//EDouble
		public RuleCall getMaximumEDoubleParserRuleCall_2_0() { return cMaximumEDoubleParserRuleCall_2_0; }
	}
	public class WriteOnlySchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.WriteOnlySchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWriteOnlyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWriteOnlyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWriteOnlyEBooleanParserRuleCall_2_0 = (RuleCall)cWriteOnlyAssignment_2.eContents().get(0);
		
		////	'MaximumSchemaDefinition'
		////	'{'
		////		'maximum' maximum=EDouble
		////	'}';
		///**
		// * 	"writeOnly": {
		//		"type": "boolean",
		//		"default": false
		//	}
		// */ WriteOnlySchemaDefinition:
		//	'"writeOnly"' ':' writeOnly=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//'"writeOnly"' ':' writeOnly=EBoolean
		public Group getGroup() { return cGroup; }
		
		//'"writeOnly"'
		public Keyword getWriteOnlyKeyword_0() { return cWriteOnlyKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//writeOnly=EBoolean
		public Assignment getWriteOnlyAssignment_2() { return cWriteOnlyAssignment_2; }
		
		//EBoolean
		public RuleCall getWriteOnlyEBooleanParserRuleCall_2_0() { return cWriteOnlyEBooleanParserRuleCall_2_0; }
	}
	public class CommentSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.CommentSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentEStringParserRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		////	writeOnly?='writeOnly'
		////	'WriteOnlySchemaDefinition'
		////	;
		///**
		// * 	"$comment": {
		//		"type": "string"
		//	}
		// */ CommentSchemaDefinition:
		//	'"$comment"' ':' comment=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'"$comment"' ':' comment=EString
		public Group getGroup() { return cGroup; }
		
		//'"$comment"'
		public Keyword getCommentKeyword_0() { return cCommentKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//comment=EString
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }
		
		//EString
		public RuleCall getCommentEStringParserRuleCall_2_0() { return cCommentEStringParserRuleCall_2_0; }
	}
	public class EnumSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.EnumSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemsJsonDocumentParserRuleCall_1_0 = (RuleCall)cItemsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cItemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cItemsJsonDocumentParserRuleCall_2_1_0 = (RuleCall)cItemsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////	'CommentSchemaDefinition'
		////	'{'
		////		'comment' comment=EString
		////	'}';
		///**
		// * TODO fix minitems in ecore and delete class Enum
		// * 	"enum": {
		//		"type": "array",
		//		"items": true,
		//		"minItems": 1,
		//		"uniqueItems": true
		//        }
		// */ EnumSchemaDefinition:
		//	'[' items+=JsonDocument ("," items+=JsonDocument)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' items+=JsonDocument ("," items+=JsonDocument)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//items+=JsonDocument
		public Assignment getItemsAssignment_1() { return cItemsAssignment_1; }
		
		//JsonDocument
		public RuleCall getItemsJsonDocumentParserRuleCall_1_0() { return cItemsJsonDocumentParserRuleCall_1_0; }
		
		//("," items+=JsonDocument)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//items+=JsonDocument
		public Assignment getItemsAssignment_2_1() { return cItemsAssignment_2_1; }
		
		//JsonDocument
		public RuleCall getItemsJsonDocumentParserRuleCall_2_1_0() { return cItemsJsonDocumentParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class UniqueItemsSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.UniqueItemsSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUniqueItemsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUniqueItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUniqueItemsEBooleanParserRuleCall_2_0 = (RuleCall)cUniqueItemsAssignment_2.eContents().get(0);
		
		////	'"enum"' ':' enumeration=Enum;
		////	{EnumSchemaDefinition}
		////	'EnumSchemaDefinition'
		////	'{'
		////		('enumeration' enumeration=Enum)?
		////	'}';
		//UniqueItemsSchemaDefinition:
		//	'"uniqueItems"' ':' uniqueItems=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//'"uniqueItems"' ':' uniqueItems=EBoolean
		public Group getGroup() { return cGroup; }
		
		//'"uniqueItems"'
		public Keyword getUniqueItemsKeyword_0() { return cUniqueItemsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//uniqueItems=EBoolean
		public Assignment getUniqueItemsAssignment_2() { return cUniqueItemsAssignment_2; }
		
		//EBoolean
		public RuleCall getUniqueItemsEBooleanParserRuleCall_2_0() { return cUniqueItemsEBooleanParserRuleCall_2_0; }
	}
	public class AnyOfSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.AnyOfSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnyOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnyOfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnyOfSchemaArrayParserRuleCall_2_0 = (RuleCall)cAnyOfAssignment_2.eContents().get(0);
		
		////	uniqueItems?='uniqueItems'
		////	'UniqueItemsSchemaDefinition'
		////	;
		//AnyOfSchemaDefinition:
		//	'"anyOf"' ':' anyOf=SchemaArray;
		@Override public ParserRule getRule() { return rule; }
		
		//'"anyOf"' ':' anyOf=SchemaArray
		public Group getGroup() { return cGroup; }
		
		//'"anyOf"'
		public Keyword getAnyOfKeyword_0() { return cAnyOfKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//anyOf=SchemaArray
		public Assignment getAnyOfAssignment_2() { return cAnyOfAssignment_2; }
		
		//SchemaArray
		public RuleCall getAnyOfSchemaArrayParserRuleCall_2_0() { return cAnyOfSchemaArrayParserRuleCall_2_0; }
	}
	public class TitleSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.TitleSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEStringParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		
		////	'AnyOfSchemaDefinition'
		////	'{'
		////		'anyOf' anyOf=SchemaArray
		////	'}';
		///**
		// * 	"title": {
		//		"type": "string"
		//	}
		// */ TitleSchemaDefinition:
		//	'"title"' ':' title=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'"title"' ':' title=EString
		public Group getGroup() { return cGroup; }
		
		//'"title"'
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//title=EString
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//EString
		public RuleCall getTitleEStringParserRuleCall_2_0() { return cTitleEStringParserRuleCall_2_0; }
	}
	public class ItemsSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.ItemsSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cItemsSchemaDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cItemsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cItemsAnyOf1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cItemsAnyOf1SchemaParserRuleCall_3_0 = (RuleCall)cItemsAnyOf1Assignment_3.eContents().get(0);
		private final Assignment cItemsAnyOf2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cItemsAnyOf2SchemaArrayParserRuleCall_4_0 = (RuleCall)cItemsAnyOf2Assignment_4.eContents().get(0);
		
		////	'TitleSchemaDefinition'
		////	'{'
		////		'title' title=EString
		////	'}';
		///**
		// * 	TODO validate that at least one of anyOf1 and anyOf2 must exist
		// * 	"items": {
		//		"anyOf": [
		//			{ "$ref": "#" },
		//			{ "$ref": "#/definitions/schemaArray" }
		//		],
		//		"default": true
		//	}
		// */ ItemsSchemaDefinition:
		//	{ItemsSchemaDefinition}
		//	'"items"' ':'
		//	itemsAnyOf1=Schema?
		//	itemsAnyOf2=SchemaArray?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ItemsSchemaDefinition} '"items"' ':' itemsAnyOf1=Schema? itemsAnyOf2=SchemaArray?
		public Group getGroup() { return cGroup; }
		
		//{ItemsSchemaDefinition}
		public Action getItemsSchemaDefinitionAction_0() { return cItemsSchemaDefinitionAction_0; }
		
		//'"items"'
		public Keyword getItemsKeyword_1() { return cItemsKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//itemsAnyOf1=Schema?
		public Assignment getItemsAnyOf1Assignment_3() { return cItemsAnyOf1Assignment_3; }
		
		//Schema
		public RuleCall getItemsAnyOf1SchemaParserRuleCall_3_0() { return cItemsAnyOf1SchemaParserRuleCall_3_0; }
		
		//itemsAnyOf2=SchemaArray?
		public Assignment getItemsAnyOf2Assignment_4() { return cItemsAnyOf2Assignment_4; }
		
		//SchemaArray
		public RuleCall getItemsAnyOf2SchemaArrayParserRuleCall_4_0() { return cItemsAnyOf2SchemaArrayParserRuleCall_4_0; }
	}
	public class DefaultSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.DefaultSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefaultAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefaultJsonDocumentParserRuleCall_2_0 = (RuleCall)cDefaultAssignment_2.eContents().get(0);
		
		////	{ItemsSchemaDefinition}
		////	'ItemsSchemaDefinition'
		////	'{'
		////		('itemsAnyOf1' itemsAnyOf1=Schema)?
		////		('itemsAnyOf2' itemsAnyOf2=SchemaArray)?
		////	'}';
		///**
		// * 	"default": true
		// */ DefaultSchemaDefinition:
		//	'"default"' ':' default=JsonDocument;
		@Override public ParserRule getRule() { return rule; }
		
		//'"default"' ':' default=JsonDocument
		public Group getGroup() { return cGroup; }
		
		//'"default"'
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//default=JsonDocument
		public Assignment getDefaultAssignment_2() { return cDefaultAssignment_2; }
		
		//JsonDocument
		public RuleCall getDefaultJsonDocumentParserRuleCall_2_0() { return cDefaultJsonDocumentParserRuleCall_2_0; }
	}
	public class ThenSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.ThenSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cThenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cThenSchemaParserRuleCall_2_0 = (RuleCall)cThenAssignment_2.eContents().get(0);
		
		////	{DefaultSchemaDefinition}
		////	'DefaultSchemaDefinition'
		////	'{'
		////		('default' default=JsonDocument)?
		////	'}';
		//ThenSchemaDefinition:
		//	'"then"' ':' then=Schema;
		@Override public ParserRule getRule() { return rule; }
		
		//'"then"' ':' then=Schema
		public Group getGroup() { return cGroup; }
		
		//'"then"'
		public Keyword getThenKeyword_0() { return cThenKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//then=Schema
		public Assignment getThenAssignment_2() { return cThenAssignment_2; }
		
		//Schema
		public RuleCall getThenSchemaParserRuleCall_2_0() { return cThenSchemaParserRuleCall_2_0; }
	}
	public class MinLengthSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.MinLengthSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinLengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMinLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMinLengthNonNegativeIntegerDefault0ParserRuleCall_2_0 = (RuleCall)cMinLengthAssignment_2.eContents().get(0);
		
		////	'ThenSchemaDefinition'
		////	'{'
		////		'then' then=Schema
		////	'}';
		///**
		// * "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefault0" }
		// */ MinLengthSchemaDefinition:
		//	'"minLength"' ':' minLength=NonNegativeIntegerDefault0;
		@Override public ParserRule getRule() { return rule; }
		
		//'"minLength"' ':' minLength=NonNegativeIntegerDefault0
		public Group getGroup() { return cGroup; }
		
		//'"minLength"'
		public Keyword getMinLengthKeyword_0() { return cMinLengthKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//minLength=NonNegativeIntegerDefault0
		public Assignment getMinLengthAssignment_2() { return cMinLengthAssignment_2; }
		
		//NonNegativeIntegerDefault0
		public RuleCall getMinLengthNonNegativeIntegerDefault0ParserRuleCall_2_0() { return cMinLengthNonNegativeIntegerDefault0ParserRuleCall_2_0; }
	}
	public class DefinitionsSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.DefinitionsSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefinitionsSchemaDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefinitionsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cKeySchemaPairsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cKeySchemaPairsKeySchemaPairParserRuleCall_4_0_0 = (RuleCall)cKeySchemaPairsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cKeySchemaPairsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cKeySchemaPairsKeySchemaPairParserRuleCall_4_1_1_0 = (RuleCall)cKeySchemaPairsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////	'MinLengthSchemaDefinition'
		////	'{'
		////		'minLength' minLength=NonNegativeIntegerDefault0
		////	'}';
		//DefinitionsSchemaDefinition:
		//	{DefinitionsSchemaDefinition}
		//	'"definitions"' ':'
		//	'{' (keySchemaPairs+=KeySchemaPair ("," keySchemaPairs+=KeySchemaPair)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DefinitionsSchemaDefinition} '"definitions"' ':' '{' (keySchemaPairs+=KeySchemaPair (","
		//keySchemaPairs+=KeySchemaPair)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{DefinitionsSchemaDefinition}
		public Action getDefinitionsSchemaDefinitionAction_0() { return cDefinitionsSchemaDefinitionAction_0; }
		
		//'"definitions"'
		public Keyword getDefinitionsKeyword_1() { return cDefinitionsKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(keySchemaPairs+=KeySchemaPair ("," keySchemaPairs+=KeySchemaPair)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//keySchemaPairs+=KeySchemaPair
		public Assignment getKeySchemaPairsAssignment_4_0() { return cKeySchemaPairsAssignment_4_0; }
		
		//KeySchemaPair
		public RuleCall getKeySchemaPairsKeySchemaPairParserRuleCall_4_0_0() { return cKeySchemaPairsKeySchemaPairParserRuleCall_4_0_0; }
		
		//("," keySchemaPairs+=KeySchemaPair)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//keySchemaPairs+=KeySchemaPair
		public Assignment getKeySchemaPairsAssignment_4_1_1() { return cKeySchemaPairsAssignment_4_1_1; }
		
		//KeySchemaPair
		public RuleCall getKeySchemaPairsKeySchemaPairParserRuleCall_4_1_1_0() { return cKeySchemaPairsKeySchemaPairParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MinItemsSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.MinItemsSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinItemsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMinItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMinItemsNonNegativeIntegerDefault0ParserRuleCall_2_0 = (RuleCall)cMinItemsAssignment_2.eContents().get(0);
		
		////	{DefinitionsSchemaDefinition}
		////	'DefinitionsSchemaDefinition'
		////	'{'
		////		('keySchemaPairs' '{' keySchemaPairs+=KeySchemaPair ( "," keySchemaPairs+=KeySchemaPair)* '}' )?
		////	'}';
		///**
		// * "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" }
		// */ MinItemsSchemaDefinition:
		//	'"minItems"' ':' minItems=NonNegativeIntegerDefault0;
		@Override public ParserRule getRule() { return rule; }
		
		//'"minItems"' ':' minItems=NonNegativeIntegerDefault0
		public Group getGroup() { return cGroup; }
		
		//'"minItems"'
		public Keyword getMinItemsKeyword_0() { return cMinItemsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//minItems=NonNegativeIntegerDefault0
		public Assignment getMinItemsAssignment_2() { return cMinItemsAssignment_2; }
		
		//NonNegativeIntegerDefault0
		public RuleCall getMinItemsNonNegativeIntegerDefault0ParserRuleCall_2_0() { return cMinItemsNonNegativeIntegerDefault0ParserRuleCall_2_0; }
	}
	public class OneOfSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.OneOfSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOneOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOneOfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOneOfSchemaArrayParserRuleCall_2_0 = (RuleCall)cOneOfAssignment_2.eContents().get(0);
		
		////	'MinItemsSchemaDefinition'
		////	'{'
		////		'minItems' minItems=NonNegativeIntegerDefault0
		////	'}';
		//OneOfSchemaDefinition:
		//	'"oneOf"' ':' oneOf=SchemaArray;
		@Override public ParserRule getRule() { return rule; }
		
		//'"oneOf"' ':' oneOf=SchemaArray
		public Group getGroup() { return cGroup; }
		
		//'"oneOf"'
		public Keyword getOneOfKeyword_0() { return cOneOfKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//oneOf=SchemaArray
		public Assignment getOneOfAssignment_2() { return cOneOfAssignment_2; }
		
		//SchemaArray
		public RuleCall getOneOfSchemaArrayParserRuleCall_2_0() { return cOneOfSchemaArrayParserRuleCall_2_0; }
	}
	public class MaxPropertiesSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.MaxPropertiesSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxPropertiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMaxPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMaxPropertiesNonNegativeIntegerParserRuleCall_2_0 = (RuleCall)cMaxPropertiesAssignment_2.eContents().get(0);
		
		////	'OneOfSchemaDefinition'
		////	'{'
		////		'oneOf' oneOf=SchemaArray
		////	'}';
		///**
		// * "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" }
		// */ MaxPropertiesSchemaDefinition:
		//	'"maxProperties"' ':' maxProperties=NonNegativeInteger;
		@Override public ParserRule getRule() { return rule; }
		
		//'"maxProperties"' ':' maxProperties=NonNegativeInteger
		public Group getGroup() { return cGroup; }
		
		//'"maxProperties"'
		public Keyword getMaxPropertiesKeyword_0() { return cMaxPropertiesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//maxProperties=NonNegativeInteger
		public Assignment getMaxPropertiesAssignment_2() { return cMaxPropertiesAssignment_2; }
		
		//NonNegativeInteger
		public RuleCall getMaxPropertiesNonNegativeIntegerParserRuleCall_2_0() { return cMaxPropertiesNonNegativeIntegerParserRuleCall_2_0; }
	}
	public class MinimumSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.MinimumSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinimumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMinimumAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMinimumEDoubleParserRuleCall_2_0 = (RuleCall)cMinimumAssignment_2.eContents().get(0);
		
		////	'MaxPropertiesSchemaDefinition'
		////	'{'
		////		'maxProperties' maxProperties=NonNegativeInteger
		////	'}';
		//MinimumSchemaDefinition:
		//	'"minimum"' ':' minimum=EDouble;
		@Override public ParserRule getRule() { return rule; }
		
		//'"minimum"' ':' minimum=EDouble
		public Group getGroup() { return cGroup; }
		
		//'"minimum"'
		public Keyword getMinimumKeyword_0() { return cMinimumKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//minimum=EDouble
		public Assignment getMinimumAssignment_2() { return cMinimumAssignment_2; }
		
		//EDouble
		public RuleCall getMinimumEDoubleParserRuleCall_2_0() { return cMinimumEDoubleParserRuleCall_2_0; }
	}
	public class MaxItemsSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.MaxItemsSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxItemsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMaxItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMaxItemsNonNegativeIntegerParserRuleCall_2_0 = (RuleCall)cMaxItemsAssignment_2.eContents().get(0);
		
		////	'MinimumSchemaDefinition'
		////	'{'
		////		'minimum' minimum=EDouble
		////	'}';
		///**
		// * "maxItems": { "$ref": "#/definitions/nonNegativeInteger" }
		// */ MaxItemsSchemaDefinition:
		//	'"maxItems"' ':' maxItems=NonNegativeInteger;
		@Override public ParserRule getRule() { return rule; }
		
		//'"maxItems"' ':' maxItems=NonNegativeInteger
		public Group getGroup() { return cGroup; }
		
		//'"maxItems"'
		public Keyword getMaxItemsKeyword_0() { return cMaxItemsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//maxItems=NonNegativeInteger
		public Assignment getMaxItemsAssignment_2() { return cMaxItemsAssignment_2; }
		
		//NonNegativeInteger
		public RuleCall getMaxItemsNonNegativeIntegerParserRuleCall_2_0() { return cMaxItemsNonNegativeIntegerParserRuleCall_2_0; }
	}
	public class FormatSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.FormatSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFormatAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormatEStringParserRuleCall_2_0 = (RuleCall)cFormatAssignment_2.eContents().get(0);
		
		////	'MaxItemsSchemaDefinition'
		////	'{'
		////		'maxItems' maxItems=NonNegativeInteger
		////	'}';
		//FormatSchemaDefinition:
		//	'"format"' ':' format=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'"format"' ':' format=EString
		public Group getGroup() { return cGroup; }
		
		//'"format"'
		public Keyword getFormatKeyword_0() { return cFormatKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//format=EString
		public Assignment getFormatAssignment_2() { return cFormatAssignment_2; }
		
		//EString
		public RuleCall getFormatEStringParserRuleCall_2_0() { return cFormatEStringParserRuleCall_2_0; }
	}
	public class ReadOnlySchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.ReadOnlySchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadOnlyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReadOnlyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReadOnlyEBooleanParserRuleCall_2_0 = (RuleCall)cReadOnlyAssignment_2.eContents().get(0);
		
		////	'FormatSchemaDefinition'
		////	'{'
		////		'format' format=EString
		////	'}';
		///**
		// * "readOnly": {
		//		"type": "boolean",
		//		"default": false
		//	}
		// */ ReadOnlySchemaDefinition:
		//	'"readOnly"' ':' readOnly=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//'"readOnly"' ':' readOnly=EBoolean
		public Group getGroup() { return cGroup; }
		
		//'"readOnly"'
		public Keyword getReadOnlyKeyword_0() { return cReadOnlyKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//readOnly=EBoolean
		public Assignment getReadOnlyAssignment_2() { return cReadOnlyAssignment_2; }
		
		//EBoolean
		public RuleCall getReadOnlyEBooleanParserRuleCall_2_0() { return cReadOnlyEBooleanParserRuleCall_2_0; }
	}
	public class TypeSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.TypeSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeSchemaDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAnyOf1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeAnyOf1SimpleTypesEnumRuleCall_3_0 = (RuleCall)cTypeAnyOf1Assignment_3.eContents().get(0);
		private final Assignment cTypesAnyOf2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypesAnyOf2TypesAnyOf2ParserRuleCall_4_0 = (RuleCall)cTypesAnyOf2Assignment_4.eContents().get(0);
		
		////	readOnly?='readOnly'
		////	'ReadOnlySchemaDefinition'
		////	;
		///**
		// * TODO validate that at the least on of anyOf1 and anyOf2 must exist
		// * 	"type": {
		//		"anyOf": [
		//			{ "$ref": "#/definitions/simpleTypes" },
		//			{
		//				"type": "array",
		//				"items": { "$ref": "#/definitions/simpleTypes" },
		//				"minItems": 1,
		//				"uniqueItems": true
		//			}
		//		]
		//	}
		// */ TypeSchemaDefinition:
		//	{TypeSchemaDefinition}
		//	'"type"' ':'
		//	typeAnyOf1=SimpleTypes?
		//	typesAnyOf2=TypesAnyOf2?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeSchemaDefinition} '"type"' ':' typeAnyOf1=SimpleTypes? typesAnyOf2=TypesAnyOf2?
		public Group getGroup() { return cGroup; }
		
		//{TypeSchemaDefinition}
		public Action getTypeSchemaDefinitionAction_0() { return cTypeSchemaDefinitionAction_0; }
		
		//'"type"'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//typeAnyOf1=SimpleTypes?
		public Assignment getTypeAnyOf1Assignment_3() { return cTypeAnyOf1Assignment_3; }
		
		//SimpleTypes
		public RuleCall getTypeAnyOf1SimpleTypesEnumRuleCall_3_0() { return cTypeAnyOf1SimpleTypesEnumRuleCall_3_0; }
		
		//typesAnyOf2=TypesAnyOf2?
		public Assignment getTypesAnyOf2Assignment_4() { return cTypesAnyOf2Assignment_4; }
		
		//TypesAnyOf2
		public RuleCall getTypesAnyOf2TypesAnyOf2ParserRuleCall_4_0() { return cTypesAnyOf2TypesAnyOf2ParserRuleCall_4_0; }
	}
	public class AdditionalPropertiesSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.AdditionalPropertiesSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAdditionalPropertiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAdditionalPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAdditionalPropertiesSchemaParserRuleCall_2_0 = (RuleCall)cAdditionalPropertiesAssignment_2.eContents().get(0);
		
		////	{TypeSchemaDefinition}
		////	'TypeSchemaDefinition'
		////	'{'
		////		('typeAnyOf1' typeAnyOf1=SimpleTypes)?
		////		('typesAnyOf2' typesAnyOf2=TypesAnyOf2)?
		////	'}';
		//AdditionalPropertiesSchemaDefinition:
		//	'"additionalProperties"' ':' additionalProperties=Schema;
		@Override public ParserRule getRule() { return rule; }
		
		//'"additionalProperties"' ':' additionalProperties=Schema
		public Group getGroup() { return cGroup; }
		
		//'"additionalProperties"'
		public Keyword getAdditionalPropertiesKeyword_0() { return cAdditionalPropertiesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//additionalProperties=Schema
		public Assignment getAdditionalPropertiesAssignment_2() { return cAdditionalPropertiesAssignment_2; }
		
		//Schema
		public RuleCall getAdditionalPropertiesSchemaParserRuleCall_2_0() { return cAdditionalPropertiesSchemaParserRuleCall_2_0; }
	}
	public class ElseSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.ElseSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElseSchemaParserRuleCall_2_0 = (RuleCall)cElseAssignment_2.eContents().get(0);
		
		////	'AdditionalPropertiesSchemaDefinition'
		////	'{'
		////		'additionalProperties' additionalProperties=Schema
		////	'}';
		//ElseSchemaDefinition:
		//	'"else"' ':' else=Schema;
		@Override public ParserRule getRule() { return rule; }
		
		//'"else"' ':' else=Schema
		public Group getGroup() { return cGroup; }
		
		//'"else"'
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//else=Schema
		public Assignment getElseAssignment_2() { return cElseAssignment_2; }
		
		//Schema
		public RuleCall getElseSchemaParserRuleCall_2_0() { return cElseSchemaParserRuleCall_2_0; }
	}
	public class IdSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.IdSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdEStringParserRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		
		////	'ElseSchemaDefinition'
		////	'{'
		////		'else' else=Schema
		////	'}';
		///**
		// * TODO validate "format": "uri-reference"
		// * 		"$id": {
		//            "type": "string",
		//            "format": "uri-reference"
		//        }
		// */ IdSchemaDefinition:
		//	'"$id"' ':' id=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'"$id"' ':' id=EString
		public Group getGroup() { return cGroup; }
		
		//'"$id"'
		public Keyword getIdKeyword_0() { return cIdKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//id=EString
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//EString
		public RuleCall getIdEStringParserRuleCall_2_0() { return cIdEStringParserRuleCall_2_0; }
	}
	public class ConstSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.ConstSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstJsonDocumentParserRuleCall_2_0 = (RuleCall)cConstAssignment_2.eContents().get(0);
		
		////	'IdSchemaDefinition'
		////	'{'
		////		'id' id=EString
		////	'}';
		///**
		// * "const": true
		// */ ConstSchemaDefinition:
		//	'"const"' ':' const=JsonDocument;
		@Override public ParserRule getRule() { return rule; }
		
		//'"const"' ':' const=JsonDocument
		public Group getGroup() { return cGroup; }
		
		//'"const"'
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//const=JsonDocument
		public Assignment getConstAssignment_2() { return cConstAssignment_2; }
		
		//JsonDocument
		public RuleCall getConstJsonDocumentParserRuleCall_2_0() { return cConstJsonDocumentParserRuleCall_2_0; }
	}
	public class DependenciesSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.DependenciesSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDependenciesSchemaDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDependenciesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cDependenciesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cDependenciesDependenciesAnyOfParserRuleCall_4_0_0 = (RuleCall)cDependenciesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cDependenciesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cDependenciesDependenciesAnyOfParserRuleCall_4_1_1_0 = (RuleCall)cDependenciesAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////	{ConstSchemaDefinition}
		////	'ConstSchemaDefinition'
		////	'{'
		////		('const' const=JsonDocument)?
		////	'}';
		//DependenciesSchemaDefinition:
		//	{DependenciesSchemaDefinition}
		//	'"dependencies"' ':'
		//	'{' (dependencies+=DependenciesAnyOf ("," dependencies+=DependenciesAnyOf)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DependenciesSchemaDefinition} '"dependencies"' ':' '{' (dependencies+=DependenciesAnyOf (","
		//dependencies+=DependenciesAnyOf)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{DependenciesSchemaDefinition}
		public Action getDependenciesSchemaDefinitionAction_0() { return cDependenciesSchemaDefinitionAction_0; }
		
		//'"dependencies"'
		public Keyword getDependenciesKeyword_1() { return cDependenciesKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(dependencies+=DependenciesAnyOf ("," dependencies+=DependenciesAnyOf)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//dependencies+=DependenciesAnyOf
		public Assignment getDependenciesAssignment_4_0() { return cDependenciesAssignment_4_0; }
		
		//DependenciesAnyOf
		public RuleCall getDependenciesDependenciesAnyOfParserRuleCall_4_0_0() { return cDependenciesDependenciesAnyOfParserRuleCall_4_0_0; }
		
		//("," dependencies+=DependenciesAnyOf)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//dependencies+=DependenciesAnyOf
		public Assignment getDependenciesAssignment_4_1_1() { return cDependenciesAssignment_4_1_1; }
		
		//DependenciesAnyOf
		public RuleCall getDependenciesDependenciesAnyOfParserRuleCall_4_1_1_0() { return cDependenciesDependenciesAnyOfParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class RequiredSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.RequiredSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiredKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRequiredAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequiredStringArrayParserRuleCall_2_0 = (RuleCall)cRequiredAssignment_2.eContents().get(0);
		
		////	{DependenciesSchemaDefinition}
		////	'DependenciesSchemaDefinition'
		////	'{'
		////		('dependencies' '{' dependencies+=DependenciesAnyOf ( "," dependencies+=DependenciesAnyOf)* '}' )?
		////	'}';
		///*
		// * TODO in ecore put RequiredSchemaDefinition.required has to be [1..1]
		// */ RequiredSchemaDefinition:
		//	'"required"' ':' required=StringArray;
		@Override public ParserRule getRule() { return rule; }
		
		//'"required"' ':' required=StringArray
		public Group getGroup() { return cGroup; }
		
		//'"required"'
		public Keyword getRequiredKeyword_0() { return cRequiredKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//required=StringArray
		public Assignment getRequiredAssignment_2() { return cRequiredAssignment_2; }
		
		//StringArray
		public RuleCall getRequiredStringArrayParserRuleCall_2_0() { return cRequiredStringArrayParserRuleCall_2_0; }
	}
	public class DescriptionSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.DescriptionSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionEStringParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		////	{RequiredSchemaDefinition}
		////	'RequiredSchemaDefinition'
		////	'{'
		////		('required' required=StringArray)?
		////	'}';
		///**
		// * "description": {
		//		"type": "string"
		//	}
		// */ DescriptionSchemaDefinition:
		//	'"description"' ':' description=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'"description"' ':' description=EString
		public Group getGroup() { return cGroup; }
		
		//'"description"'
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//description=EString
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_2_0() { return cDescriptionEStringParserRuleCall_2_0; }
	}
	public class MinPropertiesSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.MinPropertiesSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinPropertiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMinPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMinPropertiesNonNegativeIntegerDefault0ParserRuleCall_2_0 = (RuleCall)cMinPropertiesAssignment_2.eContents().get(0);
		
		////	'DescriptionSchemaDefinition'
		////	'{'
		////		'description' description=EString
		////	'}';
		///**
		// * "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" }
		// */ MinPropertiesSchemaDefinition:
		//	'"minProperties"' ':' minProperties=NonNegativeIntegerDefault0;
		@Override public ParserRule getRule() { return rule; }
		
		//'"minProperties"' ':' minProperties=NonNegativeIntegerDefault0
		public Group getGroup() { return cGroup; }
		
		//'"minProperties"'
		public Keyword getMinPropertiesKeyword_0() { return cMinPropertiesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//minProperties=NonNegativeIntegerDefault0
		public Assignment getMinPropertiesAssignment_2() { return cMinPropertiesAssignment_2; }
		
		//NonNegativeIntegerDefault0
		public RuleCall getMinPropertiesNonNegativeIntegerDefault0ParserRuleCall_2_0() { return cMinPropertiesNonNegativeIntegerDefault0ParserRuleCall_2_0; }
	}
	public class PatternPropertiesSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.PatternPropertiesSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPatternPropertiesSchemaDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPatternPropertiesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cKeySchemaPairsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cKeySchemaPairsKeySchemaPairParserRuleCall_4_0_0 = (RuleCall)cKeySchemaPairsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cKeySchemaPairsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cKeySchemaPairsKeySchemaPairParserRuleCall_4_1_1_0 = (RuleCall)cKeySchemaPairsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////	'MinPropertiesSchemaDefinition'
		////	'{'
		////		'minProperties' minProperties=NonNegativeIntegerDefault0
		////	'}';
		///**
		// * TODO validate "propertyNames": { "format": "regex" }
		// * 	"patternProperties": {
		//		"type": "object",
		//		"additionalProperties": { "$ref": "#" },
		//		"propertyNames": { "format": "regex" },
		//		"default": {}
		//	}
		// */ PatternPropertiesSchemaDefinition:
		//	{PatternPropertiesSchemaDefinition}
		//	'"patternProperties"' ':'
		//	'{' (keySchemaPairs+=KeySchemaPair ("," keySchemaPairs+=KeySchemaPair)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{PatternPropertiesSchemaDefinition} '"patternProperties"' ':' '{' (keySchemaPairs+=KeySchemaPair (","
		//keySchemaPairs+=KeySchemaPair)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{PatternPropertiesSchemaDefinition}
		public Action getPatternPropertiesSchemaDefinitionAction_0() { return cPatternPropertiesSchemaDefinitionAction_0; }
		
		//'"patternProperties"'
		public Keyword getPatternPropertiesKeyword_1() { return cPatternPropertiesKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(keySchemaPairs+=KeySchemaPair ("," keySchemaPairs+=KeySchemaPair)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//keySchemaPairs+=KeySchemaPair
		public Assignment getKeySchemaPairsAssignment_4_0() { return cKeySchemaPairsAssignment_4_0; }
		
		//KeySchemaPair
		public RuleCall getKeySchemaPairsKeySchemaPairParserRuleCall_4_0_0() { return cKeySchemaPairsKeySchemaPairParserRuleCall_4_0_0; }
		
		//("," keySchemaPairs+=KeySchemaPair)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//keySchemaPairs+=KeySchemaPair
		public Assignment getKeySchemaPairsAssignment_4_1_1() { return cKeySchemaPairsAssignment_4_1_1; }
		
		//KeySchemaPair
		public RuleCall getKeySchemaPairsKeySchemaPairParserRuleCall_4_1_1_0() { return cKeySchemaPairsKeySchemaPairParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AdditionalItemsSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.AdditionalItemsSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAdditionalItemsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAdditionalItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAdditionalItemsSchemaParserRuleCall_2_0 = (RuleCall)cAdditionalItemsAssignment_2.eContents().get(0);
		
		////	{PatternPropertiesSchemaDefinition}
		////	'PatternPropertiesSchemaDefinition'
		////	'{'
		////		('keySchemaPairs' '{' keySchemaPairs+=KeySchemaPair ( "," keySchemaPairs+=KeySchemaPair)* '}' )?
		////	'}';
		//AdditionalItemsSchemaDefinition:
		//	'"additionalItems"' ':' additionalItems=Schema;
		@Override public ParserRule getRule() { return rule; }
		
		//'"additionalItems"' ':' additionalItems=Schema
		public Group getGroup() { return cGroup; }
		
		//'"additionalItems"'
		public Keyword getAdditionalItemsKeyword_0() { return cAdditionalItemsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//additionalItems=Schema
		public Assignment getAdditionalItemsAssignment_2() { return cAdditionalItemsAssignment_2; }
		
		//Schema
		public RuleCall getAdditionalItemsSchemaParserRuleCall_2_0() { return cAdditionalItemsSchemaParserRuleCall_2_0; }
	}
	public class KeyValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.KeyValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		////	'AdditionalItemsSchemaDefinition'
		////	'{'
		////		'additionalItems' additionalItems=Schema
		////	'}';
		//KeyValuePair:
		//	key=STRING //EString 
		//	':' value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//key=STRING //EString 
		//':' value=Value
		public Group getGroup() { return cGroup; }
		
		//key=STRING
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0() { return cKeySTRINGTerminalRuleCall_0_0; }
		
		////EString 
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class ExamplesSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.ExamplesSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExamplesSchemaDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExamplesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cExamplesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cExamplesJsonDocumentParserRuleCall_4_0_0 = (RuleCall)cExamplesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cExamplesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cExamplesJsonDocumentParserRuleCall_4_1_1_0 = (RuleCall)cExamplesAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////	{KeyValuePair}
		////	'KeyValuePair'
		////	'{'
		////		('key' key=EString)?
		////		('value' value=Value)?
		////	'}';
		///**
		// * 	"examples": {
		//		"type": "array",
		//		"items": true
		//	}
		// */ ExamplesSchemaDefinition:
		//	{ExamplesSchemaDefinition}
		//	'"examples"' ':' '[' (examples+=JsonDocument ("," examples+=JsonDocument)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{ExamplesSchemaDefinition} '"examples"' ':' '[' (examples+=JsonDocument ("," examples+=JsonDocument)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{ExamplesSchemaDefinition}
		public Action getExamplesSchemaDefinitionAction_0() { return cExamplesSchemaDefinitionAction_0; }
		
		//'"examples"'
		public Keyword getExamplesKeyword_1() { return cExamplesKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//(examples+=JsonDocument ("," examples+=JsonDocument)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//examples+=JsonDocument
		public Assignment getExamplesAssignment_4_0() { return cExamplesAssignment_4_0; }
		
		//JsonDocument
		public RuleCall getExamplesJsonDocumentParserRuleCall_4_0_0() { return cExamplesJsonDocumentParserRuleCall_4_0_0; }
		
		//("," examples+=JsonDocument)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//examples+=JsonDocument
		public Assignment getExamplesAssignment_4_1_1() { return cExamplesAssignment_4_1_1; }
		
		//JsonDocument
		public RuleCall getExamplesJsonDocumentParserRuleCall_4_1_1_0() { return cExamplesJsonDocumentParserRuleCall_4_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class IfSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.IfSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfSchemaParserRuleCall_2_0 = (RuleCall)cIfAssignment_2.eContents().get(0);
		
		////	{ExamplesSchemaDefinition}
		////	'ExamplesSchemaDefinition'
		////	'{'
		////		('examples' '{' examples+=JsonDocument ( "," examples+=JsonDocument)* '}' )?
		////	'}';
		//IfSchemaDefinition:
		//	'"if"' ':' if=Schema;
		@Override public ParserRule getRule() { return rule; }
		
		//'"if"' ':' if=Schema
		public Group getGroup() { return cGroup; }
		
		//'"if"'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//if=Schema
		public Assignment getIfAssignment_2() { return cIfAssignment_2; }
		
		//Schema
		public RuleCall getIfSchemaParserRuleCall_2_0() { return cIfSchemaParserRuleCall_2_0; }
	}
	public class AllOfSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.AllOfSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAllOfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAllOfSchemaArrayParserRuleCall_2_0 = (RuleCall)cAllOfAssignment_2.eContents().get(0);
		
		////	'IfSchemaDefinition'
		////	'{'
		////		'if' if=Schema
		////	'}';
		//AllOfSchemaDefinition:
		//	'"allOf"' ':' allOf=SchemaArray;
		@Override public ParserRule getRule() { return rule; }
		
		//'"allOf"' ':' allOf=SchemaArray
		public Group getGroup() { return cGroup; }
		
		//'"allOf"'
		public Keyword getAllOfKeyword_0() { return cAllOfKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//allOf=SchemaArray
		public Assignment getAllOfAssignment_2() { return cAllOfAssignment_2; }
		
		//SchemaArray
		public RuleCall getAllOfSchemaArrayParserRuleCall_2_0() { return cAllOfSchemaArrayParserRuleCall_2_0; }
	}
	public class ContentEncodingSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.ContentEncodingSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContentEncodingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentEncodingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentEncodingEStringParserRuleCall_2_0 = (RuleCall)cContentEncodingAssignment_2.eContents().get(0);
		
		////	'AllOfSchemaDefinition'
		////	'{'
		////		'allOf' allOf=SchemaArray
		////	'}';
		//ContentEncodingSchemaDefinition:
		//	'"contentEncoding"' ':' contentEncoding=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'"contentEncoding"' ':' contentEncoding=EString
		public Group getGroup() { return cGroup; }
		
		//'"contentEncoding"'
		public Keyword getContentEncodingKeyword_0() { return cContentEncodingKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//contentEncoding=EString
		public Assignment getContentEncodingAssignment_2() { return cContentEncodingAssignment_2; }
		
		//EString
		public RuleCall getContentEncodingEStringParserRuleCall_2_0() { return cContentEncodingEStringParserRuleCall_2_0; }
	}
	public class MultipleOfSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.MultipleOfSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultipleOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMultipleOfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMultipleOfEDoubleParserRuleCall_2_0 = (RuleCall)cMultipleOfAssignment_2.eContents().get(0);
		
		////	'ContentEncodingSchemaDefinition'
		////	'{'
		////		'contentEncoding' contentEncoding=EString
		////	'}';
		//MultipleOfSchemaDefinition:
		//	'"multipleOf"' ':' multipleOf=EDouble;
		@Override public ParserRule getRule() { return rule; }
		
		//'"multipleOf"' ':' multipleOf=EDouble
		public Group getGroup() { return cGroup; }
		
		//'"multipleOf"'
		public Keyword getMultipleOfKeyword_0() { return cMultipleOfKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//multipleOf=EDouble
		public Assignment getMultipleOfAssignment_2() { return cMultipleOfAssignment_2; }
		
		//EDouble
		public RuleCall getMultipleOfEDoubleParserRuleCall_2_0() { return cMultipleOfEDoubleParserRuleCall_2_0; }
	}
	public class PatternSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.PatternSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternEStringParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		
		////	'MultipleOfSchemaDefinition'
		////	'{'
		////		'multipleOf' multipleOf=EDouble
		////	'}';
		///**
		// * TODO validate "format": "regex"
		//	"pattern": {
		//   		"type": "string",
		//		"format": "regex"
		//	}
		// */ PatternSchemaDefinition:
		//	'"pattern"' ':' pattern=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'"pattern"' ':' pattern=EString
		public Group getGroup() { return cGroup; }
		
		//'"pattern"'
		public Keyword getPatternKeyword_0() { return cPatternKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//pattern=EString
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }
		
		//EString
		public RuleCall getPatternEStringParserRuleCall_2_0() { return cPatternEStringParserRuleCall_2_0; }
	}
	public class ContainsSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.ContainsSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContainsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContainsSchemaParserRuleCall_2_0 = (RuleCall)cContainsAssignment_2.eContents().get(0);
		
		////	'PatternSchemaDefinition'
		////	'{'
		////		'pattern' pattern=EString
		////	'}';
		//ContainsSchemaDefinition:
		//	'"contains"' ':' contains=Schema;
		@Override public ParserRule getRule() { return rule; }
		
		//'"contains"' ':' contains=Schema
		public Group getGroup() { return cGroup; }
		
		//'"contains"'
		public Keyword getContainsKeyword_0() { return cContainsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//contains=Schema
		public Assignment getContainsAssignment_2() { return cContainsAssignment_2; }
		
		//Schema
		public RuleCall getContainsSchemaParserRuleCall_2_0() { return cContainsSchemaParserRuleCall_2_0; }
	}
	public class NotSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.NotSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNotAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNotSchemaParserRuleCall_2_0 = (RuleCall)cNotAssignment_2.eContents().get(0);
		
		////	'ContainsSchemaDefinition'
		////	'{'
		////		'contains' contains=Schema
		////	'}';
		//NotSchemaDefinition:
		//	'"not"' ':' not=Schema;
		@Override public ParserRule getRule() { return rule; }
		
		//'"not"' ':' not=Schema
		public Group getGroup() { return cGroup; }
		
		//'"not"'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//not=Schema
		public Assignment getNotAssignment_2() { return cNotAssignment_2; }
		
		//Schema
		public RuleCall getNotSchemaParserRuleCall_2_0() { return cNotSchemaParserRuleCall_2_0; }
	}
	public class ExclusiveMaximumSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.ExclusiveMaximumSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclusiveMaximumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExclusiveMaximumAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExclusiveMaximumEDoubleParserRuleCall_2_0 = (RuleCall)cExclusiveMaximumAssignment_2.eContents().get(0);
		
		////	'NotSchemaDefinition'
		////	'{'
		////		'not' not=Schema
		////	'}';
		//ExclusiveMaximumSchemaDefinition:
		//	'"exclusiveMaximum"' ':' exclusiveMaximum=EDouble;
		@Override public ParserRule getRule() { return rule; }
		
		//'"exclusiveMaximum"' ':' exclusiveMaximum=EDouble
		public Group getGroup() { return cGroup; }
		
		//'"exclusiveMaximum"'
		public Keyword getExclusiveMaximumKeyword_0() { return cExclusiveMaximumKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//exclusiveMaximum=EDouble
		public Assignment getExclusiveMaximumAssignment_2() { return cExclusiveMaximumAssignment_2; }
		
		//EDouble
		public RuleCall getExclusiveMaximumEDoubleParserRuleCall_2_0() { return cExclusiveMaximumEDoubleParserRuleCall_2_0; }
	}
	public class MaxLengthSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.MaxLengthSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxLengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMaxLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMaxLengthNonNegativeIntegerParserRuleCall_2_0 = (RuleCall)cMaxLengthAssignment_2.eContents().get(0);
		
		////	'ExclusiveMaximumSchemaDefinition'
		////	'{'
		////		'exclusiveMaximum' exclusiveMaximum=EDouble
		////	'}';
		///**
		// * "maxLength": { "$ref": "#/definitions/nonNegativeInteger" }
		// */ MaxLengthSchemaDefinition:
		//	'"maxLength"' ':' maxLength=NonNegativeInteger;
		@Override public ParserRule getRule() { return rule; }
		
		//'"maxLength"' ':' maxLength=NonNegativeInteger
		public Group getGroup() { return cGroup; }
		
		//'"maxLength"'
		public Keyword getMaxLengthKeyword_0() { return cMaxLengthKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//maxLength=NonNegativeInteger
		public Assignment getMaxLengthAssignment_2() { return cMaxLengthAssignment_2; }
		
		//NonNegativeInteger
		public RuleCall getMaxLengthNonNegativeIntegerParserRuleCall_2_0() { return cMaxLengthNonNegativeIntegerParserRuleCall_2_0; }
	}
	public class RefSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.RefSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefEStringParserRuleCall_2_0 = (RuleCall)cRefAssignment_2.eContents().get(0);
		
		////	'MaxLengthSchemaDefinition'
		////	'{'
		////		'maxLength' maxLength=NonNegativeInteger
		////	'}';
		///**
		// * TODO validate "format": "uri-reference"
		// * 		"$ref": {
		//            "type": "string",
		//            "format": "uri-reference"
		//        }
		// * 
		// */ RefSchemaDefinition:
		//	'"$ref"' ':' ref=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'"$ref"' ':' ref=EString
		public Group getGroup() { return cGroup; }
		
		//'"$ref"'
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//ref=EString
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }
		
		//EString
		public RuleCall getRefEStringParserRuleCall_2_0() { return cRefEStringParserRuleCall_2_0; }
	}
	public class ContentMediaTypeSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.ContentMediaTypeSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContentMediaTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentMediaTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentMediaTypeEStringParserRuleCall_2_0 = (RuleCall)cContentMediaTypeAssignment_2.eContents().get(0);
		
		////	'RefSchemaDefinition'
		////	'{'
		////		'ref' ref=EString
		////	'}';
		//ContentMediaTypeSchemaDefinition:
		//	'"contentMediaType"' ':' contentMediaType=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'"contentMediaType"' ':' contentMediaType=EString
		public Group getGroup() { return cGroup; }
		
		//'"contentMediaType"'
		public Keyword getContentMediaTypeKeyword_0() { return cContentMediaTypeKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//contentMediaType=EString
		public Assignment getContentMediaTypeAssignment_2() { return cContentMediaTypeAssignment_2; }
		
		//EString
		public RuleCall getContentMediaTypeEStringParserRuleCall_2_0() { return cContentMediaTypeEStringParserRuleCall_2_0; }
	}
	public class ExclusiveMinimumSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.ExclusiveMinimumSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclusiveMinimumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExclusiveMinimumAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExclusiveMinimumEDoubleParserRuleCall_2_0 = (RuleCall)cExclusiveMinimumAssignment_2.eContents().get(0);
		
		////	'ContentMediaTypeSchemaDefinition'
		////	'{'
		////		'contentMediaType' contentMediaType=EString
		////	'}';
		//ExclusiveMinimumSchemaDefinition:
		//	'"exclusiveMinimum"' ':' exclusiveMinimum=EDouble;
		@Override public ParserRule getRule() { return rule; }
		
		//'"exclusiveMinimum"' ':' exclusiveMinimum=EDouble
		public Group getGroup() { return cGroup; }
		
		//'"exclusiveMinimum"'
		public Keyword getExclusiveMinimumKeyword_0() { return cExclusiveMinimumKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//exclusiveMinimum=EDouble
		public Assignment getExclusiveMinimumAssignment_2() { return cExclusiveMinimumAssignment_2; }
		
		//EDouble
		public RuleCall getExclusiveMinimumEDoubleParserRuleCall_2_0() { return cExclusiveMinimumEDoubleParserRuleCall_2_0; }
	}
	public class SchemaSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.SchemaSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSchemaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSchemaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSchemaEStringParserRuleCall_2_0 = (RuleCall)cSchemaAssignment_2.eContents().get(0);
		
		////	'ExclusiveMinimumSchemaDefinition'
		////	'{'
		////		'exclusiveMinimum' exclusiveMinimum=EDouble
		////	'}';
		///**
		// * TODO validate "format": "uri"
		// * 		"$schema": {
		//            "type": "string",
		//            "format": "uri"
		//        }
		// */ SchemaSchemaDefinition:
		//	'"$schema"' ':' schema=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'"$schema"' ':' schema=EString
		public Group getGroup() { return cGroup; }
		
		//'"$schema"'
		public Keyword getSchemaKeyword_0() { return cSchemaKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//schema=EString
		public Assignment getSchemaAssignment_2() { return cSchemaAssignment_2; }
		
		//EString
		public RuleCall getSchemaEStringParserRuleCall_2_0() { return cSchemaEStringParserRuleCall_2_0; }
	}
	public class PropertiesSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.PropertiesSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertiesSchemaDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPropertiesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cKeySchemaPairsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cKeySchemaPairsKeySchemaPairParserRuleCall_4_0_0 = (RuleCall)cKeySchemaPairsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cKeySchemaPairsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cKeySchemaPairsKeySchemaPairParserRuleCall_4_1_1_0 = (RuleCall)cKeySchemaPairsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////	'SchemaSchemaDefinition'
		////	'{'
		////		'schema' schema=EString
		////	'}';
		//PropertiesSchemaDefinition:
		//	{PropertiesSchemaDefinition}
		//	'"properties"' ':'
		//	'{' (keySchemaPairs+=KeySchemaPair ("," keySchemaPairs+=KeySchemaPair)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{PropertiesSchemaDefinition} '"properties"' ':' '{' (keySchemaPairs+=KeySchemaPair (","
		//keySchemaPairs+=KeySchemaPair)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{PropertiesSchemaDefinition}
		public Action getPropertiesSchemaDefinitionAction_0() { return cPropertiesSchemaDefinitionAction_0; }
		
		//'"properties"'
		public Keyword getPropertiesKeyword_1() { return cPropertiesKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(keySchemaPairs+=KeySchemaPair ("," keySchemaPairs+=KeySchemaPair)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//keySchemaPairs+=KeySchemaPair
		public Assignment getKeySchemaPairsAssignment_4_0() { return cKeySchemaPairsAssignment_4_0; }
		
		//KeySchemaPair
		public RuleCall getKeySchemaPairsKeySchemaPairParserRuleCall_4_0_0() { return cKeySchemaPairsKeySchemaPairParserRuleCall_4_0_0; }
		
		//("," keySchemaPairs+=KeySchemaPair)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//keySchemaPairs+=KeySchemaPair
		public Assignment getKeySchemaPairsAssignment_4_1_1() { return cKeySchemaPairsAssignment_4_1_1; }
		
		//KeySchemaPair
		public RuleCall getKeySchemaPairsKeySchemaPairParserRuleCall_4_1_1_0() { return cKeySchemaPairsKeySchemaPairParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PropertyNamesSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.PropertyNamesSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyNamesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyNamesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyNamesSchemaParserRuleCall_2_0 = (RuleCall)cPropertyNamesAssignment_2.eContents().get(0);
		
		////	{PropertiesSchemaDefinition}
		////	'PropertiesSchemaDefinition'
		////	'{'
		////		('keySchemaPairs' '{' keySchemaPairs+=KeySchemaPair ( "," keySchemaPairs+=KeySchemaPair)* '}' )?
		////	'}';
		//PropertyNamesSchemaDefinition:
		//	'"propertyNames"' ':' propertyNames=Schema;
		@Override public ParserRule getRule() { return rule; }
		
		//'"propertyNames"' ':' propertyNames=Schema
		public Group getGroup() { return cGroup; }
		
		//'"propertyNames"'
		public Keyword getPropertyNamesKeyword_0() { return cPropertyNamesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//propertyNames=Schema
		public Assignment getPropertyNamesAssignment_2() { return cPropertyNamesAssignment_2; }
		
		//Schema
		public RuleCall getPropertyNamesSchemaParserRuleCall_2_0() { return cPropertyNamesSchemaParserRuleCall_2_0; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.EDouble");
		private final RuleCall cJSON_NUMBERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EDouble ecore::EDouble:
		//	JSON_NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//JSON_NUMBER
		public RuleCall getJSON_NUMBERTerminalRuleCall() { return cJSON_NUMBERTerminalRuleCall; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.EString");
		private final RuleCall cVALID_STRINGParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EString:
		//	VALID_STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//VALID_STRING
		public RuleCall getVALID_STRINGParserRuleCall() { return cVALID_STRINGParserRuleCall; }
	}
	public class JsonDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.JsonDocument");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////	STRING | ID;
		///**
		// * TODO delete here and in ecore
		// */ //Enum returns Enum:
		////	'[' items+=JsonDocument ( "," items+=JsonDocument)* ']'
		////;
		////	{Enum}
		////	'Enum'
		////	'{'
		////		('items' '{' items+=JsonDocument ( "," items+=JsonDocument)* '}' )?
		////	'}';
		//JsonDocument:
		//	value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Value
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_0() { return cValueValueParserRuleCall_0; }
	}
	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.IntegerValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////	{JsonDocument}
		////	'JsonDocument'
		////	'{'
		////		('value' value=Value)?
		////	'}';
		///** TODO put Value as abstract in ecore
		//Value_Impl returns Value:
		//	{Value}
		//	'Value'
		//	;
		// */ IntegerValue:
		//	value=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EInt
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_0() { return cValueEIntParserRuleCall_0; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEBooleanParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////	'IntegerValue'
		////	'{'
		////		'value' value=EInt
		////	'}';
		//BooleanValue:
		//	value=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EBoolean
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_0() { return cValueEBooleanParserRuleCall_0; }
	}
	public class NullValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.NullValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////	value?='value'
		////	'BooleanValue'
		////	;
		//NullValue:
		//	{NullValue}
		//	'null';
		@Override public ParserRule getRule() { return rule; }
		
		//{NullValue} 'null'
		public Group getGroup() { return cGroup; }
		
		//{NullValue}
		public Action getNullValueAction_0() { return cNullValueAction_0; }
		
		//'null'
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueVALID_STRINGParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////	{NullValue}
		////	'NullValue'
		////	;
		//StringValue:
		//	value=VALID_STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=VALID_STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//VALID_STRING
		public RuleCall getValueVALID_STRINGParserRuleCall_0() { return cValueVALID_STRINGParserRuleCall_0; }
	}
	public class ObjectValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.ObjectValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cKeyvaluepairAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cKeyvaluepairKeyValuePairParserRuleCall_2_0_0 = (RuleCall)cKeyvaluepairAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cKeyvaluepairAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cKeyvaluepairKeyValuePairParserRuleCall_2_1_1_0 = (RuleCall)cKeyvaluepairAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////	'StringValue'
		////	'{'
		////		'value' value=EString
		////	'}';
		//ObjectValue:
		//	{ObjectValue}
		//	'{' (keyvaluepair+=KeyValuePair ("," keyvaluepair+=KeyValuePair)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ObjectValue} '{' (keyvaluepair+=KeyValuePair ("," keyvaluepair+=KeyValuePair)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{ObjectValue}
		public Action getObjectValueAction_0() { return cObjectValueAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(keyvaluepair+=KeyValuePair ("," keyvaluepair+=KeyValuePair)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//keyvaluepair+=KeyValuePair
		public Assignment getKeyvaluepairAssignment_2_0() { return cKeyvaluepairAssignment_2_0; }
		
		//KeyValuePair
		public RuleCall getKeyvaluepairKeyValuePairParserRuleCall_2_0_0() { return cKeyvaluepairKeyValuePairParserRuleCall_2_0_0; }
		
		//("," keyvaluepair+=KeyValuePair)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//keyvaluepair+=KeyValuePair
		public Assignment getKeyvaluepairAssignment_2_1_1() { return cKeyvaluepairAssignment_2_1_1; }
		
		//KeyValuePair
		public RuleCall getKeyvaluepairKeyValuePairParserRuleCall_2_1_1_0() { return cKeyvaluepairKeyValuePairParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class NumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.NumberValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////	{ObjectValue}
		////	'ObjectValue'
		////	'{'
		////		('keyvaluepair' '{' keyvaluepair+=KeyValuePair ( "," keyvaluepair+=KeyValuePair)* '}' )?
		////	'}';
		//NumberValue:
		//	value=EDouble;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EDouble
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_0() { return cValueEDoubleParserRuleCall_0; }
	}
	public class ArrayValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.ArrayValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValueValueParserRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_2_1_1_0 = (RuleCall)cValueAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////	'NumberValue'
		////	'{'
		////		'value' value=EDouble
		////	'}';
		//ArrayValue:
		//	{ArrayValue}
		//	'[' (value+=Value ("," value+=Value)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{ArrayValue} '[' (value+=Value ("," value+=Value)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{ArrayValue}
		public Action getArrayValueAction_0() { return cArrayValueAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(value+=Value ("," value+=Value)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//value+=Value
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0_0() { return cValueValueParserRuleCall_2_0_0; }
		
		//("," value+=Value)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//value+=Value
		public Assignment getValueAssignment_2_1_1() { return cValueAssignment_2_1_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_1_1_0() { return cValueValueParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////	{ArrayValue}
		////	'ArrayValue'
		////	'{'
		////		('value' '{' value+=Value ( "," value+=Value)* '}' )?
		////	'}';
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class SchemaArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.SchemaArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemsSchemaParserRuleCall_1_0 = (RuleCall)cItemsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cItemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cItemsSchemaParserRuleCall_2_1_0 = (RuleCall)cItemsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SchemaArray:
		//	'[' items+=Schema ("," items+=Schema)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' items+=Schema ("," items+=Schema)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//items+=Schema
		public Assignment getItemsAssignment_1() { return cItemsAssignment_1; }
		
		//Schema
		public RuleCall getItemsSchemaParserRuleCall_1_0() { return cItemsSchemaParserRuleCall_1_0; }
		
		//("," items+=Schema)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//items+=Schema
		public Assignment getItemsAssignment_2_1() { return cItemsAssignment_2_1; }
		
		//Schema
		public RuleCall getItemsSchemaParserRuleCall_2_1_0() { return cItemsSchemaParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class NonNegativeIntegerDefault0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.NonNegativeIntegerDefault0");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////	'SchemaArray'
		////	'{'
		////		'items' '{' items+=Schema ( "," items+=Schema)* '}' 
		////	'}';
		///**
		// * TODO put validation value >=0
		// * 	"nonNegativeIntegerDefault0": {
		//		"allOf": [
		//			{ "$ref": "#/definitions/nonNegativeInteger" },
		//			{ "default": 0 }
		//		]
		//	}
		// */ NonNegativeIntegerDefault0:
		//	value=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EInt
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_0() { return cValueEIntParserRuleCall_0; }
	}
	public class KeySchemaPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.KeySchemaPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyEStringParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSchemaParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		////	'NonNegativeIntegerDefault0'
		////	'{'
		////		'value' value=EInt
		////	'}';
		//KeySchemaPair:
		//	key=EString ':' value=Schema;
		@Override public ParserRule getRule() { return rule; }
		
		//key=EString ':' value=Schema
		public Group getGroup() { return cGroup; }
		
		//key=EString
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//EString
		public RuleCall getKeyEStringParserRuleCall_0_0() { return cKeyEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=Schema
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Schema
		public RuleCall getValueSchemaParserRuleCall_2_0() { return cValueSchemaParserRuleCall_2_0; }
	}
	public class NonNegativeIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.NonNegativeInteger");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////	'KeySchemaPair'
		////	'{'
		////		'key' key=EString
		////		'value' value=Schema
		////	'}';
		///**
		// * TODO put validation value >=0
		// * "nonNegativeInteger": {
		//		"type": "integer",
		//		"minimum": 0
		//	}
		// */ NonNegativeInteger:
		//	value=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EInt
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_0() { return cValueEIntParserRuleCall_0; }
	}
	public class TypesAnyOf2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.TypesAnyOf2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemsSimpleTypesEnumRuleCall_1_0 = (RuleCall)cItemsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cItemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cItemsSimpleTypesEnumRuleCall_2_1_0 = (RuleCall)cItemsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////	array = 'array' | boolean = 'boolean' | integer = 'integer' | null = 'null' | number = 'number' | object = 'object' | string = 'string';
		//TypesAnyOf2:
		//	'[' items+=SimpleTypes ("," items+=SimpleTypes)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' items+=SimpleTypes ("," items+=SimpleTypes)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//items+=SimpleTypes
		public Assignment getItemsAssignment_1() { return cItemsAssignment_1; }
		
		//SimpleTypes
		public RuleCall getItemsSimpleTypesEnumRuleCall_1_0() { return cItemsSimpleTypesEnumRuleCall_1_0; }
		
		//("," items+=SimpleTypes)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//items+=SimpleTypes
		public Assignment getItemsAssignment_2_1() { return cItemsAssignment_2_1; }
		
		//SimpleTypes
		public RuleCall getItemsSimpleTypesEnumRuleCall_2_1_0() { return cItemsSimpleTypesEnumRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class DependenciesAnyOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.DependenciesAnyOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDependenciesAnyOfAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDependenciesAnyOf2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDependenciesAnyOf2KeyStringArrayPairParserRuleCall_1_0 = (RuleCall)cDependenciesAnyOf2Assignment_1.eContents().get(0);
		private final Assignment cDependenciesAnyOf1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDependenciesAnyOf1KeySchemaPairParserRuleCall_2_0 = (RuleCall)cDependenciesAnyOf1Assignment_2.eContents().get(0);
		
		////	'TypesAnyOf2'
		////	'{'
		////		'items' '{' items+=SimpleTypes ( "," items+=SimpleTypes)* '}' 
		////	'}';
		///**
		// * TODO validation that at least one of anyOf1 and anyOf2 must exist 
		// */ DependenciesAnyOf:
		//	{DependenciesAnyOf} dependenciesAnyOf2=KeyStringArrayPair?
		//	dependenciesAnyOf1=KeySchemaPair?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DependenciesAnyOf} dependenciesAnyOf2=KeyStringArrayPair? dependenciesAnyOf1=KeySchemaPair?
		public Group getGroup() { return cGroup; }
		
		//{DependenciesAnyOf}
		public Action getDependenciesAnyOfAction_0() { return cDependenciesAnyOfAction_0; }
		
		//dependenciesAnyOf2=KeyStringArrayPair?
		public Assignment getDependenciesAnyOf2Assignment_1() { return cDependenciesAnyOf2Assignment_1; }
		
		//KeyStringArrayPair
		public RuleCall getDependenciesAnyOf2KeyStringArrayPairParserRuleCall_1_0() { return cDependenciesAnyOf2KeyStringArrayPairParserRuleCall_1_0; }
		
		//dependenciesAnyOf1=KeySchemaPair?
		public Assignment getDependenciesAnyOf1Assignment_2() { return cDependenciesAnyOf1Assignment_2; }
		
		//KeySchemaPair
		public RuleCall getDependenciesAnyOf1KeySchemaPairParserRuleCall_2_0() { return cDependenciesAnyOf1KeySchemaPairParserRuleCall_2_0; }
	}
	public class KeyStringArrayPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.KeyStringArrayPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyEStringParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueStringArrayParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		////	{DependenciesAnyOf}
		////	'DependenciesAnyOf'
		////	'{'
		////		('dependenciesAnyOf2' dependenciesAnyOf2=KeyStringArrayPair)?
		////		('dependenciesAnyOf1' dependenciesAnyOf1=KeySchemaPair)?
		////	'}';
		//KeyStringArrayPair:
		//	key=EString ':' value=StringArray;
		@Override public ParserRule getRule() { return rule; }
		
		//key=EString ':' value=StringArray
		public Group getGroup() { return cGroup; }
		
		//key=EString
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//EString
		public RuleCall getKeyEStringParserRuleCall_0_0() { return cKeyEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=StringArray
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//StringArray
		public RuleCall getValueStringArrayParserRuleCall_2_0() { return cValueStringArrayParserRuleCall_2_0; }
	}
	public class StringArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.StringArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValuesEStringParserRuleCall_2_0_0 = (RuleCall)cValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValuesEStringParserRuleCall_2_1_1_0 = (RuleCall)cValuesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////	'KeyStringArrayPair'
		////	'{'
		////		'key' key=EString
		////		'value' value=StringArray
		////	'}';
		///**
		// * TODO uniqueness validation
		// */ StringArray:
		//	{StringArray}
		//	'[' (values+=EString ("," values+=EString)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{StringArray} '[' (values+=EString ("," values+=EString)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{StringArray}
		public Action getStringArrayAction_0() { return cStringArrayAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(values+=EString ("," values+=EString)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//values+=EString
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }
		
		//EString
		public RuleCall getValuesEStringParserRuleCall_2_0_0() { return cValuesEStringParserRuleCall_2_0_0; }
		
		//("," values+=EString)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//values+=EString
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }
		
		//EString
		public RuleCall getValuesEStringParserRuleCall_2_1_1_0() { return cValuesEStringParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class VALID_STRINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.VALID_STRING");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKEYWORDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////	{StringArray}
		////	'StringArray'
		////	'{'
		////		('values' '{' values+=EString ( "," values+=EString)* '}' )?
		////	'}';
		//VALID_STRING:
		//	STRING | KEYWORD;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | KEYWORD
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//KEYWORD
		public RuleCall getKEYWORDParserRuleCall_1() { return cKEYWORDParserRuleCall_1; }
	}
	public class KEYWORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.KEYWORD");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIdKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSchemaKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRefKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCommentKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTitleKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDescriptionKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDefaultKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cReadOnlyKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cWriteOnlyKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cExamplesKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cMultipleOfKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cMaximumKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cExclusiveMaximumKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cMinimumKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cExclusiveMinimumKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cMaxLengthKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cMinLengthKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cPatternKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cAdditionalItemsKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cItemsKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cMaxItemsKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cMinItemsKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cUniqueItemsKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cContainsKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cMaxPropertiesKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cMinPropertiesKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cRequiredKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cAdditionalPropertiesKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cDefinitionsKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cPropertiesKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cPatternPropertiesKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cDependenciesKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cPropertyNamesKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cConstKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cEnumKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cTypeKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cFormatKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cContentMediaTypeKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cContentEncodingKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cIfKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cThenKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cElseKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cAllOfKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cAnyOfKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cOneOfKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		private final Keyword cNotKeyword_45 = (Keyword)cAlternatives.eContents().get(45);
		
		//// TODO please @Alessandro review that all keywords are defined here. Thanks!
		//KEYWORD:
		//	'"$id"' | '"$schema"' | '"$ref"' | '"$comment"' | '"title"' | '"description"' | '"default"' | '"readOnly"' |
		//	'"writeOnly"' | '"examples"' | '"multipleOf"' | '"maximum"' | '"exclusiveMaximum"' | '"minimum"' |
		//	'"exclusiveMinimum"' | '"maxLength"' | '"minLength"' |
		//	'"pattern"' | '"additionalItems"' | '"items"' | '"maxItems"' | '"minItems"' | '"uniqueItems"' | '"contains"' |
		//	'"maxProperties"' | '"minProperties"' | '"required"' | '"additionalProperties"' | '"definitions"' | '"properties"' |
		//	'"patternProperties"' | '"dependencies"' | '"propertyNames"' | '"const"' | '"enum"' | '"type"' | '"format"' |
		//	'"contentMediaType"' | '"contentEncoding"' |
		//	'"if"' | '"then"' | '"else"' | '"allOf"' | '"anyOf"' | '"oneOf"' | '"not"';
		@Override public ParserRule getRule() { return rule; }
		
		//'"$id"' | '"$schema"' | '"$ref"' | '"$comment"' | '"title"' | '"description"' | '"default"' | '"readOnly"' |
		//'"writeOnly"' | '"examples"' | '"multipleOf"' | '"maximum"' | '"exclusiveMaximum"' | '"minimum"' |
		//'"exclusiveMinimum"' | '"maxLength"' | '"minLength"' | '"pattern"' | '"additionalItems"' | '"items"' | '"maxItems"' |
		//'"minItems"' | '"uniqueItems"' | '"contains"' | '"maxProperties"' | '"minProperties"' | '"required"' |
		//'"additionalProperties"' | '"definitions"' | '"properties"' | '"patternProperties"' | '"dependencies"' |
		//'"propertyNames"' | '"const"' | '"enum"' | '"type"' | '"format"' | '"contentMediaType"' | '"contentEncoding"' | '"if"'
		//| '"then"' | '"else"' | '"allOf"' | '"anyOf"' | '"oneOf"' | '"not"'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'"$id"'
		public Keyword getIdKeyword_0() { return cIdKeyword_0; }
		
		//'"$schema"'
		public Keyword getSchemaKeyword_1() { return cSchemaKeyword_1; }
		
		//'"$ref"'
		public Keyword getRefKeyword_2() { return cRefKeyword_2; }
		
		//'"$comment"'
		public Keyword getCommentKeyword_3() { return cCommentKeyword_3; }
		
		//'"title"'
		public Keyword getTitleKeyword_4() { return cTitleKeyword_4; }
		
		//'"description"'
		public Keyword getDescriptionKeyword_5() { return cDescriptionKeyword_5; }
		
		//'"default"'
		public Keyword getDefaultKeyword_6() { return cDefaultKeyword_6; }
		
		//'"readOnly"'
		public Keyword getReadOnlyKeyword_7() { return cReadOnlyKeyword_7; }
		
		//'"writeOnly"'
		public Keyword getWriteOnlyKeyword_8() { return cWriteOnlyKeyword_8; }
		
		//'"examples"'
		public Keyword getExamplesKeyword_9() { return cExamplesKeyword_9; }
		
		//'"multipleOf"'
		public Keyword getMultipleOfKeyword_10() { return cMultipleOfKeyword_10; }
		
		//'"maximum"'
		public Keyword getMaximumKeyword_11() { return cMaximumKeyword_11; }
		
		//'"exclusiveMaximum"'
		public Keyword getExclusiveMaximumKeyword_12() { return cExclusiveMaximumKeyword_12; }
		
		//'"minimum"'
		public Keyword getMinimumKeyword_13() { return cMinimumKeyword_13; }
		
		//'"exclusiveMinimum"'
		public Keyword getExclusiveMinimumKeyword_14() { return cExclusiveMinimumKeyword_14; }
		
		//'"maxLength"'
		public Keyword getMaxLengthKeyword_15() { return cMaxLengthKeyword_15; }
		
		//'"minLength"'
		public Keyword getMinLengthKeyword_16() { return cMinLengthKeyword_16; }
		
		//'"pattern"'
		public Keyword getPatternKeyword_17() { return cPatternKeyword_17; }
		
		//'"additionalItems"'
		public Keyword getAdditionalItemsKeyword_18() { return cAdditionalItemsKeyword_18; }
		
		//'"items"'
		public Keyword getItemsKeyword_19() { return cItemsKeyword_19; }
		
		//'"maxItems"'
		public Keyword getMaxItemsKeyword_20() { return cMaxItemsKeyword_20; }
		
		//'"minItems"'
		public Keyword getMinItemsKeyword_21() { return cMinItemsKeyword_21; }
		
		//'"uniqueItems"'
		public Keyword getUniqueItemsKeyword_22() { return cUniqueItemsKeyword_22; }
		
		//'"contains"'
		public Keyword getContainsKeyword_23() { return cContainsKeyword_23; }
		
		//'"maxProperties"'
		public Keyword getMaxPropertiesKeyword_24() { return cMaxPropertiesKeyword_24; }
		
		//'"minProperties"'
		public Keyword getMinPropertiesKeyword_25() { return cMinPropertiesKeyword_25; }
		
		//'"required"'
		public Keyword getRequiredKeyword_26() { return cRequiredKeyword_26; }
		
		//'"additionalProperties"'
		public Keyword getAdditionalPropertiesKeyword_27() { return cAdditionalPropertiesKeyword_27; }
		
		//'"definitions"'
		public Keyword getDefinitionsKeyword_28() { return cDefinitionsKeyword_28; }
		
		//'"properties"'
		public Keyword getPropertiesKeyword_29() { return cPropertiesKeyword_29; }
		
		//'"patternProperties"'
		public Keyword getPatternPropertiesKeyword_30() { return cPatternPropertiesKeyword_30; }
		
		//'"dependencies"'
		public Keyword getDependenciesKeyword_31() { return cDependenciesKeyword_31; }
		
		//'"propertyNames"'
		public Keyword getPropertyNamesKeyword_32() { return cPropertyNamesKeyword_32; }
		
		//'"const"'
		public Keyword getConstKeyword_33() { return cConstKeyword_33; }
		
		//'"enum"'
		public Keyword getEnumKeyword_34() { return cEnumKeyword_34; }
		
		//'"type"'
		public Keyword getTypeKeyword_35() { return cTypeKeyword_35; }
		
		//'"format"'
		public Keyword getFormatKeyword_36() { return cFormatKeyword_36; }
		
		//'"contentMediaType"'
		public Keyword getContentMediaTypeKeyword_37() { return cContentMediaTypeKeyword_37; }
		
		//'"contentEncoding"'
		public Keyword getContentEncodingKeyword_38() { return cContentEncodingKeyword_38; }
		
		//'"if"'
		public Keyword getIfKeyword_39() { return cIfKeyword_39; }
		
		//'"then"'
		public Keyword getThenKeyword_40() { return cThenKeyword_40; }
		
		//'"else"'
		public Keyword getElseKeyword_41() { return cElseKeyword_41; }
		
		//'"allOf"'
		public Keyword getAllOfKeyword_42() { return cAllOfKeyword_42; }
		
		//'"anyOf"'
		public Keyword getAnyOfKeyword_43() { return cAnyOfKeyword_43; }
		
		//'"oneOf"'
		public Keyword getOneOfKeyword_44() { return cOneOfKeyword_44; }
		
		//'"not"'
		public Keyword getNotKeyword_45() { return cNotKeyword_45; }
	}
	
	public class SimpleTypesElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.SimpleTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cArrayEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cArrayArrayKeyword_0_0 = (Keyword)cArrayEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBooleanBooleanKeyword_1_0 = (Keyword)cBooleanEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIntegerIntegerKeyword_2_0 = (Keyword)cIntegerEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNullEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNullNullKeyword_3_0 = (Keyword)cNullEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cNumberEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cNumberNumberKeyword_4_0 = (Keyword)cNumberEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cObjectEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cObjectObjectKeyword_5_0 = (Keyword)cObjectEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cStringStringKeyword_6_0 = (Keyword)cStringEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum SimpleTypes:
		//	array='"array"' | boolean='"boolean"' | integer='"integer"' | null='"null"' | number='"number"' | object='"object"' |
		//	string='"string"';
		public EnumRule getRule() { return rule; }
		
		//array='"array"' | boolean='"boolean"' | integer='"integer"' | null='"null"' | number='"number"' | object='"object"' |
		//string='"string"'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//array='"array"'
		public EnumLiteralDeclaration getArrayEnumLiteralDeclaration_0() { return cArrayEnumLiteralDeclaration_0; }
		
		//'"array"'
		public Keyword getArrayArrayKeyword_0_0() { return cArrayArrayKeyword_0_0; }
		
		//boolean='"boolean"'
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_1() { return cBooleanEnumLiteralDeclaration_1; }
		
		//'"boolean"'
		public Keyword getBooleanBooleanKeyword_1_0() { return cBooleanBooleanKeyword_1_0; }
		
		//integer='"integer"'
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_2() { return cIntegerEnumLiteralDeclaration_2; }
		
		//'"integer"'
		public Keyword getIntegerIntegerKeyword_2_0() { return cIntegerIntegerKeyword_2_0; }
		
		//null='"null"'
		public EnumLiteralDeclaration getNullEnumLiteralDeclaration_3() { return cNullEnumLiteralDeclaration_3; }
		
		//'"null"'
		public Keyword getNullNullKeyword_3_0() { return cNullNullKeyword_3_0; }
		
		//number='"number"'
		public EnumLiteralDeclaration getNumberEnumLiteralDeclaration_4() { return cNumberEnumLiteralDeclaration_4; }
		
		//'"number"'
		public Keyword getNumberNumberKeyword_4_0() { return cNumberNumberKeyword_4_0; }
		
		//object='"object"'
		public EnumLiteralDeclaration getObjectEnumLiteralDeclaration_5() { return cObjectEnumLiteralDeclaration_5; }
		
		//'"object"'
		public Keyword getObjectObjectKeyword_5_0() { return cObjectObjectKeyword_5_0; }
		
		//string='"string"'
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_6() { return cStringEnumLiteralDeclaration_6; }
		
		//'"string"'
		public Keyword getStringStringKeyword_6_0() { return cStringStringKeyword_6_0; }
	}
	
	private final JsonSchemaElements pJsonSchema;
	private final SchemaElements pSchema;
	private final KeywordDefinitionElements pKeywordDefinition;
	private final ValueElements pValue;
	private final ObjectSchemaElements pObjectSchema;
	private final BooleanSchemaElements pBooleanSchema;
	private final MaximumSchemaDefinitionElements pMaximumSchemaDefinition;
	private final WriteOnlySchemaDefinitionElements pWriteOnlySchemaDefinition;
	private final CommentSchemaDefinitionElements pCommentSchemaDefinition;
	private final EnumSchemaDefinitionElements pEnumSchemaDefinition;
	private final UniqueItemsSchemaDefinitionElements pUniqueItemsSchemaDefinition;
	private final AnyOfSchemaDefinitionElements pAnyOfSchemaDefinition;
	private final TitleSchemaDefinitionElements pTitleSchemaDefinition;
	private final ItemsSchemaDefinitionElements pItemsSchemaDefinition;
	private final DefaultSchemaDefinitionElements pDefaultSchemaDefinition;
	private final ThenSchemaDefinitionElements pThenSchemaDefinition;
	private final MinLengthSchemaDefinitionElements pMinLengthSchemaDefinition;
	private final DefinitionsSchemaDefinitionElements pDefinitionsSchemaDefinition;
	private final MinItemsSchemaDefinitionElements pMinItemsSchemaDefinition;
	private final OneOfSchemaDefinitionElements pOneOfSchemaDefinition;
	private final MaxPropertiesSchemaDefinitionElements pMaxPropertiesSchemaDefinition;
	private final MinimumSchemaDefinitionElements pMinimumSchemaDefinition;
	private final MaxItemsSchemaDefinitionElements pMaxItemsSchemaDefinition;
	private final FormatSchemaDefinitionElements pFormatSchemaDefinition;
	private final ReadOnlySchemaDefinitionElements pReadOnlySchemaDefinition;
	private final TypeSchemaDefinitionElements pTypeSchemaDefinition;
	private final AdditionalPropertiesSchemaDefinitionElements pAdditionalPropertiesSchemaDefinition;
	private final ElseSchemaDefinitionElements pElseSchemaDefinition;
	private final IdSchemaDefinitionElements pIdSchemaDefinition;
	private final ConstSchemaDefinitionElements pConstSchemaDefinition;
	private final DependenciesSchemaDefinitionElements pDependenciesSchemaDefinition;
	private final RequiredSchemaDefinitionElements pRequiredSchemaDefinition;
	private final DescriptionSchemaDefinitionElements pDescriptionSchemaDefinition;
	private final MinPropertiesSchemaDefinitionElements pMinPropertiesSchemaDefinition;
	private final PatternPropertiesSchemaDefinitionElements pPatternPropertiesSchemaDefinition;
	private final AdditionalItemsSchemaDefinitionElements pAdditionalItemsSchemaDefinition;
	private final KeyValuePairElements pKeyValuePair;
	private final ExamplesSchemaDefinitionElements pExamplesSchemaDefinition;
	private final IfSchemaDefinitionElements pIfSchemaDefinition;
	private final AllOfSchemaDefinitionElements pAllOfSchemaDefinition;
	private final ContentEncodingSchemaDefinitionElements pContentEncodingSchemaDefinition;
	private final MultipleOfSchemaDefinitionElements pMultipleOfSchemaDefinition;
	private final PatternSchemaDefinitionElements pPatternSchemaDefinition;
	private final ContainsSchemaDefinitionElements pContainsSchemaDefinition;
	private final NotSchemaDefinitionElements pNotSchemaDefinition;
	private final ExclusiveMaximumSchemaDefinitionElements pExclusiveMaximumSchemaDefinition;
	private final MaxLengthSchemaDefinitionElements pMaxLengthSchemaDefinition;
	private final RefSchemaDefinitionElements pRefSchemaDefinition;
	private final ContentMediaTypeSchemaDefinitionElements pContentMediaTypeSchemaDefinition;
	private final ExclusiveMinimumSchemaDefinitionElements pExclusiveMinimumSchemaDefinition;
	private final SchemaSchemaDefinitionElements pSchemaSchemaDefinition;
	private final PropertiesSchemaDefinitionElements pPropertiesSchemaDefinition;
	private final PropertyNamesSchemaDefinitionElements pPropertyNamesSchemaDefinition;
	private final TerminalRule tJSON_NUMBER;
	private final EDoubleElements pEDouble;
	private final EBooleanElements pEBoolean;
	private final EStringElements pEString;
	private final JsonDocumentElements pJsonDocument;
	private final IntegerValueElements pIntegerValue;
	private final BooleanValueElements pBooleanValue;
	private final NullValueElements pNullValue;
	private final StringValueElements pStringValue;
	private final ObjectValueElements pObjectValue;
	private final NumberValueElements pNumberValue;
	private final ArrayValueElements pArrayValue;
	private final EIntElements pEInt;
	private final SchemaArrayElements pSchemaArray;
	private final NonNegativeIntegerDefault0Elements pNonNegativeIntegerDefault0;
	private final KeySchemaPairElements pKeySchemaPair;
	private final NonNegativeIntegerElements pNonNegativeInteger;
	private final SimpleTypesElements eSimpleTypes;
	private final TypesAnyOf2Elements pTypesAnyOf2;
	private final DependenciesAnyOfElements pDependenciesAnyOf;
	private final KeyStringArrayPairElements pKeyStringArrayPair;
	private final StringArrayElements pStringArray;
	private final VALID_STRINGElements pVALID_STRING;
	private final TerminalRule tSTRING;
	private final KEYWORDElements pKEYWORD;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JsonSchemaDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pJsonSchema = new JsonSchemaElements();
		this.pSchema = new SchemaElements();
		this.pKeywordDefinition = new KeywordDefinitionElements();
		this.pValue = new ValueElements();
		this.pObjectSchema = new ObjectSchemaElements();
		this.pBooleanSchema = new BooleanSchemaElements();
		this.pMaximumSchemaDefinition = new MaximumSchemaDefinitionElements();
		this.pWriteOnlySchemaDefinition = new WriteOnlySchemaDefinitionElements();
		this.pCommentSchemaDefinition = new CommentSchemaDefinitionElements();
		this.pEnumSchemaDefinition = new EnumSchemaDefinitionElements();
		this.pUniqueItemsSchemaDefinition = new UniqueItemsSchemaDefinitionElements();
		this.pAnyOfSchemaDefinition = new AnyOfSchemaDefinitionElements();
		this.pTitleSchemaDefinition = new TitleSchemaDefinitionElements();
		this.pItemsSchemaDefinition = new ItemsSchemaDefinitionElements();
		this.pDefaultSchemaDefinition = new DefaultSchemaDefinitionElements();
		this.pThenSchemaDefinition = new ThenSchemaDefinitionElements();
		this.pMinLengthSchemaDefinition = new MinLengthSchemaDefinitionElements();
		this.pDefinitionsSchemaDefinition = new DefinitionsSchemaDefinitionElements();
		this.pMinItemsSchemaDefinition = new MinItemsSchemaDefinitionElements();
		this.pOneOfSchemaDefinition = new OneOfSchemaDefinitionElements();
		this.pMaxPropertiesSchemaDefinition = new MaxPropertiesSchemaDefinitionElements();
		this.pMinimumSchemaDefinition = new MinimumSchemaDefinitionElements();
		this.pMaxItemsSchemaDefinition = new MaxItemsSchemaDefinitionElements();
		this.pFormatSchemaDefinition = new FormatSchemaDefinitionElements();
		this.pReadOnlySchemaDefinition = new ReadOnlySchemaDefinitionElements();
		this.pTypeSchemaDefinition = new TypeSchemaDefinitionElements();
		this.pAdditionalPropertiesSchemaDefinition = new AdditionalPropertiesSchemaDefinitionElements();
		this.pElseSchemaDefinition = new ElseSchemaDefinitionElements();
		this.pIdSchemaDefinition = new IdSchemaDefinitionElements();
		this.pConstSchemaDefinition = new ConstSchemaDefinitionElements();
		this.pDependenciesSchemaDefinition = new DependenciesSchemaDefinitionElements();
		this.pRequiredSchemaDefinition = new RequiredSchemaDefinitionElements();
		this.pDescriptionSchemaDefinition = new DescriptionSchemaDefinitionElements();
		this.pMinPropertiesSchemaDefinition = new MinPropertiesSchemaDefinitionElements();
		this.pPatternPropertiesSchemaDefinition = new PatternPropertiesSchemaDefinitionElements();
		this.pAdditionalItemsSchemaDefinition = new AdditionalItemsSchemaDefinitionElements();
		this.pKeyValuePair = new KeyValuePairElements();
		this.pExamplesSchemaDefinition = new ExamplesSchemaDefinitionElements();
		this.pIfSchemaDefinition = new IfSchemaDefinitionElements();
		this.pAllOfSchemaDefinition = new AllOfSchemaDefinitionElements();
		this.pContentEncodingSchemaDefinition = new ContentEncodingSchemaDefinitionElements();
		this.pMultipleOfSchemaDefinition = new MultipleOfSchemaDefinitionElements();
		this.pPatternSchemaDefinition = new PatternSchemaDefinitionElements();
		this.pContainsSchemaDefinition = new ContainsSchemaDefinitionElements();
		this.pNotSchemaDefinition = new NotSchemaDefinitionElements();
		this.pExclusiveMaximumSchemaDefinition = new ExclusiveMaximumSchemaDefinitionElements();
		this.pMaxLengthSchemaDefinition = new MaxLengthSchemaDefinitionElements();
		this.pRefSchemaDefinition = new RefSchemaDefinitionElements();
		this.pContentMediaTypeSchemaDefinition = new ContentMediaTypeSchemaDefinitionElements();
		this.pExclusiveMinimumSchemaDefinition = new ExclusiveMinimumSchemaDefinitionElements();
		this.pSchemaSchemaDefinition = new SchemaSchemaDefinitionElements();
		this.pPropertiesSchemaDefinition = new PropertiesSchemaDefinitionElements();
		this.pPropertyNamesSchemaDefinition = new PropertyNamesSchemaDefinitionElements();
		this.tJSON_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.JSON_NUMBER");
		this.pEDouble = new EDoubleElements();
		this.pEBoolean = new EBooleanElements();
		this.pEString = new EStringElements();
		this.pJsonDocument = new JsonDocumentElements();
		this.pIntegerValue = new IntegerValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pNullValue = new NullValueElements();
		this.pStringValue = new StringValueElements();
		this.pObjectValue = new ObjectValueElements();
		this.pNumberValue = new NumberValueElements();
		this.pArrayValue = new ArrayValueElements();
		this.pEInt = new EIntElements();
		this.pSchemaArray = new SchemaArrayElements();
		this.pNonNegativeIntegerDefault0 = new NonNegativeIntegerDefault0Elements();
		this.pKeySchemaPair = new KeySchemaPairElements();
		this.pNonNegativeInteger = new NonNegativeIntegerElements();
		this.eSimpleTypes = new SimpleTypesElements();
		this.pTypesAnyOf2 = new TypesAnyOf2Elements();
		this.pDependenciesAnyOf = new DependenciesAnyOfElements();
		this.pKeyStringArrayPair = new KeyStringArrayPairElements();
		this.pStringArray = new StringArrayElements();
		this.pVALID_STRING = new VALID_STRINGElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.bise.JsonSchemaDsl.STRING");
		this.pKEYWORD = new KEYWORDElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.jku.bise.JsonSchemaDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//JsonSchema:
	//	{JsonSchema} schema=Schema?;
	public JsonSchemaElements getJsonSchemaAccess() {
		return pJsonSchema;
	}
	
	public ParserRule getJsonSchemaRule() {
		return getJsonSchemaAccess().getRule();
	}
	
	////	{JsonSchema}
	////	'JsonSchema'
	////	'{'
	////		('schema' schema=Schema)?
	////	'}';
	//Schema:
	//	ObjectSchema | BooleanSchema;
	public SchemaElements getSchemaAccess() {
		return pSchema;
	}
	
	public ParserRule getSchemaRule() {
		return getSchemaAccess().getRule();
	}
	
	//KeywordDefinition:
	//	IdSchemaDefinition | SchemaSchemaDefinition | RefSchemaDefinition | CommentSchemaDefinition | TitleSchemaDefinition |
	//	DescriptionSchemaDefinition | DefaultSchemaDefinition | ReadOnlySchemaDefinition | WriteOnlySchemaDefinition |
	//	ExamplesSchemaDefinition | MultipleOfSchemaDefinition | MaximumSchemaDefinition | ExclusiveMaximumSchemaDefinition |
	//	MinimumSchemaDefinition | ExclusiveMinimumSchemaDefinition | MaxLengthSchemaDefinition | MinLengthSchemaDefinition |
	//	PatternSchemaDefinition | AdditionalItemsSchemaDefinition | ItemsSchemaDefinition | MaxItemsSchemaDefinition |
	//	MinItemsSchemaDefinition | UniqueItemsSchemaDefinition | ContainsSchemaDefinition | MaxPropertiesSchemaDefinition |
	//	MinPropertiesSchemaDefinition | RequiredSchemaDefinition | AdditionalPropertiesSchemaDefinition |
	//	DefinitionsSchemaDefinition | PropertiesSchemaDefinition | PatternPropertiesSchemaDefinition |
	//	PropertyNamesSchemaDefinition | ConstSchemaDefinition | EnumSchemaDefinition | TypeSchemaDefinition |
	//	FormatSchemaDefinition | ContentMediaTypeSchemaDefinition | ContentEncodingSchemaDefinition | IfSchemaDefinition |
	//	ThenSchemaDefinition | ElseSchemaDefinition | AllOfSchemaDefinition | AnyOfSchemaDefinition | OneOfSchemaDefinition |
	//	NotSchemaDefinition | KeyValuePair;
	public KeywordDefinitionElements getKeywordDefinitionAccess() {
		return pKeywordDefinition;
	}
	
	public ParserRule getKeywordDefinitionRule() {
		return getKeywordDefinitionAccess().getRule();
	}
	
	//Value:
	//	IntegerValue | BooleanValue | NullValue | StringValue | ObjectValue | NumberValue | ArrayValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//ObjectSchema:
	//	{ObjectSchema}
	//	'{' (keywordDefinition+=KeywordDefinition ("," keywordDefinition+=KeywordDefinition)*)?
	//	'}';
	public ObjectSchemaElements getObjectSchemaAccess() {
		return pObjectSchema;
	}
	
	public ParserRule getObjectSchemaRule() {
		return getObjectSchemaAccess().getRule();
	}
	
	////	{ObjectSchema}
	////	'ObjectSchema'
	////	'{'
	////		('keywordDefinition' '{' keywordDefinition+=KeywordDefinition ( "," keywordDefinition+=KeywordDefinition)* '}' )?
	////	'}';
	//BooleanSchema:
	//	value=EBoolean;
	public BooleanSchemaElements getBooleanSchemaAccess() {
		return pBooleanSchema;
	}
	
	public ParserRule getBooleanSchemaRule() {
		return getBooleanSchemaAccess().getRule();
	}
	
	////	value?='value'
	////	'BooleanSchema'
	////	;
	//MaximumSchemaDefinition:
	//	'"maximum"' ':' maximum=EDouble;
	public MaximumSchemaDefinitionElements getMaximumSchemaDefinitionAccess() {
		return pMaximumSchemaDefinition;
	}
	
	public ParserRule getMaximumSchemaDefinitionRule() {
		return getMaximumSchemaDefinitionAccess().getRule();
	}
	
	////	'MaximumSchemaDefinition'
	////	'{'
	////		'maximum' maximum=EDouble
	////	'}';
	///**
	// * 	"writeOnly": {
	//		"type": "boolean",
	//		"default": false
	//	}
	// */ WriteOnlySchemaDefinition:
	//	'"writeOnly"' ':' writeOnly=EBoolean;
	public WriteOnlySchemaDefinitionElements getWriteOnlySchemaDefinitionAccess() {
		return pWriteOnlySchemaDefinition;
	}
	
	public ParserRule getWriteOnlySchemaDefinitionRule() {
		return getWriteOnlySchemaDefinitionAccess().getRule();
	}
	
	////	writeOnly?='writeOnly'
	////	'WriteOnlySchemaDefinition'
	////	;
	///**
	// * 	"$comment": {
	//		"type": "string"
	//	}
	// */ CommentSchemaDefinition:
	//	'"$comment"' ':' comment=EString;
	public CommentSchemaDefinitionElements getCommentSchemaDefinitionAccess() {
		return pCommentSchemaDefinition;
	}
	
	public ParserRule getCommentSchemaDefinitionRule() {
		return getCommentSchemaDefinitionAccess().getRule();
	}
	
	////	'CommentSchemaDefinition'
	////	'{'
	////		'comment' comment=EString
	////	'}';
	///**
	// * TODO fix minitems in ecore and delete class Enum
	// * 	"enum": {
	//		"type": "array",
	//		"items": true,
	//		"minItems": 1,
	//		"uniqueItems": true
	//        }
	// */ EnumSchemaDefinition:
	//	'[' items+=JsonDocument ("," items+=JsonDocument)* ']';
	public EnumSchemaDefinitionElements getEnumSchemaDefinitionAccess() {
		return pEnumSchemaDefinition;
	}
	
	public ParserRule getEnumSchemaDefinitionRule() {
		return getEnumSchemaDefinitionAccess().getRule();
	}
	
	////	'"enum"' ':' enumeration=Enum;
	////	{EnumSchemaDefinition}
	////	'EnumSchemaDefinition'
	////	'{'
	////		('enumeration' enumeration=Enum)?
	////	'}';
	//UniqueItemsSchemaDefinition:
	//	'"uniqueItems"' ':' uniqueItems=EBoolean;
	public UniqueItemsSchemaDefinitionElements getUniqueItemsSchemaDefinitionAccess() {
		return pUniqueItemsSchemaDefinition;
	}
	
	public ParserRule getUniqueItemsSchemaDefinitionRule() {
		return getUniqueItemsSchemaDefinitionAccess().getRule();
	}
	
	////	uniqueItems?='uniqueItems'
	////	'UniqueItemsSchemaDefinition'
	////	;
	//AnyOfSchemaDefinition:
	//	'"anyOf"' ':' anyOf=SchemaArray;
	public AnyOfSchemaDefinitionElements getAnyOfSchemaDefinitionAccess() {
		return pAnyOfSchemaDefinition;
	}
	
	public ParserRule getAnyOfSchemaDefinitionRule() {
		return getAnyOfSchemaDefinitionAccess().getRule();
	}
	
	////	'AnyOfSchemaDefinition'
	////	'{'
	////		'anyOf' anyOf=SchemaArray
	////	'}';
	///**
	// * 	"title": {
	//		"type": "string"
	//	}
	// */ TitleSchemaDefinition:
	//	'"title"' ':' title=EString;
	public TitleSchemaDefinitionElements getTitleSchemaDefinitionAccess() {
		return pTitleSchemaDefinition;
	}
	
	public ParserRule getTitleSchemaDefinitionRule() {
		return getTitleSchemaDefinitionAccess().getRule();
	}
	
	////	'TitleSchemaDefinition'
	////	'{'
	////		'title' title=EString
	////	'}';
	///**
	// * 	TODO validate that at least one of anyOf1 and anyOf2 must exist
	// * 	"items": {
	//		"anyOf": [
	//			{ "$ref": "#" },
	//			{ "$ref": "#/definitions/schemaArray" }
	//		],
	//		"default": true
	//	}
	// */ ItemsSchemaDefinition:
	//	{ItemsSchemaDefinition}
	//	'"items"' ':'
	//	itemsAnyOf1=Schema?
	//	itemsAnyOf2=SchemaArray?;
	public ItemsSchemaDefinitionElements getItemsSchemaDefinitionAccess() {
		return pItemsSchemaDefinition;
	}
	
	public ParserRule getItemsSchemaDefinitionRule() {
		return getItemsSchemaDefinitionAccess().getRule();
	}
	
	////	{ItemsSchemaDefinition}
	////	'ItemsSchemaDefinition'
	////	'{'
	////		('itemsAnyOf1' itemsAnyOf1=Schema)?
	////		('itemsAnyOf2' itemsAnyOf2=SchemaArray)?
	////	'}';
	///**
	// * 	"default": true
	// */ DefaultSchemaDefinition:
	//	'"default"' ':' default=JsonDocument;
	public DefaultSchemaDefinitionElements getDefaultSchemaDefinitionAccess() {
		return pDefaultSchemaDefinition;
	}
	
	public ParserRule getDefaultSchemaDefinitionRule() {
		return getDefaultSchemaDefinitionAccess().getRule();
	}
	
	////	{DefaultSchemaDefinition}
	////	'DefaultSchemaDefinition'
	////	'{'
	////		('default' default=JsonDocument)?
	////	'}';
	//ThenSchemaDefinition:
	//	'"then"' ':' then=Schema;
	public ThenSchemaDefinitionElements getThenSchemaDefinitionAccess() {
		return pThenSchemaDefinition;
	}
	
	public ParserRule getThenSchemaDefinitionRule() {
		return getThenSchemaDefinitionAccess().getRule();
	}
	
	////	'ThenSchemaDefinition'
	////	'{'
	////		'then' then=Schema
	////	'}';
	///**
	// * "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefault0" }
	// */ MinLengthSchemaDefinition:
	//	'"minLength"' ':' minLength=NonNegativeIntegerDefault0;
	public MinLengthSchemaDefinitionElements getMinLengthSchemaDefinitionAccess() {
		return pMinLengthSchemaDefinition;
	}
	
	public ParserRule getMinLengthSchemaDefinitionRule() {
		return getMinLengthSchemaDefinitionAccess().getRule();
	}
	
	////	'MinLengthSchemaDefinition'
	////	'{'
	////		'minLength' minLength=NonNegativeIntegerDefault0
	////	'}';
	//DefinitionsSchemaDefinition:
	//	{DefinitionsSchemaDefinition}
	//	'"definitions"' ':'
	//	'{' (keySchemaPairs+=KeySchemaPair ("," keySchemaPairs+=KeySchemaPair)*)?
	//	'}';
	public DefinitionsSchemaDefinitionElements getDefinitionsSchemaDefinitionAccess() {
		return pDefinitionsSchemaDefinition;
	}
	
	public ParserRule getDefinitionsSchemaDefinitionRule() {
		return getDefinitionsSchemaDefinitionAccess().getRule();
	}
	
	////	{DefinitionsSchemaDefinition}
	////	'DefinitionsSchemaDefinition'
	////	'{'
	////		('keySchemaPairs' '{' keySchemaPairs+=KeySchemaPair ( "," keySchemaPairs+=KeySchemaPair)* '}' )?
	////	'}';
	///**
	// * "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" }
	// */ MinItemsSchemaDefinition:
	//	'"minItems"' ':' minItems=NonNegativeIntegerDefault0;
	public MinItemsSchemaDefinitionElements getMinItemsSchemaDefinitionAccess() {
		return pMinItemsSchemaDefinition;
	}
	
	public ParserRule getMinItemsSchemaDefinitionRule() {
		return getMinItemsSchemaDefinitionAccess().getRule();
	}
	
	////	'MinItemsSchemaDefinition'
	////	'{'
	////		'minItems' minItems=NonNegativeIntegerDefault0
	////	'}';
	//OneOfSchemaDefinition:
	//	'"oneOf"' ':' oneOf=SchemaArray;
	public OneOfSchemaDefinitionElements getOneOfSchemaDefinitionAccess() {
		return pOneOfSchemaDefinition;
	}
	
	public ParserRule getOneOfSchemaDefinitionRule() {
		return getOneOfSchemaDefinitionAccess().getRule();
	}
	
	////	'OneOfSchemaDefinition'
	////	'{'
	////		'oneOf' oneOf=SchemaArray
	////	'}';
	///**
	// * "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" }
	// */ MaxPropertiesSchemaDefinition:
	//	'"maxProperties"' ':' maxProperties=NonNegativeInteger;
	public MaxPropertiesSchemaDefinitionElements getMaxPropertiesSchemaDefinitionAccess() {
		return pMaxPropertiesSchemaDefinition;
	}
	
	public ParserRule getMaxPropertiesSchemaDefinitionRule() {
		return getMaxPropertiesSchemaDefinitionAccess().getRule();
	}
	
	////	'MaxPropertiesSchemaDefinition'
	////	'{'
	////		'maxProperties' maxProperties=NonNegativeInteger
	////	'}';
	//MinimumSchemaDefinition:
	//	'"minimum"' ':' minimum=EDouble;
	public MinimumSchemaDefinitionElements getMinimumSchemaDefinitionAccess() {
		return pMinimumSchemaDefinition;
	}
	
	public ParserRule getMinimumSchemaDefinitionRule() {
		return getMinimumSchemaDefinitionAccess().getRule();
	}
	
	////	'MinimumSchemaDefinition'
	////	'{'
	////		'minimum' minimum=EDouble
	////	'}';
	///**
	// * "maxItems": { "$ref": "#/definitions/nonNegativeInteger" }
	// */ MaxItemsSchemaDefinition:
	//	'"maxItems"' ':' maxItems=NonNegativeInteger;
	public MaxItemsSchemaDefinitionElements getMaxItemsSchemaDefinitionAccess() {
		return pMaxItemsSchemaDefinition;
	}
	
	public ParserRule getMaxItemsSchemaDefinitionRule() {
		return getMaxItemsSchemaDefinitionAccess().getRule();
	}
	
	////	'MaxItemsSchemaDefinition'
	////	'{'
	////		'maxItems' maxItems=NonNegativeInteger
	////	'}';
	//FormatSchemaDefinition:
	//	'"format"' ':' format=EString;
	public FormatSchemaDefinitionElements getFormatSchemaDefinitionAccess() {
		return pFormatSchemaDefinition;
	}
	
	public ParserRule getFormatSchemaDefinitionRule() {
		return getFormatSchemaDefinitionAccess().getRule();
	}
	
	////	'FormatSchemaDefinition'
	////	'{'
	////		'format' format=EString
	////	'}';
	///**
	// * "readOnly": {
	//		"type": "boolean",
	//		"default": false
	//	}
	// */ ReadOnlySchemaDefinition:
	//	'"readOnly"' ':' readOnly=EBoolean;
	public ReadOnlySchemaDefinitionElements getReadOnlySchemaDefinitionAccess() {
		return pReadOnlySchemaDefinition;
	}
	
	public ParserRule getReadOnlySchemaDefinitionRule() {
		return getReadOnlySchemaDefinitionAccess().getRule();
	}
	
	////	readOnly?='readOnly'
	////	'ReadOnlySchemaDefinition'
	////	;
	///**
	// * TODO validate that at the least on of anyOf1 and anyOf2 must exist
	// * 	"type": {
	//		"anyOf": [
	//			{ "$ref": "#/definitions/simpleTypes" },
	//			{
	//				"type": "array",
	//				"items": { "$ref": "#/definitions/simpleTypes" },
	//				"minItems": 1,
	//				"uniqueItems": true
	//			}
	//		]
	//	}
	// */ TypeSchemaDefinition:
	//	{TypeSchemaDefinition}
	//	'"type"' ':'
	//	typeAnyOf1=SimpleTypes?
	//	typesAnyOf2=TypesAnyOf2?;
	public TypeSchemaDefinitionElements getTypeSchemaDefinitionAccess() {
		return pTypeSchemaDefinition;
	}
	
	public ParserRule getTypeSchemaDefinitionRule() {
		return getTypeSchemaDefinitionAccess().getRule();
	}
	
	////	{TypeSchemaDefinition}
	////	'TypeSchemaDefinition'
	////	'{'
	////		('typeAnyOf1' typeAnyOf1=SimpleTypes)?
	////		('typesAnyOf2' typesAnyOf2=TypesAnyOf2)?
	////	'}';
	//AdditionalPropertiesSchemaDefinition:
	//	'"additionalProperties"' ':' additionalProperties=Schema;
	public AdditionalPropertiesSchemaDefinitionElements getAdditionalPropertiesSchemaDefinitionAccess() {
		return pAdditionalPropertiesSchemaDefinition;
	}
	
	public ParserRule getAdditionalPropertiesSchemaDefinitionRule() {
		return getAdditionalPropertiesSchemaDefinitionAccess().getRule();
	}
	
	////	'AdditionalPropertiesSchemaDefinition'
	////	'{'
	////		'additionalProperties' additionalProperties=Schema
	////	'}';
	//ElseSchemaDefinition:
	//	'"else"' ':' else=Schema;
	public ElseSchemaDefinitionElements getElseSchemaDefinitionAccess() {
		return pElseSchemaDefinition;
	}
	
	public ParserRule getElseSchemaDefinitionRule() {
		return getElseSchemaDefinitionAccess().getRule();
	}
	
	////	'ElseSchemaDefinition'
	////	'{'
	////		'else' else=Schema
	////	'}';
	///**
	// * TODO validate "format": "uri-reference"
	// * 		"$id": {
	//            "type": "string",
	//            "format": "uri-reference"
	//        }
	// */ IdSchemaDefinition:
	//	'"$id"' ':' id=EString;
	public IdSchemaDefinitionElements getIdSchemaDefinitionAccess() {
		return pIdSchemaDefinition;
	}
	
	public ParserRule getIdSchemaDefinitionRule() {
		return getIdSchemaDefinitionAccess().getRule();
	}
	
	////	'IdSchemaDefinition'
	////	'{'
	////		'id' id=EString
	////	'}';
	///**
	// * "const": true
	// */ ConstSchemaDefinition:
	//	'"const"' ':' const=JsonDocument;
	public ConstSchemaDefinitionElements getConstSchemaDefinitionAccess() {
		return pConstSchemaDefinition;
	}
	
	public ParserRule getConstSchemaDefinitionRule() {
		return getConstSchemaDefinitionAccess().getRule();
	}
	
	////	{ConstSchemaDefinition}
	////	'ConstSchemaDefinition'
	////	'{'
	////		('const' const=JsonDocument)?
	////	'}';
	//DependenciesSchemaDefinition:
	//	{DependenciesSchemaDefinition}
	//	'"dependencies"' ':'
	//	'{' (dependencies+=DependenciesAnyOf ("," dependencies+=DependenciesAnyOf)*)?
	//	'}';
	public DependenciesSchemaDefinitionElements getDependenciesSchemaDefinitionAccess() {
		return pDependenciesSchemaDefinition;
	}
	
	public ParserRule getDependenciesSchemaDefinitionRule() {
		return getDependenciesSchemaDefinitionAccess().getRule();
	}
	
	////	{DependenciesSchemaDefinition}
	////	'DependenciesSchemaDefinition'
	////	'{'
	////		('dependencies' '{' dependencies+=DependenciesAnyOf ( "," dependencies+=DependenciesAnyOf)* '}' )?
	////	'}';
	///*
	// * TODO in ecore put RequiredSchemaDefinition.required has to be [1..1]
	// */ RequiredSchemaDefinition:
	//	'"required"' ':' required=StringArray;
	public RequiredSchemaDefinitionElements getRequiredSchemaDefinitionAccess() {
		return pRequiredSchemaDefinition;
	}
	
	public ParserRule getRequiredSchemaDefinitionRule() {
		return getRequiredSchemaDefinitionAccess().getRule();
	}
	
	////	{RequiredSchemaDefinition}
	////	'RequiredSchemaDefinition'
	////	'{'
	////		('required' required=StringArray)?
	////	'}';
	///**
	// * "description": {
	//		"type": "string"
	//	}
	// */ DescriptionSchemaDefinition:
	//	'"description"' ':' description=EString;
	public DescriptionSchemaDefinitionElements getDescriptionSchemaDefinitionAccess() {
		return pDescriptionSchemaDefinition;
	}
	
	public ParserRule getDescriptionSchemaDefinitionRule() {
		return getDescriptionSchemaDefinitionAccess().getRule();
	}
	
	////	'DescriptionSchemaDefinition'
	////	'{'
	////		'description' description=EString
	////	'}';
	///**
	// * "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" }
	// */ MinPropertiesSchemaDefinition:
	//	'"minProperties"' ':' minProperties=NonNegativeIntegerDefault0;
	public MinPropertiesSchemaDefinitionElements getMinPropertiesSchemaDefinitionAccess() {
		return pMinPropertiesSchemaDefinition;
	}
	
	public ParserRule getMinPropertiesSchemaDefinitionRule() {
		return getMinPropertiesSchemaDefinitionAccess().getRule();
	}
	
	////	'MinPropertiesSchemaDefinition'
	////	'{'
	////		'minProperties' minProperties=NonNegativeIntegerDefault0
	////	'}';
	///**
	// * TODO validate "propertyNames": { "format": "regex" }
	// * 	"patternProperties": {
	//		"type": "object",
	//		"additionalProperties": { "$ref": "#" },
	//		"propertyNames": { "format": "regex" },
	//		"default": {}
	//	}
	// */ PatternPropertiesSchemaDefinition:
	//	{PatternPropertiesSchemaDefinition}
	//	'"patternProperties"' ':'
	//	'{' (keySchemaPairs+=KeySchemaPair ("," keySchemaPairs+=KeySchemaPair)*)?
	//	'}';
	public PatternPropertiesSchemaDefinitionElements getPatternPropertiesSchemaDefinitionAccess() {
		return pPatternPropertiesSchemaDefinition;
	}
	
	public ParserRule getPatternPropertiesSchemaDefinitionRule() {
		return getPatternPropertiesSchemaDefinitionAccess().getRule();
	}
	
	////	{PatternPropertiesSchemaDefinition}
	////	'PatternPropertiesSchemaDefinition'
	////	'{'
	////		('keySchemaPairs' '{' keySchemaPairs+=KeySchemaPair ( "," keySchemaPairs+=KeySchemaPair)* '}' )?
	////	'}';
	//AdditionalItemsSchemaDefinition:
	//	'"additionalItems"' ':' additionalItems=Schema;
	public AdditionalItemsSchemaDefinitionElements getAdditionalItemsSchemaDefinitionAccess() {
		return pAdditionalItemsSchemaDefinition;
	}
	
	public ParserRule getAdditionalItemsSchemaDefinitionRule() {
		return getAdditionalItemsSchemaDefinitionAccess().getRule();
	}
	
	////	'AdditionalItemsSchemaDefinition'
	////	'{'
	////		'additionalItems' additionalItems=Schema
	////	'}';
	//KeyValuePair:
	//	key=STRING //EString 
	//	':' value=Value;
	public KeyValuePairElements getKeyValuePairAccess() {
		return pKeyValuePair;
	}
	
	public ParserRule getKeyValuePairRule() {
		return getKeyValuePairAccess().getRule();
	}
	
	////	{KeyValuePair}
	////	'KeyValuePair'
	////	'{'
	////		('key' key=EString)?
	////		('value' value=Value)?
	////	'}';
	///**
	// * 	"examples": {
	//		"type": "array",
	//		"items": true
	//	}
	// */ ExamplesSchemaDefinition:
	//	{ExamplesSchemaDefinition}
	//	'"examples"' ':' '[' (examples+=JsonDocument ("," examples+=JsonDocument)*)? ']';
	public ExamplesSchemaDefinitionElements getExamplesSchemaDefinitionAccess() {
		return pExamplesSchemaDefinition;
	}
	
	public ParserRule getExamplesSchemaDefinitionRule() {
		return getExamplesSchemaDefinitionAccess().getRule();
	}
	
	////	{ExamplesSchemaDefinition}
	////	'ExamplesSchemaDefinition'
	////	'{'
	////		('examples' '{' examples+=JsonDocument ( "," examples+=JsonDocument)* '}' )?
	////	'}';
	//IfSchemaDefinition:
	//	'"if"' ':' if=Schema;
	public IfSchemaDefinitionElements getIfSchemaDefinitionAccess() {
		return pIfSchemaDefinition;
	}
	
	public ParserRule getIfSchemaDefinitionRule() {
		return getIfSchemaDefinitionAccess().getRule();
	}
	
	////	'IfSchemaDefinition'
	////	'{'
	////		'if' if=Schema
	////	'}';
	//AllOfSchemaDefinition:
	//	'"allOf"' ':' allOf=SchemaArray;
	public AllOfSchemaDefinitionElements getAllOfSchemaDefinitionAccess() {
		return pAllOfSchemaDefinition;
	}
	
	public ParserRule getAllOfSchemaDefinitionRule() {
		return getAllOfSchemaDefinitionAccess().getRule();
	}
	
	////	'AllOfSchemaDefinition'
	////	'{'
	////		'allOf' allOf=SchemaArray
	////	'}';
	//ContentEncodingSchemaDefinition:
	//	'"contentEncoding"' ':' contentEncoding=EString;
	public ContentEncodingSchemaDefinitionElements getContentEncodingSchemaDefinitionAccess() {
		return pContentEncodingSchemaDefinition;
	}
	
	public ParserRule getContentEncodingSchemaDefinitionRule() {
		return getContentEncodingSchemaDefinitionAccess().getRule();
	}
	
	////	'ContentEncodingSchemaDefinition'
	////	'{'
	////		'contentEncoding' contentEncoding=EString
	////	'}';
	//MultipleOfSchemaDefinition:
	//	'"multipleOf"' ':' multipleOf=EDouble;
	public MultipleOfSchemaDefinitionElements getMultipleOfSchemaDefinitionAccess() {
		return pMultipleOfSchemaDefinition;
	}
	
	public ParserRule getMultipleOfSchemaDefinitionRule() {
		return getMultipleOfSchemaDefinitionAccess().getRule();
	}
	
	////	'MultipleOfSchemaDefinition'
	////	'{'
	////		'multipleOf' multipleOf=EDouble
	////	'}';
	///**
	// * TODO validate "format": "regex"
	//	"pattern": {
	//   		"type": "string",
	//		"format": "regex"
	//	}
	// */ PatternSchemaDefinition:
	//	'"pattern"' ':' pattern=EString;
	public PatternSchemaDefinitionElements getPatternSchemaDefinitionAccess() {
		return pPatternSchemaDefinition;
	}
	
	public ParserRule getPatternSchemaDefinitionRule() {
		return getPatternSchemaDefinitionAccess().getRule();
	}
	
	////	'PatternSchemaDefinition'
	////	'{'
	////		'pattern' pattern=EString
	////	'}';
	//ContainsSchemaDefinition:
	//	'"contains"' ':' contains=Schema;
	public ContainsSchemaDefinitionElements getContainsSchemaDefinitionAccess() {
		return pContainsSchemaDefinition;
	}
	
	public ParserRule getContainsSchemaDefinitionRule() {
		return getContainsSchemaDefinitionAccess().getRule();
	}
	
	////	'ContainsSchemaDefinition'
	////	'{'
	////		'contains' contains=Schema
	////	'}';
	//NotSchemaDefinition:
	//	'"not"' ':' not=Schema;
	public NotSchemaDefinitionElements getNotSchemaDefinitionAccess() {
		return pNotSchemaDefinition;
	}
	
	public ParserRule getNotSchemaDefinitionRule() {
		return getNotSchemaDefinitionAccess().getRule();
	}
	
	////	'NotSchemaDefinition'
	////	'{'
	////		'not' not=Schema
	////	'}';
	//ExclusiveMaximumSchemaDefinition:
	//	'"exclusiveMaximum"' ':' exclusiveMaximum=EDouble;
	public ExclusiveMaximumSchemaDefinitionElements getExclusiveMaximumSchemaDefinitionAccess() {
		return pExclusiveMaximumSchemaDefinition;
	}
	
	public ParserRule getExclusiveMaximumSchemaDefinitionRule() {
		return getExclusiveMaximumSchemaDefinitionAccess().getRule();
	}
	
	////	'ExclusiveMaximumSchemaDefinition'
	////	'{'
	////		'exclusiveMaximum' exclusiveMaximum=EDouble
	////	'}';
	///**
	// * "maxLength": { "$ref": "#/definitions/nonNegativeInteger" }
	// */ MaxLengthSchemaDefinition:
	//	'"maxLength"' ':' maxLength=NonNegativeInteger;
	public MaxLengthSchemaDefinitionElements getMaxLengthSchemaDefinitionAccess() {
		return pMaxLengthSchemaDefinition;
	}
	
	public ParserRule getMaxLengthSchemaDefinitionRule() {
		return getMaxLengthSchemaDefinitionAccess().getRule();
	}
	
	////	'MaxLengthSchemaDefinition'
	////	'{'
	////		'maxLength' maxLength=NonNegativeInteger
	////	'}';
	///**
	// * TODO validate "format": "uri-reference"
	// * 		"$ref": {
	//            "type": "string",
	//            "format": "uri-reference"
	//        }
	// * 
	// */ RefSchemaDefinition:
	//	'"$ref"' ':' ref=EString;
	public RefSchemaDefinitionElements getRefSchemaDefinitionAccess() {
		return pRefSchemaDefinition;
	}
	
	public ParserRule getRefSchemaDefinitionRule() {
		return getRefSchemaDefinitionAccess().getRule();
	}
	
	////	'RefSchemaDefinition'
	////	'{'
	////		'ref' ref=EString
	////	'}';
	//ContentMediaTypeSchemaDefinition:
	//	'"contentMediaType"' ':' contentMediaType=EString;
	public ContentMediaTypeSchemaDefinitionElements getContentMediaTypeSchemaDefinitionAccess() {
		return pContentMediaTypeSchemaDefinition;
	}
	
	public ParserRule getContentMediaTypeSchemaDefinitionRule() {
		return getContentMediaTypeSchemaDefinitionAccess().getRule();
	}
	
	////	'ContentMediaTypeSchemaDefinition'
	////	'{'
	////		'contentMediaType' contentMediaType=EString
	////	'}';
	//ExclusiveMinimumSchemaDefinition:
	//	'"exclusiveMinimum"' ':' exclusiveMinimum=EDouble;
	public ExclusiveMinimumSchemaDefinitionElements getExclusiveMinimumSchemaDefinitionAccess() {
		return pExclusiveMinimumSchemaDefinition;
	}
	
	public ParserRule getExclusiveMinimumSchemaDefinitionRule() {
		return getExclusiveMinimumSchemaDefinitionAccess().getRule();
	}
	
	////	'ExclusiveMinimumSchemaDefinition'
	////	'{'
	////		'exclusiveMinimum' exclusiveMinimum=EDouble
	////	'}';
	///**
	// * TODO validate "format": "uri"
	// * 		"$schema": {
	//            "type": "string",
	//            "format": "uri"
	//        }
	// */ SchemaSchemaDefinition:
	//	'"$schema"' ':' schema=EString;
	public SchemaSchemaDefinitionElements getSchemaSchemaDefinitionAccess() {
		return pSchemaSchemaDefinition;
	}
	
	public ParserRule getSchemaSchemaDefinitionRule() {
		return getSchemaSchemaDefinitionAccess().getRule();
	}
	
	////	'SchemaSchemaDefinition'
	////	'{'
	////		'schema' schema=EString
	////	'}';
	//PropertiesSchemaDefinition:
	//	{PropertiesSchemaDefinition}
	//	'"properties"' ':'
	//	'{' (keySchemaPairs+=KeySchemaPair ("," keySchemaPairs+=KeySchemaPair)*)?
	//	'}';
	public PropertiesSchemaDefinitionElements getPropertiesSchemaDefinitionAccess() {
		return pPropertiesSchemaDefinition;
	}
	
	public ParserRule getPropertiesSchemaDefinitionRule() {
		return getPropertiesSchemaDefinitionAccess().getRule();
	}
	
	////	{PropertiesSchemaDefinition}
	////	'PropertiesSchemaDefinition'
	////	'{'
	////		('keySchemaPairs' '{' keySchemaPairs+=KeySchemaPair ( "," keySchemaPairs+=KeySchemaPair)* '}' )?
	////	'}';
	//PropertyNamesSchemaDefinition:
	//	'"propertyNames"' ':' propertyNames=Schema;
	public PropertyNamesSchemaDefinitionElements getPropertyNamesSchemaDefinitionAccess() {
		return pPropertyNamesSchemaDefinition;
	}
	
	public ParserRule getPropertyNamesSchemaDefinitionRule() {
		return getPropertyNamesSchemaDefinitionAccess().getRule();
	}
	
	//terminal JSON_NUMBER returns ecore::EFloat:
	//	'-'? ('0' | '1'..'9' '0'..'9'*) ('.' '0'..'9'+)? (('E' | 'e') ('+' | '-') '0'..'9'+)?;
	public TerminalRule getJSON_NUMBERRule() {
		return tJSON_NUMBER;
	}
	
	//EDouble ecore::EDouble:
	//	JSON_NUMBER;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	////	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EString:
	//	VALID_STRING;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	////	STRING | ID;
	///**
	// * TODO delete here and in ecore
	// */ //Enum returns Enum:
	////	'[' items+=JsonDocument ( "," items+=JsonDocument)* ']'
	////;
	////	{Enum}
	////	'Enum'
	////	'{'
	////		('items' '{' items+=JsonDocument ( "," items+=JsonDocument)* '}' )?
	////	'}';
	//JsonDocument:
	//	value=Value;
	public JsonDocumentElements getJsonDocumentAccess() {
		return pJsonDocument;
	}
	
	public ParserRule getJsonDocumentRule() {
		return getJsonDocumentAccess().getRule();
	}
	
	////	{JsonDocument}
	////	'JsonDocument'
	////	'{'
	////		('value' value=Value)?
	////	'}';
	///** TODO put Value as abstract in ecore
	//Value_Impl returns Value:
	//	{Value}
	//	'Value'
	//	;
	// */ IntegerValue:
	//	value=EInt;
	public IntegerValueElements getIntegerValueAccess() {
		return pIntegerValue;
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}
	
	////	'IntegerValue'
	////	'{'
	////		'value' value=EInt
	////	'}';
	//BooleanValue:
	//	value=EBoolean;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	////	value?='value'
	////	'BooleanValue'
	////	;
	//NullValue:
	//	{NullValue}
	//	'null';
	public NullValueElements getNullValueAccess() {
		return pNullValue;
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}
	
	////	{NullValue}
	////	'NullValue'
	////	;
	//StringValue:
	//	value=VALID_STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	////	'StringValue'
	////	'{'
	////		'value' value=EString
	////	'}';
	//ObjectValue:
	//	{ObjectValue}
	//	'{' (keyvaluepair+=KeyValuePair ("," keyvaluepair+=KeyValuePair)*)?
	//	'}';
	public ObjectValueElements getObjectValueAccess() {
		return pObjectValue;
	}
	
	public ParserRule getObjectValueRule() {
		return getObjectValueAccess().getRule();
	}
	
	////	{ObjectValue}
	////	'ObjectValue'
	////	'{'
	////		('keyvaluepair' '{' keyvaluepair+=KeyValuePair ( "," keyvaluepair+=KeyValuePair)* '}' )?
	////	'}';
	//NumberValue:
	//	value=EDouble;
	public NumberValueElements getNumberValueAccess() {
		return pNumberValue;
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}
	
	////	'NumberValue'
	////	'{'
	////		'value' value=EDouble
	////	'}';
	//ArrayValue:
	//	{ArrayValue}
	//	'[' (value+=Value ("," value+=Value)*)? ']';
	public ArrayValueElements getArrayValueAccess() {
		return pArrayValue;
	}
	
	public ParserRule getArrayValueRule() {
		return getArrayValueAccess().getRule();
	}
	
	////	{ArrayValue}
	////	'ArrayValue'
	////	'{'
	////		('value' '{' value+=Value ( "," value+=Value)* '}' )?
	////	'}';
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//SchemaArray:
	//	'[' items+=Schema ("," items+=Schema)* ']';
	public SchemaArrayElements getSchemaArrayAccess() {
		return pSchemaArray;
	}
	
	public ParserRule getSchemaArrayRule() {
		return getSchemaArrayAccess().getRule();
	}
	
	////	'SchemaArray'
	////	'{'
	////		'items' '{' items+=Schema ( "," items+=Schema)* '}' 
	////	'}';
	///**
	// * TODO put validation value >=0
	// * 	"nonNegativeIntegerDefault0": {
	//		"allOf": [
	//			{ "$ref": "#/definitions/nonNegativeInteger" },
	//			{ "default": 0 }
	//		]
	//	}
	// */ NonNegativeIntegerDefault0:
	//	value=EInt;
	public NonNegativeIntegerDefault0Elements getNonNegativeIntegerDefault0Access() {
		return pNonNegativeIntegerDefault0;
	}
	
	public ParserRule getNonNegativeIntegerDefault0Rule() {
		return getNonNegativeIntegerDefault0Access().getRule();
	}
	
	////	'NonNegativeIntegerDefault0'
	////	'{'
	////		'value' value=EInt
	////	'}';
	//KeySchemaPair:
	//	key=EString ':' value=Schema;
	public KeySchemaPairElements getKeySchemaPairAccess() {
		return pKeySchemaPair;
	}
	
	public ParserRule getKeySchemaPairRule() {
		return getKeySchemaPairAccess().getRule();
	}
	
	////	'KeySchemaPair'
	////	'{'
	////		'key' key=EString
	////		'value' value=Schema
	////	'}';
	///**
	// * TODO put validation value >=0
	// * "nonNegativeInteger": {
	//		"type": "integer",
	//		"minimum": 0
	//	}
	// */ NonNegativeInteger:
	//	value=EInt;
	public NonNegativeIntegerElements getNonNegativeIntegerAccess() {
		return pNonNegativeInteger;
	}
	
	public ParserRule getNonNegativeIntegerRule() {
		return getNonNegativeIntegerAccess().getRule();
	}
	
	//enum SimpleTypes:
	//	array='"array"' | boolean='"boolean"' | integer='"integer"' | null='"null"' | number='"number"' | object='"object"' |
	//	string='"string"';
	public SimpleTypesElements getSimpleTypesAccess() {
		return eSimpleTypes;
	}
	
	public EnumRule getSimpleTypesRule() {
		return getSimpleTypesAccess().getRule();
	}
	
	////	array = 'array' | boolean = 'boolean' | integer = 'integer' | null = 'null' | number = 'number' | object = 'object' | string = 'string';
	//TypesAnyOf2:
	//	'[' items+=SimpleTypes ("," items+=SimpleTypes)* ']';
	public TypesAnyOf2Elements getTypesAnyOf2Access() {
		return pTypesAnyOf2;
	}
	
	public ParserRule getTypesAnyOf2Rule() {
		return getTypesAnyOf2Access().getRule();
	}
	
	////	'TypesAnyOf2'
	////	'{'
	////		'items' '{' items+=SimpleTypes ( "," items+=SimpleTypes)* '}' 
	////	'}';
	///**
	// * TODO validation that at least one of anyOf1 and anyOf2 must exist 
	// */ DependenciesAnyOf:
	//	{DependenciesAnyOf} dependenciesAnyOf2=KeyStringArrayPair?
	//	dependenciesAnyOf1=KeySchemaPair?;
	public DependenciesAnyOfElements getDependenciesAnyOfAccess() {
		return pDependenciesAnyOf;
	}
	
	public ParserRule getDependenciesAnyOfRule() {
		return getDependenciesAnyOfAccess().getRule();
	}
	
	////	{DependenciesAnyOf}
	////	'DependenciesAnyOf'
	////	'{'
	////		('dependenciesAnyOf2' dependenciesAnyOf2=KeyStringArrayPair)?
	////		('dependenciesAnyOf1' dependenciesAnyOf1=KeySchemaPair)?
	////	'}';
	//KeyStringArrayPair:
	//	key=EString ':' value=StringArray;
	public KeyStringArrayPairElements getKeyStringArrayPairAccess() {
		return pKeyStringArrayPair;
	}
	
	public ParserRule getKeyStringArrayPairRule() {
		return getKeyStringArrayPairAccess().getRule();
	}
	
	////	'KeyStringArrayPair'
	////	'{'
	////		'key' key=EString
	////		'value' value=StringArray
	////	'}';
	///**
	// * TODO uniqueness validation
	// */ StringArray:
	//	{StringArray}
	//	'[' (values+=EString ("," values+=EString)*)? ']';
	public StringArrayElements getStringArrayAccess() {
		return pStringArray;
	}
	
	public ParserRule getStringArrayRule() {
		return getStringArrayAccess().getRule();
	}
	
	////	{StringArray}
	////	'StringArray'
	////	'{'
	////		('values' '{' values+=EString ( "," values+=EString)* '}' )?
	////	'}';
	//VALID_STRING:
	//	STRING | KEYWORD;
	public VALID_STRINGElements getVALID_STRINGAccess() {
		return pVALID_STRING;
	}
	
	public ParserRule getVALID_STRINGRule() {
		return getVALID_STRINGAccess().getRule();
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//// TODO please @Alessandro review that all keywords are defined here. Thanks!
	//KEYWORD:
	//	'"$id"' | '"$schema"' | '"$ref"' | '"$comment"' | '"title"' | '"description"' | '"default"' | '"readOnly"' |
	//	'"writeOnly"' | '"examples"' | '"multipleOf"' | '"maximum"' | '"exclusiveMaximum"' | '"minimum"' |
	//	'"exclusiveMinimum"' | '"maxLength"' | '"minLength"' |
	//	'"pattern"' | '"additionalItems"' | '"items"' | '"maxItems"' | '"minItems"' | '"uniqueItems"' | '"contains"' |
	//	'"maxProperties"' | '"minProperties"' | '"required"' | '"additionalProperties"' | '"definitions"' | '"properties"' |
	//	'"patternProperties"' | '"dependencies"' | '"propertyNames"' | '"const"' | '"enum"' | '"type"' | '"format"' |
	//	'"contentMediaType"' | '"contentEncoding"' |
	//	'"if"' | '"then"' | '"else"' | '"allOf"' | '"anyOf"' | '"oneOf"' | '"not"';
	public KEYWORDElements getKEYWORDAccess() {
		return pKEYWORD;
	}
	
	public ParserRule getKEYWORDRule() {
		return getKEYWORDAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
